// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: CSMessages_External.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Hello event is sent as the first message after connection
type ProtoHelloEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=990" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoHelloEvent fields.
const (
	Default_ProtoHelloEvent_PayloadType = ProtoCSPayloadType_PROTO_HELLO_EVENT
)

func (x *ProtoHelloEvent) Reset() {
	*x = ProtoHelloEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoHelloEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHelloEvent) ProtoMessage() {}

func (x *ProtoHelloEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHelloEvent.ProtoReflect.Descriptor instead.
func (*ProtoHelloEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{0}
}

func (x *ProtoHelloEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoHelloEvent_PayloadType
}

// Request for authentication of Manager
type ProtoManagerAuthReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PayloadType     *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=301" json:"payloadType,omitempty"`
	PlantId         *string                `protobuf:"bytes,2,req,name=plantId" json:"plantId,omitempty"`                 // Identifier of the specific cServer instance
	EnvironmentName *string                `protobuf:"bytes,3,req,name=environmentName" json:"environmentName,omitempty"` // Identifier of the environment
	Login           *int64                 `protobuf:"varint,4,req,name=login" json:"login,omitempty"`                    // Login of the Manager
	PasswordHash    *string                `protobuf:"bytes,5,req,name=passwordHash" json:"passwordHash,omitempty"`       // MD5-hash of Manager's password
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for ProtoManagerAuthReq fields.
const (
	Default_ProtoManagerAuthReq_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_AUTH_REQ
)

func (x *ProtoManagerAuthReq) Reset() {
	*x = ProtoManagerAuthReq{}
	mi := &file_CSMessages_External_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerAuthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerAuthReq) ProtoMessage() {}

func (x *ProtoManagerAuthReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerAuthReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerAuthReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{1}
}

func (x *ProtoManagerAuthReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerAuthReq_PayloadType
}

func (x *ProtoManagerAuthReq) GetPlantId() string {
	if x != nil && x.PlantId != nil {
		return *x.PlantId
	}
	return ""
}

func (x *ProtoManagerAuthReq) GetEnvironmentName() string {
	if x != nil && x.EnvironmentName != nil {
		return *x.EnvironmentName
	}
	return ""
}

func (x *ProtoManagerAuthReq) GetLogin() int64 {
	if x != nil && x.Login != nil {
		return *x.Login
	}
	return 0
}

func (x *ProtoManagerAuthReq) GetPasswordHash() string {
	if x != nil && x.PasswordHash != nil {
		return *x.PasswordHash
	}
	return ""
}

// Response for Manager authentication request
type ProtoManagerAuthRes struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType      `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=302" json:"payloadType,omitempty"`
	Permission    []ProtoManagerPermission `protobuf:"varint,2,rep,name=permission,enum=ProtoManagerPermission" json:"permission,omitempty"` // Permissions of the Manager
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerAuthRes fields.
const (
	Default_ProtoManagerAuthRes_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_AUTH_RES
)

func (x *ProtoManagerAuthRes) Reset() {
	*x = ProtoManagerAuthRes{}
	mi := &file_CSMessages_External_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerAuthRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerAuthRes) ProtoMessage() {}

func (x *ProtoManagerAuthRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerAuthRes.ProtoReflect.Descriptor instead.
func (*ProtoManagerAuthRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{2}
}

func (x *ProtoManagerAuthRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerAuthRes_PayloadType
}

func (x *ProtoManagerAuthRes) GetPermission() []ProtoManagerPermission {
	if x != nil {
		return x.Permission
	}
	return nil
}

// Request for changing of Trader Account's ("Trader" for short) password
type ProtoChangeTraderPasswordReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=303" json:"payloadType,omitempty"`
	TraderId      *int64                 `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"`        // Unique identifier of the Trader's within environment
	PasswordHash  *string                `protobuf:"bytes,3,req,name=passwordHash" json:"passwordHash,omitempty"` // MD5-hash of Trader's password
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoChangeTraderPasswordReq fields.
const (
	Default_ProtoChangeTraderPasswordReq_PayloadType = ProtoCSPayloadType_PROTO_CHANGE_TRADER_PASSWORD_REQ
)

func (x *ProtoChangeTraderPasswordReq) Reset() {
	*x = ProtoChangeTraderPasswordReq{}
	mi := &file_CSMessages_External_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoChangeTraderPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoChangeTraderPasswordReq) ProtoMessage() {}

func (x *ProtoChangeTraderPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoChangeTraderPasswordReq.ProtoReflect.Descriptor instead.
func (*ProtoChangeTraderPasswordReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{3}
}

func (x *ProtoChangeTraderPasswordReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoChangeTraderPasswordReq_PayloadType
}

func (x *ProtoChangeTraderPasswordReq) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoChangeTraderPasswordReq) GetPasswordHash() string {
	if x != nil && x.PasswordHash != nil {
		return *x.PasswordHash
	}
	return ""
}

// Response for ProtoChangeTraderPasswordReq
type ProtoChangeTraderPasswordRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=304" json:"payloadType,omitempty"`
	TraderId      *int64                 `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"` // Unique identifier of the Trader's within environment
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoChangeTraderPasswordRes fields.
const (
	Default_ProtoChangeTraderPasswordRes_PayloadType = ProtoCSPayloadType_PROTO_CHANGE_TRADER_PASSWORD_RES
)

func (x *ProtoChangeTraderPasswordRes) Reset() {
	*x = ProtoChangeTraderPasswordRes{}
	mi := &file_CSMessages_External_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoChangeTraderPasswordRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoChangeTraderPasswordRes) ProtoMessage() {}

func (x *ProtoChangeTraderPasswordRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoChangeTraderPasswordRes.ProtoReflect.Descriptor instead.
func (*ProtoChangeTraderPasswordRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{4}
}

func (x *ProtoChangeTraderPasswordRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoChangeTraderPasswordRes_PayloadType
}

func (x *ProtoChangeTraderPasswordRes) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

// Request for checking of Trader's password using either traderId or login
type ProtoCheckTraderPasswordReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=307" json:"payloadType,omitempty"`
	TraderId      *int64                 `protobuf:"varint,2,opt,name=traderId" json:"traderId,omitempty"`        // Unique identifier of the Trader's within environment
	PasswordHash  *string                `protobuf:"bytes,3,req,name=passwordHash" json:"passwordHash,omitempty"` // MD5-hash Trader's password
	Login         *int64                 `protobuf:"varint,4,opt,name=login" json:"login,omitempty"`              // Login of the Trader
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCheckTraderPasswordReq fields.
const (
	Default_ProtoCheckTraderPasswordReq_PayloadType = ProtoCSPayloadType_PROTO_CHECK_TRADER_PASSWORD_REQ
)

func (x *ProtoCheckTraderPasswordReq) Reset() {
	*x = ProtoCheckTraderPasswordReq{}
	mi := &file_CSMessages_External_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCheckTraderPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCheckTraderPasswordReq) ProtoMessage() {}

func (x *ProtoCheckTraderPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCheckTraderPasswordReq.ProtoReflect.Descriptor instead.
func (*ProtoCheckTraderPasswordReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{5}
}

func (x *ProtoCheckTraderPasswordReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCheckTraderPasswordReq_PayloadType
}

func (x *ProtoCheckTraderPasswordReq) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoCheckTraderPasswordReq) GetPasswordHash() string {
	if x != nil && x.PasswordHash != nil {
		return *x.PasswordHash
	}
	return ""
}

func (x *ProtoCheckTraderPasswordReq) GetLogin() int64 {
	if x != nil && x.Login != nil {
		return *x.Login
	}
	return 0
}

// Response for ProtoCheckTraderPasswordReq
type ProtoCheckTraderPasswordRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=308" json:"payloadType,omitempty"`
	TraderId      *int64                 `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"` // Unique identifier of the Trader's within environment
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCheckTraderPasswordRes fields.
const (
	Default_ProtoCheckTraderPasswordRes_PayloadType = ProtoCSPayloadType_PROTO_CHECK_TRADER_PASSWORD_RES
)

func (x *ProtoCheckTraderPasswordRes) Reset() {
	*x = ProtoCheckTraderPasswordRes{}
	mi := &file_CSMessages_External_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCheckTraderPasswordRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCheckTraderPasswordRes) ProtoMessage() {}

func (x *ProtoCheckTraderPasswordRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCheckTraderPasswordRes.ProtoReflect.Descriptor instead.
func (*ProtoCheckTraderPasswordRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{6}
}

func (x *ProtoCheckTraderPasswordRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCheckTraderPasswordRes_PayloadType
}

func (x *ProtoCheckTraderPasswordRes) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

// Request for changing of Manager's password
type ProtoChangeManagerPasswordReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=305" json:"payloadType,omitempty"`
	ManagerId     *int64                 `protobuf:"varint,2,req,name=managerId" json:"managerId,omitempty"`      // ID of the Manager
	PasswordHash  *string                `protobuf:"bytes,3,req,name=passwordHash" json:"passwordHash,omitempty"` // MD5-hash of Manager's password
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoChangeManagerPasswordReq fields.
const (
	Default_ProtoChangeManagerPasswordReq_PayloadType = ProtoCSPayloadType_PROTO_CHANGE_MANAGER_PASSWORD_REQ
)

func (x *ProtoChangeManagerPasswordReq) Reset() {
	*x = ProtoChangeManagerPasswordReq{}
	mi := &file_CSMessages_External_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoChangeManagerPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoChangeManagerPasswordReq) ProtoMessage() {}

func (x *ProtoChangeManagerPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoChangeManagerPasswordReq.ProtoReflect.Descriptor instead.
func (*ProtoChangeManagerPasswordReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{7}
}

func (x *ProtoChangeManagerPasswordReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoChangeManagerPasswordReq_PayloadType
}

func (x *ProtoChangeManagerPasswordReq) GetManagerId() int64 {
	if x != nil && x.ManagerId != nil {
		return *x.ManagerId
	}
	return 0
}

func (x *ProtoChangeManagerPasswordReq) GetPasswordHash() string {
	if x != nil && x.PasswordHash != nil {
		return *x.PasswordHash
	}
	return ""
}

// Response for ProtoChangeManagerPasswordReq
type ProtoChangeManagerPasswordRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=306" json:"payloadType,omitempty"`
	ManagerId     *int64                 `protobuf:"varint,2,req,name=managerId" json:"managerId,omitempty"` // ID of the Manager
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoChangeManagerPasswordRes fields.
const (
	Default_ProtoChangeManagerPasswordRes_PayloadType = ProtoCSPayloadType_PROTO_CHANGE_MANAGER_PASSWORD_RES
)

func (x *ProtoChangeManagerPasswordRes) Reset() {
	*x = ProtoChangeManagerPasswordRes{}
	mi := &file_CSMessages_External_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoChangeManagerPasswordRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoChangeManagerPasswordRes) ProtoMessage() {}

func (x *ProtoChangeManagerPasswordRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoChangeManagerPasswordRes.ProtoReflect.Descriptor instead.
func (*ProtoChangeManagerPasswordRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{8}
}

func (x *ProtoChangeManagerPasswordRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoChangeManagerPasswordRes_PayloadType
}

func (x *ProtoChangeManagerPasswordRes) GetManagerId() int64 {
	if x != nil && x.ManagerId != nil {
		return *x.ManagerId
	}
	return 0
}

// Request for checking of Manager's password
type ProtoCheckManagerPasswordReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=309" json:"payloadType,omitempty"`
	ManagerId     *int64                 `protobuf:"varint,2,opt,name=managerId" json:"managerId,omitempty"`      // ID of the Manager
	PasswordHash  *string                `protobuf:"bytes,3,opt,name=passwordHash" json:"passwordHash,omitempty"` // MD5-hash of Manager's password
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCheckManagerPasswordReq fields.
const (
	Default_ProtoCheckManagerPasswordReq_PayloadType = ProtoCSPayloadType_PROTO_CHECK_MANAGER_PASSWORD_REQ
)

func (x *ProtoCheckManagerPasswordReq) Reset() {
	*x = ProtoCheckManagerPasswordReq{}
	mi := &file_CSMessages_External_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCheckManagerPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCheckManagerPasswordReq) ProtoMessage() {}

func (x *ProtoCheckManagerPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCheckManagerPasswordReq.ProtoReflect.Descriptor instead.
func (*ProtoCheckManagerPasswordReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{9}
}

func (x *ProtoCheckManagerPasswordReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCheckManagerPasswordReq_PayloadType
}

func (x *ProtoCheckManagerPasswordReq) GetManagerId() int64 {
	if x != nil && x.ManagerId != nil {
		return *x.ManagerId
	}
	return 0
}

func (x *ProtoCheckManagerPasswordReq) GetPasswordHash() string {
	if x != nil && x.PasswordHash != nil {
		return *x.PasswordHash
	}
	return ""
}

// Response for ProtoCheckManagerPasswordReq
type ProtoCheckManagerPasswordRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=310" json:"payloadType,omitempty"`
	ManagerId     *int64                 `protobuf:"varint,2,opt,name=managerId" json:"managerId,omitempty"` // ID of the Manager
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCheckManagerPasswordRes fields.
const (
	Default_ProtoCheckManagerPasswordRes_PayloadType = ProtoCSPayloadType_PROTO_CHECK_MANAGER_PASSWORD_RES
)

func (x *ProtoCheckManagerPasswordRes) Reset() {
	*x = ProtoCheckManagerPasswordRes{}
	mi := &file_CSMessages_External_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCheckManagerPasswordRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCheckManagerPasswordRes) ProtoMessage() {}

func (x *ProtoCheckManagerPasswordRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCheckManagerPasswordRes.ProtoReflect.Descriptor instead.
func (*ProtoCheckManagerPasswordRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{10}
}

func (x *ProtoCheckManagerPasswordRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCheckManagerPasswordRes_PayloadType
}

func (x *ProtoCheckManagerPasswordRes) GetManagerId() int64 {
	if x != nil && x.ManagerId != nil {
		return *x.ManagerId
	}
	return 0
}

// Event that is sent following the successful Order acceptance or execution by the cServer
// Acts as response to the ProtoNewOrderReq, ProtoCancelOrderReq, ProtoAmendOrderReq,
// ProtoAmendPositionSLTPReq, ProtoClosePositionReq requests. Also, the event is sent when a Deposit/Withdrawal took place
type ProtoExecutionEvent struct {
	state                protoimpl.MessageState     `protogen:"open.v1"`
	PayloadType          *ProtoCSPayloadType        `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=300" json:"payloadType,omitempty"`
	ExecutionType        *ProtoExecutionType        `protobuf:"varint,2,req,name=executionType,enum=ProtoExecutionType" json:"executionType,omitempty"` // Type of the happened event
	Position             *ProtoPosition             `protobuf:"bytes,4,opt,name=position" json:"position,omitempty"`                                    // Reference to the Position linked with the execution
	Order                *ProtoOrder                `protobuf:"bytes,5,opt,name=order" json:"order,omitempty"`                                          // Reference to the Order linked with the execution
	ErrorCode            *string                    `protobuf:"bytes,6,opt,name=errorCode" json:"errorCode,omitempty"`                                  // The name of the ProtoErrorCode or the other custom ErrorCodes in case of unsuccessful operation
	DepositWithdraw      *ProtoDepositWithdraw      `protobuf:"bytes,7,opt,name=depositWithdraw" json:"depositWithdraw,omitempty"`                      // Reference to the Deposit or Withdrawal operation linked with the execution
	Deal                 *ProtoDeal                 `protobuf:"bytes,8,opt,name=deal" json:"deal,omitempty"`                                            // Reference to the Deal linked with the execution
	EventId              *uint64                    `protobuf:"varint,9,opt,name=eventId" json:"eventId,omitempty"`                                     // ID of the execution event
	BonusDepositWithdraw *ProtoBonusDepositWithdraw `protobuf:"bytes,10,opt,name=bonusDepositWithdraw" json:"bonusDepositWithdraw,omitempty"`           // Reference to the Bonus Deposit or Bonus Withdrawal operation linked with the execution
	IsServerEvent        *bool                      `protobuf:"varint,11,opt,name=isServerEvent" json:"isServerEvent,omitempty"`                        // If TRUE then the event generated by the cServer logic instead of the Trader's request. (e.g. Stop Out)
	DepositToUsdRate     *float64                   `protobuf:"fixed64,12,opt,name=depositToUsdRate" json:"depositToUsdRate,omitempty"`                 // Conversion rate from the deposit currency to USD
	NotifyBigVolume      *bool                      `protobuf:"varint,13,opt,name=notifyBigVolume" json:"notifyBigVolume,omitempty"`                    // Returned as TRUE if executed volume is big enough as per Trade Notification Profile
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for ProtoExecutionEvent fields.
const (
	Default_ProtoExecutionEvent_PayloadType = ProtoCSPayloadType_PROTO_EXECUTION_EVENT
)

func (x *ProtoExecutionEvent) Reset() {
	*x = ProtoExecutionEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoExecutionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoExecutionEvent) ProtoMessage() {}

func (x *ProtoExecutionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoExecutionEvent.ProtoReflect.Descriptor instead.
func (*ProtoExecutionEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{11}
}

func (x *ProtoExecutionEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoExecutionEvent_PayloadType
}

func (x *ProtoExecutionEvent) GetExecutionType() ProtoExecutionType {
	if x != nil && x.ExecutionType != nil {
		return *x.ExecutionType
	}
	return ProtoExecutionType_ORDER_ACCEPTED
}

func (x *ProtoExecutionEvent) GetPosition() *ProtoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *ProtoExecutionEvent) GetOrder() *ProtoOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ProtoExecutionEvent) GetErrorCode() string {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return ""
}

func (x *ProtoExecutionEvent) GetDepositWithdraw() *ProtoDepositWithdraw {
	if x != nil {
		return x.DepositWithdraw
	}
	return nil
}

func (x *ProtoExecutionEvent) GetDeal() *ProtoDeal {
	if x != nil {
		return x.Deal
	}
	return nil
}

func (x *ProtoExecutionEvent) GetEventId() uint64 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *ProtoExecutionEvent) GetBonusDepositWithdraw() *ProtoBonusDepositWithdraw {
	if x != nil {
		return x.BonusDepositWithdraw
	}
	return nil
}

func (x *ProtoExecutionEvent) GetIsServerEvent() bool {
	if x != nil && x.IsServerEvent != nil {
		return *x.IsServerEvent
	}
	return false
}

func (x *ProtoExecutionEvent) GetDepositToUsdRate() float64 {
	if x != nil && x.DepositToUsdRate != nil {
		return *x.DepositToUsdRate
	}
	return 0
}

func (x *ProtoExecutionEvent) GetNotifyBigVolume() bool {
	if x != nil && x.NotifyBigVolume != nil {
		return *x.NotifyBigVolume
	}
	return false
}

// Event that is sent when the margin allocated to a specific Position is changed
type ProtoMarginChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=335" json:"payloadType,omitempty"`
	PositionId    *uint64                `protobuf:"varint,2,req,name=positionId" json:"positionId,omitempty"`   // The unique ID of the Position
	UsedMargin    *uint64                `protobuf:"varint,3,req,name=usedMargin" json:"usedMargin,omitempty"`   // The new value of the margin used
	MoneyDigits   *uint32                `protobuf:"varint,4,opt,name=moneyDigits" json:"moneyDigits,omitempty"` // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpret as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects usedMargin
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoMarginChangedEvent fields.
const (
	Default_ProtoMarginChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_POSITION_MARGIN_CHANGED_EVENT
)

func (x *ProtoMarginChangedEvent) Reset() {
	*x = ProtoMarginChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoMarginChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMarginChangedEvent) ProtoMessage() {}

func (x *ProtoMarginChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMarginChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoMarginChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{12}
}

func (x *ProtoMarginChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoMarginChangedEvent_PayloadType
}

func (x *ProtoMarginChangedEvent) GetPositionId() uint64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoMarginChangedEvent) GetUsedMargin() uint64 {
	if x != nil && x.UsedMargin != nil {
		return *x.UsedMargin
	}
	return 0
}

func (x *ProtoMarginChangedEvent) GetMoneyDigits() uint32 {
	if x != nil && x.MoneyDigits != nil {
		return *x.MoneyDigits
	}
	return 0
}

// Request to get current UNIX-timestamp of the cServer
type ProtoServerTimeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=313" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoServerTimeReq fields.
const (
	Default_ProtoServerTimeReq_PayloadType = ProtoCSPayloadType_PROTO_SERVER_TIME_REQ
)

func (x *ProtoServerTimeReq) Reset() {
	*x = ProtoServerTimeReq{}
	mi := &file_CSMessages_External_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoServerTimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoServerTimeReq) ProtoMessage() {}

func (x *ProtoServerTimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoServerTimeReq.ProtoReflect.Descriptor instead.
func (*ProtoServerTimeReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{13}
}

func (x *ProtoServerTimeReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoServerTimeReq_PayloadType
}

// Response to ProtoServerTimeReq
type ProtoServerTimeRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=314" json:"payloadType,omitempty"`
	TimeInMillis  *int64                 `protobuf:"varint,2,req,name=timeInMillis" json:"timeInMillis,omitempty"` // Server time in milliseconds (UNIX-timestamp)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoServerTimeRes fields.
const (
	Default_ProtoServerTimeRes_PayloadType = ProtoCSPayloadType_PROTO_SERVER_TIME_RES
)

func (x *ProtoServerTimeRes) Reset() {
	*x = ProtoServerTimeRes{}
	mi := &file_CSMessages_External_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoServerTimeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoServerTimeRes) ProtoMessage() {}

func (x *ProtoServerTimeRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoServerTimeRes.ProtoReflect.Descriptor instead.
func (*ProtoServerTimeRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{14}
}

func (x *ProtoServerTimeRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoServerTimeRes_PayloadType
}

func (x *ProtoServerTimeRes) GetTimeInMillis() int64 {
	if x != nil && x.TimeInMillis != nil {
		return *x.TimeInMillis
	}
	return 0
}

// Request to get information about Order and related Deals
type ProtoOrderDetailsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=321" json:"payloadType,omitempty"`
	OrderId       *int64                 `protobuf:"varint,2,req,name=orderId" json:"orderId,omitempty"` // The unique ID of the Order
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoOrderDetailsReq fields.
const (
	Default_ProtoOrderDetailsReq_PayloadType = ProtoCSPayloadType_PROTO_ORDER_DETAILS_REQ
)

func (x *ProtoOrderDetailsReq) Reset() {
	*x = ProtoOrderDetailsReq{}
	mi := &file_CSMessages_External_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoOrderDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOrderDetailsReq) ProtoMessage() {}

func (x *ProtoOrderDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOrderDetailsReq.ProtoReflect.Descriptor instead.
func (*ProtoOrderDetailsReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{15}
}

func (x *ProtoOrderDetailsReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoOrderDetailsReq_PayloadType
}

func (x *ProtoOrderDetailsReq) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

// Response for ProtoOrderDetailsReq
type ProtoOrderDetailsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=322" json:"payloadType,omitempty"`
	OrderSnapshot *ProtoOrder            `protobuf:"bytes,2,req,name=orderSnapshot" json:"orderSnapshot,omitempty"` // Order details
	Deal          []*ProtoDeal           `protobuf:"bytes,3,rep,name=deal" json:"deal,omitempty"`                   // The list of Deals related to the Order
	Action        []*ProtoOrderAction    `protobuf:"bytes,4,rep,name=action" json:"action,omitempty"`               // Refers to the action related to Order (e.g. create, amend, cancel etc)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoOrderDetailsRes fields.
const (
	Default_ProtoOrderDetailsRes_PayloadType = ProtoCSPayloadType_PROTO_ORDER_DETAILS_RES
)

func (x *ProtoOrderDetailsRes) Reset() {
	*x = ProtoOrderDetailsRes{}
	mi := &file_CSMessages_External_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoOrderDetailsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOrderDetailsRes) ProtoMessage() {}

func (x *ProtoOrderDetailsRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOrderDetailsRes.ProtoReflect.Descriptor instead.
func (*ProtoOrderDetailsRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{16}
}

func (x *ProtoOrderDetailsRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoOrderDetailsRes_PayloadType
}

func (x *ProtoOrderDetailsRes) GetOrderSnapshot() *ProtoOrder {
	if x != nil {
		return x.OrderSnapshot
	}
	return nil
}

func (x *ProtoOrderDetailsRes) GetDeal() []*ProtoDeal {
	if x != nil {
		return x.Deal
	}
	return nil
}

func (x *ProtoOrderDetailsRes) GetAction() []*ProtoOrderAction {
	if x != nil {
		return x.Action
	}
	return nil
}

// Request for recalculation of Trader's margin
type ProtoRecalculateAccountMarginReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PayloadType     *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=336" json:"payloadType,omitempty"`
	TraderID        *int64                 `protobuf:"varint,2,req,name=traderID" json:"traderID,omitempty"`               // Unique identifier of the Trader's within environment
	LeverageInCents *uint32                `protobuf:"varint,4,opt,name=leverageInCents" json:"leverageInCents,omitempty"` // Account leverage (e.g. if leverage = 1:50 then value = 5000)
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for ProtoRecalculateAccountMarginReq fields.
const (
	Default_ProtoRecalculateAccountMarginReq_PayloadType = ProtoCSPayloadType_PROTO_RECALCULATE_ACCOUNT_MARGIN_REQ
)

func (x *ProtoRecalculateAccountMarginReq) Reset() {
	*x = ProtoRecalculateAccountMarginReq{}
	mi := &file_CSMessages_External_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoRecalculateAccountMarginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoRecalculateAccountMarginReq) ProtoMessage() {}

func (x *ProtoRecalculateAccountMarginReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoRecalculateAccountMarginReq.ProtoReflect.Descriptor instead.
func (*ProtoRecalculateAccountMarginReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{17}
}

func (x *ProtoRecalculateAccountMarginReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoRecalculateAccountMarginReq_PayloadType
}

func (x *ProtoRecalculateAccountMarginReq) GetTraderID() int64 {
	if x != nil && x.TraderID != nil {
		return *x.TraderID
	}
	return 0
}

func (x *ProtoRecalculateAccountMarginReq) GetLeverageInCents() uint32 {
	if x != nil && x.LeverageInCents != nil {
		return *x.LeverageInCents
	}
	return 0
}

// Response for ProtoRecalculateAccountMarginReq
type ProtoRecalculateAccountMarginRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=337" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoRecalculateAccountMarginRes fields.
const (
	Default_ProtoRecalculateAccountMarginRes_PayloadType = ProtoCSPayloadType_PROTO_RECALCULATE_ACCOUNT_MARGIN_RES
)

func (x *ProtoRecalculateAccountMarginRes) Reset() {
	*x = ProtoRecalculateAccountMarginRes{}
	mi := &file_CSMessages_External_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoRecalculateAccountMarginRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoRecalculateAccountMarginRes) ProtoMessage() {}

func (x *ProtoRecalculateAccountMarginRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoRecalculateAccountMarginRes.ProtoReflect.Descriptor instead.
func (*ProtoRecalculateAccountMarginRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{18}
}

func (x *ProtoRecalculateAccountMarginRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoRecalculateAccountMarginRes_PayloadType
}

// Request for recalculation of margin for the changed Symbol margin settings
type ProtoRecalculateSymbolMarginReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=338" json:"payloadType,omitempty"`
	GroupId       *int64                 `protobuf:"varint,2,req,name=groupId" json:"groupId,omitempty"`       // The unique identifier of the group in specific server environment within cTrader platform
	SymbolId      *int64                 `protobuf:"varint,3,req,name=symbolId" json:"symbolId,omitempty"`     // The unique identifier of the Symbol in specific server environment within cTrader platform
	LeverageId    *int64                 `protobuf:"varint,5,req,name=leverageId" json:"leverageId,omitempty"` // The unique identifier of Dynamic Leverage entity. https://help.ctrader.com/ctrader/trading/dynamic-leverage
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoRecalculateSymbolMarginReq fields.
const (
	Default_ProtoRecalculateSymbolMarginReq_PayloadType = ProtoCSPayloadType_PROTO_RECALCULATE_SYMBOL_MARGIN_REQ
)

func (x *ProtoRecalculateSymbolMarginReq) Reset() {
	*x = ProtoRecalculateSymbolMarginReq{}
	mi := &file_CSMessages_External_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoRecalculateSymbolMarginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoRecalculateSymbolMarginReq) ProtoMessage() {}

func (x *ProtoRecalculateSymbolMarginReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoRecalculateSymbolMarginReq.ProtoReflect.Descriptor instead.
func (*ProtoRecalculateSymbolMarginReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{19}
}

func (x *ProtoRecalculateSymbolMarginReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoRecalculateSymbolMarginReq_PayloadType
}

func (x *ProtoRecalculateSymbolMarginReq) GetGroupId() int64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *ProtoRecalculateSymbolMarginReq) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoRecalculateSymbolMarginReq) GetLeverageId() int64 {
	if x != nil && x.LeverageId != nil {
		return *x.LeverageId
	}
	return 0
}

// Response for ProtoRecalculateSymbolMarginReq
type ProtoRecalculateSymbolMarginRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=339" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoRecalculateSymbolMarginRes fields.
const (
	Default_ProtoRecalculateSymbolMarginRes_PayloadType = ProtoCSPayloadType_PROTO_RECALCULATE_SYMBOL_MARGIN_RES
)

func (x *ProtoRecalculateSymbolMarginRes) Reset() {
	*x = ProtoRecalculateSymbolMarginRes{}
	mi := &file_CSMessages_External_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoRecalculateSymbolMarginRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoRecalculateSymbolMarginRes) ProtoMessage() {}

func (x *ProtoRecalculateSymbolMarginRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoRecalculateSymbolMarginRes.ProtoReflect.Descriptor instead.
func (*ProtoRecalculateSymbolMarginRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{20}
}

func (x *ProtoRecalculateSymbolMarginRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoRecalculateSymbolMarginRes_PayloadType
}

// Request for recalculating margin for Positions on changing Dynamic Leverage (https://help.ctrader.com/trading-with-ctrader/dynamic-leverage)
type ProtoRecalculateDynamicLeverageMarginReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=347" json:"payloadType,omitempty"`
	LeverageId    *int64                 `protobuf:"varint,2,req,name=leverageId" json:"leverageId,omitempty"` // The unique identifier of Dynamic Leverage entity. https://help.ctrader.com/ctrader/trading/dynamic-leverage
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoRecalculateDynamicLeverageMarginReq fields.
const (
	Default_ProtoRecalculateDynamicLeverageMarginReq_PayloadType = ProtoCSPayloadType_PROTO_RECALCULATE_DYNAMIC_LEVERAGE_REQ
)

func (x *ProtoRecalculateDynamicLeverageMarginReq) Reset() {
	*x = ProtoRecalculateDynamicLeverageMarginReq{}
	mi := &file_CSMessages_External_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoRecalculateDynamicLeverageMarginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoRecalculateDynamicLeverageMarginReq) ProtoMessage() {}

func (x *ProtoRecalculateDynamicLeverageMarginReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoRecalculateDynamicLeverageMarginReq.ProtoReflect.Descriptor instead.
func (*ProtoRecalculateDynamicLeverageMarginReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{21}
}

func (x *ProtoRecalculateDynamicLeverageMarginReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoRecalculateDynamicLeverageMarginReq_PayloadType
}

func (x *ProtoRecalculateDynamicLeverageMarginReq) GetLeverageId() int64 {
	if x != nil && x.LeverageId != nil {
		return *x.LeverageId
	}
	return 0
}

// Response for ProtoRecalculateDynamicLeverageMarginReq
type ProtoRecalculateDynamicLeverageMarginRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=348" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoRecalculateDynamicLeverageMarginRes fields.
const (
	Default_ProtoRecalculateDynamicLeverageMarginRes_PayloadType = ProtoCSPayloadType_PROTO_RECALCULATE_DYNAMIC_LEVERAGE_RES
)

func (x *ProtoRecalculateDynamicLeverageMarginRes) Reset() {
	*x = ProtoRecalculateDynamicLeverageMarginRes{}
	mi := &file_CSMessages_External_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoRecalculateDynamicLeverageMarginRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoRecalculateDynamicLeverageMarginRes) ProtoMessage() {}

func (x *ProtoRecalculateDynamicLeverageMarginRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoRecalculateDynamicLeverageMarginRes.ProtoReflect.Descriptor instead.
func (*ProtoRecalculateDynamicLeverageMarginRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{22}
}

func (x *ProtoRecalculateDynamicLeverageMarginRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoRecalculateDynamicLeverageMarginRes_PayloadType
}

// Request to get list of Trader Groups (with limited set of Trader Group fields). Trader Groups are used to manage common Trader settings and Manager permission. Each Trader belongs to one Trader Group
type ProtoLightGroupListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=473" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoLightGroupListReq fields.
const (
	Default_ProtoLightGroupListReq_PayloadType = ProtoCSPayloadType_PROTO_LIGHT_GROUP_LIST_REQ
)

func (x *ProtoLightGroupListReq) Reset() {
	*x = ProtoLightGroupListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLightGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLightGroupListReq) ProtoMessage() {}

func (x *ProtoLightGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLightGroupListReq.ProtoReflect.Descriptor instead.
func (*ProtoLightGroupListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{23}
}

func (x *ProtoLightGroupListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoLightGroupListReq_PayloadType
}

// Response for ProtoLightGroupListReq
type ProtoLightGroupListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=474" json:"payloadType,omitempty"`
	LightGroup    []*ProtoLightGroup     `protobuf:"bytes,2,rep,name=lightGroup" json:"lightGroup,omitempty"` // Group entities with limited number of fields
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoLightGroupListRes fields.
const (
	Default_ProtoLightGroupListRes_PayloadType = ProtoCSPayloadType_PROTO_LIGHT_GROUP_LIST_RES
)

func (x *ProtoLightGroupListRes) Reset() {
	*x = ProtoLightGroupListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLightGroupListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLightGroupListRes) ProtoMessage() {}

func (x *ProtoLightGroupListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLightGroupListRes.ProtoReflect.Descriptor instead.
func (*ProtoLightGroupListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{24}
}

func (x *ProtoLightGroupListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoLightGroupListRes_PayloadType
}

func (x *ProtoLightGroupListRes) GetLightGroup() []*ProtoLightGroup {
	if x != nil {
		return x.LightGroup
	}
	return nil
}

// Request for list of non-deleted Traders filtered by registrationTimestamp and sorted descending (latest created Trader goes first)
type ProtoTraderListReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PayloadType      *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=403" json:"payloadType,omitempty"`
	FromTimestamp    *int64                 `protobuf:"varint,2,req,name=fromTimestamp" json:"fromTimestamp,omitempty"`       // UNIX timestamp in milliseconds from which the search starts
	ToTimestamp      *int64                 `protobuf:"varint,3,req,name=toTimestamp" json:"toTimestamp,omitempty"`           // UNIX timestamp in milliseconds where to stop searching
	GroupId          *int64                 `protobuf:"varint,4,opt,name=groupId" json:"groupId,omitempty"`                   // The unique identifier of Group entity
	HideIbParameters *bool                  `protobuf:"varint,5,opt,name=hideIbParameters" json:"hideIbParameters,omitempty"` // If TRUE then Introducing Broker parameters of the Trader are not returned
	OnlySubAccounts  *bool                  `protobuf:"varint,6,opt,name=onlySubAccounts" json:"onlySubAccounts,omitempty"`   // If TRUE then only Subaccounts (Trader used for strategy copying) are returned
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for ProtoTraderListReq fields.
const (
	Default_ProtoTraderListReq_PayloadType = ProtoCSPayloadType_PROTO_TRADER_LIST_REQ
)

func (x *ProtoTraderListReq) Reset() {
	*x = ProtoTraderListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTraderListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTraderListReq) ProtoMessage() {}

func (x *ProtoTraderListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTraderListReq.ProtoReflect.Descriptor instead.
func (*ProtoTraderListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{25}
}

func (x *ProtoTraderListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoTraderListReq_PayloadType
}

func (x *ProtoTraderListReq) GetFromTimestamp() int64 {
	if x != nil && x.FromTimestamp != nil {
		return *x.FromTimestamp
	}
	return 0
}

func (x *ProtoTraderListReq) GetToTimestamp() int64 {
	if x != nil && x.ToTimestamp != nil {
		return *x.ToTimestamp
	}
	return 0
}

func (x *ProtoTraderListReq) GetGroupId() int64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *ProtoTraderListReq) GetHideIbParameters() bool {
	if x != nil && x.HideIbParameters != nil {
		return *x.HideIbParameters
	}
	return false
}

func (x *ProtoTraderListReq) GetOnlySubAccounts() bool {
	if x != nil && x.OnlySubAccounts != nil {
		return *x.OnlySubAccounts
	}
	return false
}

// Response for ProtoTraderListReq
type ProtoTraderListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=404" json:"payloadType,omitempty"`
	Trader        []*ProtoTrader         `protobuf:"bytes,2,rep,name=trader" json:"trader,omitempty"`    // Trader entities
	HasMore       *bool                  `protobuf:"varint,3,req,name=hasMore" json:"hasMore,omitempty"` // If TRUE then the number of entities by filter is larger than internal chunk size, the response contains the number of entities that is equal to chunk size
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoTraderListRes fields.
const (
	Default_ProtoTraderListRes_PayloadType = ProtoCSPayloadType_PROTO_TRADER_LIST_RES
)

func (x *ProtoTraderListRes) Reset() {
	*x = ProtoTraderListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTraderListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTraderListRes) ProtoMessage() {}

func (x *ProtoTraderListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTraderListRes.ProtoReflect.Descriptor instead.
func (*ProtoTraderListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{26}
}

func (x *ProtoTraderListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoTraderListRes_PayloadType
}

func (x *ProtoTraderListRes) GetTrader() []*ProtoTrader {
	if x != nil {
		return x.Trader
	}
	return nil
}

func (x *ProtoTraderListRes) GetHasMore() bool {
	if x != nil && x.HasMore != nil {
		return *x.HasMore
	}
	return false
}

// Request to get list of Symbols
type ProtoManagerSymbolListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=467" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerSymbolListReq fields.
const (
	Default_ProtoManagerSymbolListReq_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_SYMBOL_LIST_REQ
)

func (x *ProtoManagerSymbolListReq) Reset() {
	*x = ProtoManagerSymbolListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerSymbolListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerSymbolListReq) ProtoMessage() {}

func (x *ProtoManagerSymbolListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerSymbolListReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerSymbolListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{27}
}

func (x *ProtoManagerSymbolListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerSymbolListReq_PayloadType
}

// Response for ProtoManagerSymbolListReq
type ProtoManagerSymbolListRes struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PayloadType    *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=468" json:"payloadType,omitempty"`
	Symbol         []*ProtoManagerSymbol  `protobuf:"bytes,2,rep,name=symbol" json:"symbol,omitempty"`                 // Symbol entities
	ArchivedSymbol []*ProtoArchivedSymbol `protobuf:"bytes,3,rep,name=archivedSymbol" json:"archivedSymbol,omitempty"` // Archived Symbol entities
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for ProtoManagerSymbolListRes fields.
const (
	Default_ProtoManagerSymbolListRes_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_SYMBOL_LIST_RES
)

func (x *ProtoManagerSymbolListRes) Reset() {
	*x = ProtoManagerSymbolListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerSymbolListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerSymbolListRes) ProtoMessage() {}

func (x *ProtoManagerSymbolListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerSymbolListRes.ProtoReflect.Descriptor instead.
func (*ProtoManagerSymbolListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{28}
}

func (x *ProtoManagerSymbolListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerSymbolListRes_PayloadType
}

func (x *ProtoManagerSymbolListRes) GetSymbol() []*ProtoManagerSymbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *ProtoManagerSymbolListRes) GetArchivedSymbol() []*ProtoArchivedSymbol {
	if x != nil {
		return x.ArchivedSymbol
	}
	return nil
}

// Request to get list of Managers
type ProtoManagerListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=411" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerListReq fields.
const (
	Default_ProtoManagerListReq_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_LIST_REQ
)

func (x *ProtoManagerListReq) Reset() {
	*x = ProtoManagerListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerListReq) ProtoMessage() {}

func (x *ProtoManagerListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerListReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{29}
}

func (x *ProtoManagerListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerListReq_PayloadType
}

// Response for ProtoManagerListReq
type ProtoManagerListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=412" json:"payloadType,omitempty"`
	Manager       []*ProtoManager        `protobuf:"bytes,2,rep,name=manager" json:"manager,omitempty"` // Manager entities
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerListRes fields.
const (
	Default_ProtoManagerListRes_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_LIST_RES
)

func (x *ProtoManagerListRes) Reset() {
	*x = ProtoManagerListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerListRes) ProtoMessage() {}

func (x *ProtoManagerListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerListRes.ProtoReflect.Descriptor instead.
func (*ProtoManagerListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{30}
}

func (x *ProtoManagerListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerListRes_PayloadType
}

func (x *ProtoManagerListRes) GetManager() []*ProtoManager {
	if x != nil {
		return x.Manager
	}
	return nil
}

// Request to get list of open Positions, filtered by Position's open timestamp
type ProtoPositionListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=407" json:"payloadType,omitempty"`
	TraderId      *int64                 `protobuf:"varint,2,opt,name=traderId" json:"traderId,omitempty"`           // Unique identifier of the Trader within environment
	FromTimestamp *int64                 `protobuf:"varint,3,req,name=fromTimestamp" json:"fromTimestamp,omitempty"` // UNIX timestamp in milliseconds of starting the search (by Position's open timestamp)
	ToTimestamp   *int64                 `protobuf:"varint,4,req,name=toTimestamp" json:"toTimestamp,omitempty"`     // UNIX timestamp in milliseconds of finishing the search (by Position's open timestamp)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoPositionListReq fields.
const (
	Default_ProtoPositionListReq_PayloadType = ProtoCSPayloadType_PROTO_POSITION_LIST_REQ
)

func (x *ProtoPositionListReq) Reset() {
	*x = ProtoPositionListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPositionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPositionListReq) ProtoMessage() {}

func (x *ProtoPositionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPositionListReq.ProtoReflect.Descriptor instead.
func (*ProtoPositionListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{31}
}

func (x *ProtoPositionListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoPositionListReq_PayloadType
}

func (x *ProtoPositionListReq) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoPositionListReq) GetFromTimestamp() int64 {
	if x != nil && x.FromTimestamp != nil {
		return *x.FromTimestamp
	}
	return 0
}

func (x *ProtoPositionListReq) GetToTimestamp() int64 {
	if x != nil && x.ToTimestamp != nil {
		return *x.ToTimestamp
	}
	return 0
}

// Response for ProtoPositionListReq
type ProtoPositionListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=408" json:"payloadType,omitempty"`
	TraderId      *int64                 `protobuf:"varint,2,opt,name=traderId" json:"traderId,omitempty"` // Unique identifier of the Trader within environment
	Position      []*ProtoPosition       `protobuf:"bytes,3,rep,name=position" json:"position,omitempty"`  // Position entities, ordered by openTimestamp (first entity is newest)
	HasMore       *bool                  `protobuf:"varint,4,req,name=hasMore" json:"hasMore,omitempty"`   // If TRUE then the number of entities by filter is larger than internal chunk size, the response contains the number of entities that is equal to chunk size
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoPositionListRes fields.
const (
	Default_ProtoPositionListRes_PayloadType = ProtoCSPayloadType_PROTO_POSITION_LIST_RES
)

func (x *ProtoPositionListRes) Reset() {
	*x = ProtoPositionListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPositionListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPositionListRes) ProtoMessage() {}

func (x *ProtoPositionListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPositionListRes.ProtoReflect.Descriptor instead.
func (*ProtoPositionListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{32}
}

func (x *ProtoPositionListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoPositionListRes_PayloadType
}

func (x *ProtoPositionListRes) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoPositionListRes) GetPosition() []*ProtoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *ProtoPositionListRes) GetHasMore() bool {
	if x != nil && x.HasMore != nil {
		return *x.HasMore
	}
	return false
}

// Request to get list of pending (accepted) orders, filtered by Order's open timestamp
type ProtoPendingOrderListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=409" json:"payloadType,omitempty"`
	TraderId      *int64                 `protobuf:"varint,2,opt,name=traderId" json:"traderId,omitempty"`           // Unique identifier of the Trader within environment
	FromTimestamp *int64                 `protobuf:"varint,3,req,name=fromTimestamp" json:"fromTimestamp,omitempty"` // UNIX timestamp in milliseconds of starting the search (by Order's open timestamp)
	ToTimestamp   *int64                 `protobuf:"varint,4,req,name=toTimestamp" json:"toTimestamp,omitempty"`     // UNIX timestamp in milliseconds finishing the search (by Order's open timestamp)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoPendingOrderListReq fields.
const (
	Default_ProtoPendingOrderListReq_PayloadType = ProtoCSPayloadType_PROTO_PENDING_ORDER_LIST_REQ
)

func (x *ProtoPendingOrderListReq) Reset() {
	*x = ProtoPendingOrderListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPendingOrderListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPendingOrderListReq) ProtoMessage() {}

func (x *ProtoPendingOrderListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPendingOrderListReq.ProtoReflect.Descriptor instead.
func (*ProtoPendingOrderListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{33}
}

func (x *ProtoPendingOrderListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoPendingOrderListReq_PayloadType
}

func (x *ProtoPendingOrderListReq) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoPendingOrderListReq) GetFromTimestamp() int64 {
	if x != nil && x.FromTimestamp != nil {
		return *x.FromTimestamp
	}
	return 0
}

func (x *ProtoPendingOrderListReq) GetToTimestamp() int64 {
	if x != nil && x.ToTimestamp != nil {
		return *x.ToTimestamp
	}
	return 0
}

// Response for ProtoPendingOrderListReq
type ProtoPendingOrderListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=410" json:"payloadType,omitempty"`
	TraderId      *int64                 `protobuf:"varint,2,opt,name=traderId" json:"traderId,omitempty"` // Unique identifier of the Trader within environment
	Order         []*ProtoOrder          `protobuf:"bytes,3,rep,name=order" json:"order,omitempty"`        // Order entities, ordered by openTimestamp (first entity is newest)
	HasMore       *bool                  `protobuf:"varint,4,req,name=hasMore" json:"hasMore,omitempty"`   // If TRUE then the number of entities by filter is larger than internal chunk size, the response contains the number of entities that is equal to chunk size
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoPendingOrderListRes fields.
const (
	Default_ProtoPendingOrderListRes_PayloadType = ProtoCSPayloadType_PROTO_PENDING_ORDER_LIST_RES
)

func (x *ProtoPendingOrderListRes) Reset() {
	*x = ProtoPendingOrderListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPendingOrderListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPendingOrderListRes) ProtoMessage() {}

func (x *ProtoPendingOrderListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPendingOrderListRes.ProtoReflect.Descriptor instead.
func (*ProtoPendingOrderListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{34}
}

func (x *ProtoPendingOrderListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoPendingOrderListRes_PayloadType
}

func (x *ProtoPendingOrderListRes) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoPendingOrderListRes) GetOrder() []*ProtoOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ProtoPendingOrderListRes) GetHasMore() bool {
	if x != nil && x.HasMore != nil {
		return *x.HasMore
	}
	return false
}

// Request to get history of balance changes (only deposits and withdraws), filtered by DepositWithdraw's timestamp
type ProtoBalanceHistoryListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=417" json:"payloadType,omitempty"`
	TraderId      *int64                 `protobuf:"varint,2,opt,name=traderId" json:"traderId,omitempty"`           // Unique identifier of the Trader within environment
	FromTimestamp *int64                 `protobuf:"varint,3,req,name=fromTimestamp" json:"fromTimestamp,omitempty"` // UNIX timestamp in milliseconds of starting the search (by deposit/withdrawal timestamp)
	ToTimestamp   *int64                 `protobuf:"varint,4,req,name=toTimestamp" json:"toTimestamp,omitempty"`     // UNIX timestamp in milliseconds finishing the search (by deposit/withdrawal timestamp)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoBalanceHistoryListReq fields.
const (
	Default_ProtoBalanceHistoryListReq_PayloadType = ProtoCSPayloadType_PROTO_BALANCE_HISTORY_LIST_REQ
)

func (x *ProtoBalanceHistoryListReq) Reset() {
	*x = ProtoBalanceHistoryListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoBalanceHistoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBalanceHistoryListReq) ProtoMessage() {}

func (x *ProtoBalanceHistoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBalanceHistoryListReq.ProtoReflect.Descriptor instead.
func (*ProtoBalanceHistoryListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{35}
}

func (x *ProtoBalanceHistoryListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoBalanceHistoryListReq_PayloadType
}

func (x *ProtoBalanceHistoryListReq) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoBalanceHistoryListReq) GetFromTimestamp() int64 {
	if x != nil && x.FromTimestamp != nil {
		return *x.FromTimestamp
	}
	return 0
}

func (x *ProtoBalanceHistoryListReq) GetToTimestamp() int64 {
	if x != nil && x.ToTimestamp != nil {
		return *x.ToTimestamp
	}
	return 0
}

// Response for ProtoBalanceHistoryListReq
type ProtoBalanceHistoryListRes struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	PayloadType     *ProtoCSPayloadType     `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=418" json:"payloadType,omitempty"`
	TraderId        *int64                  `protobuf:"varint,2,opt,name=traderId" json:"traderId,omitempty"`              // Unique identifier of the Trader within environment
	DepositWithdraw []*ProtoDepositWithdraw `protobuf:"bytes,3,rep,name=depositWithdraw" json:"depositWithdraw,omitempty"` // Deposit or Withdrawal entities, ordered by changeBalanceTimestamp (first entity is newest)
	HasMore         *bool                   `protobuf:"varint,4,opt,name=hasMore" json:"hasMore,omitempty"`                // If TRUE then the number of entities by filter is larger than internal chunk size, the response contains the number of entities that is equal to chunk size
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for ProtoBalanceHistoryListRes fields.
const (
	Default_ProtoBalanceHistoryListRes_PayloadType = ProtoCSPayloadType_PROTO_BALANCE_HISTORY_LIST_RES
)

func (x *ProtoBalanceHistoryListRes) Reset() {
	*x = ProtoBalanceHistoryListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoBalanceHistoryListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBalanceHistoryListRes) ProtoMessage() {}

func (x *ProtoBalanceHistoryListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBalanceHistoryListRes.ProtoReflect.Descriptor instead.
func (*ProtoBalanceHistoryListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{36}
}

func (x *ProtoBalanceHistoryListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoBalanceHistoryListRes_PayloadType
}

func (x *ProtoBalanceHistoryListRes) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoBalanceHistoryListRes) GetDepositWithdraw() []*ProtoDepositWithdraw {
	if x != nil {
		return x.DepositWithdraw
	}
	return nil
}

func (x *ProtoBalanceHistoryListRes) GetHasMore() bool {
	if x != nil && x.HasMore != nil {
		return *x.HasMore
	}
	return false
}

// Request to get history of bonus changes (only deposits and withdraws), filtered by BonusDepositWithdraw's timestamp
type ProtoBonusHistoryListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=786" json:"payloadType,omitempty"`
	TraderId      *int64                 `protobuf:"varint,2,opt,name=traderId" json:"traderId,omitempty"`           // Unique identifier of the Trader within environment
	FromTimestamp *int64                 `protobuf:"varint,3,req,name=fromTimestamp" json:"fromTimestamp,omitempty"` // UNIX timestamp in milliseconds from which the search starts (by bonus deposit/withdrawal created time)
	ToTimestamp   *int64                 `protobuf:"varint,4,req,name=toTimestamp" json:"toTimestamp,omitempty"`     // UNIX timestamp in milliseconds of finishing the search (by bonus deposit/withdrawal created time)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoBonusHistoryListReq fields.
const (
	Default_ProtoBonusHistoryListReq_PayloadType = ProtoCSPayloadType_PROTO_BONUS_HISTORY_LIST_REQ
)

func (x *ProtoBonusHistoryListReq) Reset() {
	*x = ProtoBonusHistoryListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoBonusHistoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBonusHistoryListReq) ProtoMessage() {}

func (x *ProtoBonusHistoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBonusHistoryListReq.ProtoReflect.Descriptor instead.
func (*ProtoBonusHistoryListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{37}
}

func (x *ProtoBonusHistoryListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoBonusHistoryListReq_PayloadType
}

func (x *ProtoBonusHistoryListReq) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoBonusHistoryListReq) GetFromTimestamp() int64 {
	if x != nil && x.FromTimestamp != nil {
		return *x.FromTimestamp
	}
	return 0
}

func (x *ProtoBonusHistoryListReq) GetToTimestamp() int64 {
	if x != nil && x.ToTimestamp != nil {
		return *x.ToTimestamp
	}
	return 0
}

// Response for ProtoBonusHistoryListReq
type ProtoBonusHistoryListRes struct {
	state                protoimpl.MessageState       `protogen:"open.v1"`
	PayloadType          *ProtoCSPayloadType          `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=787" json:"payloadType,omitempty"`
	TraderId             *int64                       `protobuf:"varint,2,opt,name=traderId" json:"traderId,omitempty"`                        // Unique identifier of the Trader within environment
	BonusDepositWithdraw []*ProtoBonusDepositWithdraw `protobuf:"bytes,3,rep,name=bonusDepositWithdraw" json:"bonusDepositWithdraw,omitempty"` // Bonus Deposit or Withdrawal entities, ordered by changeBonusTimestamp (first entity is newest)
	HasMore              *bool                        `protobuf:"varint,4,opt,name=hasMore" json:"hasMore,omitempty"`                          // If TRUE then the number of entities by filter is larger than internal chunk size, the response contains the number of records that is equal to internal chunk size
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for ProtoBonusHistoryListRes fields.
const (
	Default_ProtoBonusHistoryListRes_PayloadType = ProtoCSPayloadType_PROTO_BONUS_HISTORY_LIST_RES
)

func (x *ProtoBonusHistoryListRes) Reset() {
	*x = ProtoBonusHistoryListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoBonusHistoryListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBonusHistoryListRes) ProtoMessage() {}

func (x *ProtoBonusHistoryListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBonusHistoryListRes.ProtoReflect.Descriptor instead.
func (*ProtoBonusHistoryListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{38}
}

func (x *ProtoBonusHistoryListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoBonusHistoryListRes_PayloadType
}

func (x *ProtoBonusHistoryListRes) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoBonusHistoryListRes) GetBonusDepositWithdraw() []*ProtoBonusDepositWithdraw {
	if x != nil {
		return x.BonusDepositWithdraw
	}
	return nil
}

func (x *ProtoBonusHistoryListRes) GetHasMore() bool {
	if x != nil && x.HasMore != nil {
		return *x.HasMore
	}
	return false
}

// Request to get exposure per Symbol
type ProtoExposureSymbolListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=419" json:"payloadType,omitempty"`
	BookType      *ProtoBookRequestType  `protobuf:"varint,2,req,name=bookType,enum=ProtoBookRequestType" json:"bookType,omitempty"` // Type of the Book
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoExposureSymbolListReq fields.
const (
	Default_ProtoExposureSymbolListReq_PayloadType = ProtoCSPayloadType_PROTO_EXPOSURE_SYMBOL_LIST_REQ
)

func (x *ProtoExposureSymbolListReq) Reset() {
	*x = ProtoExposureSymbolListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoExposureSymbolListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoExposureSymbolListReq) ProtoMessage() {}

func (x *ProtoExposureSymbolListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoExposureSymbolListReq.ProtoReflect.Descriptor instead.
func (*ProtoExposureSymbolListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{39}
}

func (x *ProtoExposureSymbolListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoExposureSymbolListReq_PayloadType
}

func (x *ProtoExposureSymbolListReq) GetBookType() ProtoBookRequestType {
	if x != nil && x.BookType != nil {
		return *x.BookType
	}
	return ProtoBookRequestType_ALL_BOOKS_REQUEST
}

// Response for ProtoExposureSymbolListReq
type ProtoExposureSymbolListRes struct {
	state                protoimpl.MessageState       `protogen:"open.v1"`
	PayloadType          *ProtoCSPayloadType          `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=420" json:"payloadType,omitempty"`
	ExposureSymbolRecord []*ProtoExposureSymbolRecord `protobuf:"bytes,2,rep,name=exposureSymbolRecord" json:"exposureSymbolRecord,omitempty"` // Exposure data per Symbol
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for ProtoExposureSymbolListRes fields.
const (
	Default_ProtoExposureSymbolListRes_PayloadType = ProtoCSPayloadType_PROTO_EXPOSURE_SYMBOL_LIST_RES
)

func (x *ProtoExposureSymbolListRes) Reset() {
	*x = ProtoExposureSymbolListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoExposureSymbolListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoExposureSymbolListRes) ProtoMessage() {}

func (x *ProtoExposureSymbolListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoExposureSymbolListRes.ProtoReflect.Descriptor instead.
func (*ProtoExposureSymbolListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{40}
}

func (x *ProtoExposureSymbolListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoExposureSymbolListRes_PayloadType
}

func (x *ProtoExposureSymbolListRes) GetExposureSymbolRecord() []*ProtoExposureSymbolRecord {
	if x != nil {
		return x.ExposureSymbolRecord
	}
	return nil
}

// Request to get server settings (see ProtoServerSettingType in ModelMessages to see settings types)
type ProtoServerSettingsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=423" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoServerSettingsReq fields.
const (
	Default_ProtoServerSettingsReq_PayloadType = ProtoCSPayloadType_PROTO_SERVER_SETTINGS_REQ
)

func (x *ProtoServerSettingsReq) Reset() {
	*x = ProtoServerSettingsReq{}
	mi := &file_CSMessages_External_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoServerSettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoServerSettingsReq) ProtoMessage() {}

func (x *ProtoServerSettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoServerSettingsReq.ProtoReflect.Descriptor instead.
func (*ProtoServerSettingsReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{41}
}

func (x *ProtoServerSettingsReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoServerSettingsReq_PayloadType
}

// Response for ProtoServerSettingsReq
type ProtoServerSettingsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=424" json:"payloadType,omitempty"`
	ServerSetting []*ProtoServerSetting  `protobuf:"bytes,2,rep,name=serverSetting" json:"serverSetting,omitempty"` // List of Server settings
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoServerSettingsRes fields.
const (
	Default_ProtoServerSettingsRes_PayloadType = ProtoCSPayloadType_PROTO_SERVER_SETTINGS_RES
)

func (x *ProtoServerSettingsRes) Reset() {
	*x = ProtoServerSettingsRes{}
	mi := &file_CSMessages_External_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoServerSettingsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoServerSettingsRes) ProtoMessage() {}

func (x *ProtoServerSettingsRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoServerSettingsRes.ProtoReflect.Descriptor instead.
func (*ProtoServerSettingsRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{42}
}

func (x *ProtoServerSettingsRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoServerSettingsRes_PayloadType
}

func (x *ProtoServerSettingsRes) GetServerSetting() []*ProtoServerSetting {
	if x != nil {
		return x.ServerSetting
	}
	return nil
}

// Request to get list of Assets
type ProtoAssetListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=465" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoAssetListReq fields.
const (
	Default_ProtoAssetListReq_PayloadType = ProtoCSPayloadType_PROTO_ASSET_LIST_REQ
)

func (x *ProtoAssetListReq) Reset() {
	*x = ProtoAssetListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoAssetListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoAssetListReq) ProtoMessage() {}

func (x *ProtoAssetListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoAssetListReq.ProtoReflect.Descriptor instead.
func (*ProtoAssetListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{43}
}

func (x *ProtoAssetListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoAssetListReq_PayloadType
}

// Response for ProtoAssetListReq
type ProtoAssetListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=466" json:"payloadType,omitempty"`
	Asset         []*ProtoAsset          `protobuf:"bytes,2,rep,name=asset" json:"asset,omitempty"` // Asset entities
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoAssetListRes fields.
const (
	Default_ProtoAssetListRes_PayloadType = ProtoCSPayloadType_PROTO_ASSET_LIST_RES
)

func (x *ProtoAssetListRes) Reset() {
	*x = ProtoAssetListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoAssetListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoAssetListRes) ProtoMessage() {}

func (x *ProtoAssetListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoAssetListRes.ProtoReflect.Descriptor instead.
func (*ProtoAssetListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{44}
}

func (x *ProtoAssetListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoAssetListRes_PayloadType
}

func (x *ProtoAssetListRes) GetAsset() []*ProtoAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

// Request to list of Price Streams
type ProtoPriceStreamListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=427" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoPriceStreamListReq fields.
const (
	Default_ProtoPriceStreamListReq_PayloadType = ProtoCSPayloadType_PROTO_PRICE_STREAM_LIST_REQ
)

func (x *ProtoPriceStreamListReq) Reset() {
	*x = ProtoPriceStreamListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPriceStreamListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPriceStreamListReq) ProtoMessage() {}

func (x *ProtoPriceStreamListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPriceStreamListReq.ProtoReflect.Descriptor instead.
func (*ProtoPriceStreamListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{45}
}

func (x *ProtoPriceStreamListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoPriceStreamListReq_PayloadType
}

// Response for ProtoPriceStreamListReq
type ProtoPriceStreamListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=428" json:"payloadType,omitempty"`
	PriceStream   []*ProtoPriceStream    `protobuf:"bytes,2,rep,name=priceStream" json:"priceStream,omitempty"` // Price Stream entities
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoPriceStreamListRes fields.
const (
	Default_ProtoPriceStreamListRes_PayloadType = ProtoCSPayloadType_PROTO_PRICE_STREAM_LIST_RES
)

func (x *ProtoPriceStreamListRes) Reset() {
	*x = ProtoPriceStreamListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPriceStreamListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPriceStreamListRes) ProtoMessage() {}

func (x *ProtoPriceStreamListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPriceStreamListRes.ProtoReflect.Descriptor instead.
func (*ProtoPriceStreamListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{46}
}

func (x *ProtoPriceStreamListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoPriceStreamListRes_PayloadType
}

func (x *ProtoPriceStreamListRes) GetPriceStream() []*ProtoPriceStream {
	if x != nil {
		return x.PriceStream
	}
	return nil
}

// Request to get list of Liquidity Feeds
type ProtoLiquidityFeedListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=429" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoLiquidityFeedListReq fields.
const (
	Default_ProtoLiquidityFeedListReq_PayloadType = ProtoCSPayloadType_PROTO_LIQUIDITY_FEED_LIST_REQ
)

func (x *ProtoLiquidityFeedListReq) Reset() {
	*x = ProtoLiquidityFeedListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLiquidityFeedListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLiquidityFeedListReq) ProtoMessage() {}

func (x *ProtoLiquidityFeedListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLiquidityFeedListReq.ProtoReflect.Descriptor instead.
func (*ProtoLiquidityFeedListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{47}
}

func (x *ProtoLiquidityFeedListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoLiquidityFeedListReq_PayloadType
}

// Response for ProtoLiquidityFeedListReq
type ProtoLiquidityFeedListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=430" json:"payloadType,omitempty"`
	Feed          []*ProtoLiquidityFeed  `protobuf:"bytes,2,rep,name=feed" json:"feed,omitempty"` // Liquidity Feed entities
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoLiquidityFeedListRes fields.
const (
	Default_ProtoLiquidityFeedListRes_PayloadType = ProtoCSPayloadType_PROTO_LIQUIDITY_FEED_LIST_RES
)

func (x *ProtoLiquidityFeedListRes) Reset() {
	*x = ProtoLiquidityFeedListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLiquidityFeedListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLiquidityFeedListRes) ProtoMessage() {}

func (x *ProtoLiquidityFeedListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLiquidityFeedListRes.ProtoReflect.Descriptor instead.
func (*ProtoLiquidityFeedListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{48}
}

func (x *ProtoLiquidityFeedListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoLiquidityFeedListRes_PayloadType
}

func (x *ProtoLiquidityFeedListRes) GetFeed() []*ProtoLiquidityFeed {
	if x != nil {
		return x.Feed
	}
	return nil
}

// Request to get list of Deals, filtered by creation timestamp
type ProtoManagerDealListReq struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	PayloadType              *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=431" json:"payloadType,omitempty"`
	TraderId                 *int64                 `protobuf:"varint,2,opt,name=traderId" json:"traderId,omitempty"`                                       // Unique identifier of the Trader within environment
	FromTimestamp            *int64                 `protobuf:"varint,3,req,name=fromTimestamp" json:"fromTimestamp,omitempty"`                             // UNIX timestamp in milliseconds from which the search starts (by Deal creation timestamp)
	ToTimestamp              *int64                 `protobuf:"varint,4,req,name=toTimestamp" json:"toTimestamp,omitempty"`                                 // UNIX timestamp in milliseconds where to stop searching (by Deal creation timestamp)
	MaxRows                  *int32                 `protobuf:"varint,5,opt,name=maxRows" json:"maxRows,omitempty"`                                         // The maximum number of the Deals to return
	ClosingDealsOnly         *bool                  `protobuf:"varint,6,opt,name=closingDealsOnly,def=0" json:"closingDealsOnly,omitempty"`                 // If TRUE then only Closing Deals are returned
	IncludeAdditionalVolumes *bool                  `protobuf:"varint,7,opt,name=includeAdditionalVolumes,def=0" json:"includeAdditionalVolumes,omitempty"` // If TRUE then filledEurVolume and filledGbpVolume are returned for Deals
	WithFilledVolumeOnly     *bool                  `protobuf:"varint,8,opt,name=withFilledVolumeOnly,def=0" json:"withFilledVolumeOnly,omitempty"`         // If TRUE then only filled and partially filled Deals are returned
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for ProtoManagerDealListReq fields.
const (
	Default_ProtoManagerDealListReq_PayloadType              = ProtoCSPayloadType_PROTO_MANAGER_DEAL_LIST_REQ
	Default_ProtoManagerDealListReq_ClosingDealsOnly         = bool(false)
	Default_ProtoManagerDealListReq_IncludeAdditionalVolumes = bool(false)
	Default_ProtoManagerDealListReq_WithFilledVolumeOnly     = bool(false)
)

func (x *ProtoManagerDealListReq) Reset() {
	*x = ProtoManagerDealListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerDealListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerDealListReq) ProtoMessage() {}

func (x *ProtoManagerDealListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerDealListReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerDealListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{49}
}

func (x *ProtoManagerDealListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerDealListReq_PayloadType
}

func (x *ProtoManagerDealListReq) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoManagerDealListReq) GetFromTimestamp() int64 {
	if x != nil && x.FromTimestamp != nil {
		return *x.FromTimestamp
	}
	return 0
}

func (x *ProtoManagerDealListReq) GetToTimestamp() int64 {
	if x != nil && x.ToTimestamp != nil {
		return *x.ToTimestamp
	}
	return 0
}

func (x *ProtoManagerDealListReq) GetMaxRows() int32 {
	if x != nil && x.MaxRows != nil {
		return *x.MaxRows
	}
	return 0
}

func (x *ProtoManagerDealListReq) GetClosingDealsOnly() bool {
	if x != nil && x.ClosingDealsOnly != nil {
		return *x.ClosingDealsOnly
	}
	return Default_ProtoManagerDealListReq_ClosingDealsOnly
}

func (x *ProtoManagerDealListReq) GetIncludeAdditionalVolumes() bool {
	if x != nil && x.IncludeAdditionalVolumes != nil {
		return *x.IncludeAdditionalVolumes
	}
	return Default_ProtoManagerDealListReq_IncludeAdditionalVolumes
}

func (x *ProtoManagerDealListReq) GetWithFilledVolumeOnly() bool {
	if x != nil && x.WithFilledVolumeOnly != nil {
		return *x.WithFilledVolumeOnly
	}
	return Default_ProtoManagerDealListReq_WithFilledVolumeOnly
}

// Response for ProtoManagerDealListReq
type ProtoManagerDealListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=432" json:"payloadType,omitempty"`
	Deal          []*ProtoDeal           `protobuf:"bytes,2,rep,name=deal" json:"deal,omitempty"`        // Deal entities
	HasMore       *bool                  `protobuf:"varint,3,req,name=hasMore" json:"hasMore,omitempty"` // If TRUE then the number of entities by filter is larger than internal chunk size, the response contains the number of entities that is equal to chunk size
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerDealListRes fields.
const (
	Default_ProtoManagerDealListRes_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_DEAL_LIST_RES
)

func (x *ProtoManagerDealListRes) Reset() {
	*x = ProtoManagerDealListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerDealListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerDealListRes) ProtoMessage() {}

func (x *ProtoManagerDealListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerDealListRes.ProtoReflect.Descriptor instead.
func (*ProtoManagerDealListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{50}
}

func (x *ProtoManagerDealListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerDealListRes_PayloadType
}

func (x *ProtoManagerDealListRes) GetDeal() []*ProtoDeal {
	if x != nil {
		return x.Deal
	}
	return nil
}

func (x *ProtoManagerDealListRes) GetHasMore() bool {
	if x != nil && x.HasMore != nil {
		return *x.HasMore
	}
	return false
}

// Request to get list of Deals related to the specified Position, filtered by creation timestamp
type ProtoManagerDealListByPositionIdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=459" json:"payloadType,omitempty"`
	PositionId    *int64                 `protobuf:"varint,2,req,name=positionId" json:"positionId,omitempty"`       // The unique ID of the Position
	FromTimestamp *int64                 `protobuf:"varint,3,req,name=fromTimestamp" json:"fromTimestamp,omitempty"` // UNIX timestamp in milliseconds from which the search starts (by Deal creation time)
	ToTimestamp   *int64                 `protobuf:"varint,4,req,name=toTimestamp" json:"toTimestamp,omitempty"`     // UNIX timestamp in milliseconds where to stop searching (by Deal creation time)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerDealListByPositionIdReq fields.
const (
	Default_ProtoManagerDealListByPositionIdReq_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_DEAL_LIST_BY_POSITION_ID_REQ
)

func (x *ProtoManagerDealListByPositionIdReq) Reset() {
	*x = ProtoManagerDealListByPositionIdReq{}
	mi := &file_CSMessages_External_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerDealListByPositionIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerDealListByPositionIdReq) ProtoMessage() {}

func (x *ProtoManagerDealListByPositionIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerDealListByPositionIdReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerDealListByPositionIdReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{51}
}

func (x *ProtoManagerDealListByPositionIdReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerDealListByPositionIdReq_PayloadType
}

func (x *ProtoManagerDealListByPositionIdReq) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoManagerDealListByPositionIdReq) GetFromTimestamp() int64 {
	if x != nil && x.FromTimestamp != nil {
		return *x.FromTimestamp
	}
	return 0
}

func (x *ProtoManagerDealListByPositionIdReq) GetToTimestamp() int64 {
	if x != nil && x.ToTimestamp != nil {
		return *x.ToTimestamp
	}
	return 0
}

// Response for ProtoManagerDealListByPositionIdReq
type ProtoManagerDealListByPositionIdRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=460" json:"payloadType,omitempty"`
	Deal          []*ProtoDeal           `protobuf:"bytes,2,rep,name=deal" json:"deal,omitempty"`        // List of Deals
	HasMore       *bool                  `protobuf:"varint,3,req,name=hasMore" json:"hasMore,omitempty"` // If TRUE then the number of entities by filter is larger than internal chunk size, the response contains the number of entities that is equal to chunk size
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerDealListByPositionIdRes fields.
const (
	Default_ProtoManagerDealListByPositionIdRes_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_DEAL_LIST_BY_POSITION_ID_RES
)

func (x *ProtoManagerDealListByPositionIdRes) Reset() {
	*x = ProtoManagerDealListByPositionIdRes{}
	mi := &file_CSMessages_External_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerDealListByPositionIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerDealListByPositionIdRes) ProtoMessage() {}

func (x *ProtoManagerDealListByPositionIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerDealListByPositionIdRes.ProtoReflect.Descriptor instead.
func (*ProtoManagerDealListByPositionIdRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{52}
}

func (x *ProtoManagerDealListByPositionIdRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerDealListByPositionIdRes_PayloadType
}

func (x *ProtoManagerDealListByPositionIdRes) GetDeal() []*ProtoDeal {
	if x != nil {
		return x.Deal
	}
	return nil
}

func (x *ProtoManagerDealListByPositionIdRes) GetHasMore() bool {
	if x != nil && x.HasMore != nil {
		return *x.HasMore
	}
	return false
}

// Request to get list of orders related to the specified Position
type ProtoManagerOrderListByPositionIdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=461" json:"payloadType,omitempty"`
	PositionId    *int64                 `protobuf:"varint,2,req,name=positionId" json:"positionId,omitempty"`       // The unique ID of the Position
	FromTimestamp *int64                 `protobuf:"varint,3,req,name=fromTimestamp" json:"fromTimestamp,omitempty"` // UNIX timestamp in milliseconds from which the search starts
	ToTimestamp   *int64                 `protobuf:"varint,4,req,name=toTimestamp" json:"toTimestamp,omitempty"`     // UNIX timestamp in milliseconds where to stop searching
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerOrderListByPositionIdReq fields.
const (
	Default_ProtoManagerOrderListByPositionIdReq_PayloadType = ProtoCSPayloadType_PROTO_MANAGER__ORDER_LIST_BY_POSITION_ID_REQ
)

func (x *ProtoManagerOrderListByPositionIdReq) Reset() {
	*x = ProtoManagerOrderListByPositionIdReq{}
	mi := &file_CSMessages_External_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerOrderListByPositionIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerOrderListByPositionIdReq) ProtoMessage() {}

func (x *ProtoManagerOrderListByPositionIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerOrderListByPositionIdReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerOrderListByPositionIdReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{53}
}

func (x *ProtoManagerOrderListByPositionIdReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerOrderListByPositionIdReq_PayloadType
}

func (x *ProtoManagerOrderListByPositionIdReq) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoManagerOrderListByPositionIdReq) GetFromTimestamp() int64 {
	if x != nil && x.FromTimestamp != nil {
		return *x.FromTimestamp
	}
	return 0
}

func (x *ProtoManagerOrderListByPositionIdReq) GetToTimestamp() int64 {
	if x != nil && x.ToTimestamp != nil {
		return *x.ToTimestamp
	}
	return 0
}

// Response for ProtoManagerOrderListByPositionIdReq
type ProtoManagerOrderListByPositionIdRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=462" json:"payloadType,omitempty"`
	Order         []*ProtoOrder          `protobuf:"bytes,2,rep,name=order" json:"order,omitempty"`      // List of Orders
	HasMore       *bool                  `protobuf:"varint,3,req,name=hasMore" json:"hasMore,omitempty"` // If TRUE then the number of entities by filter is larger than internal chunk size, the response contains the number of entities that is equal to chunk size
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerOrderListByPositionIdRes fields.
const (
	Default_ProtoManagerOrderListByPositionIdRes_PayloadType = ProtoCSPayloadType_PROTO_MANAGER__ORDER_LIST_BY_POSITION_ID_RES
)

func (x *ProtoManagerOrderListByPositionIdRes) Reset() {
	*x = ProtoManagerOrderListByPositionIdRes{}
	mi := &file_CSMessages_External_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerOrderListByPositionIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerOrderListByPositionIdRes) ProtoMessage() {}

func (x *ProtoManagerOrderListByPositionIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerOrderListByPositionIdRes.ProtoReflect.Descriptor instead.
func (*ProtoManagerOrderListByPositionIdRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{54}
}

func (x *ProtoManagerOrderListByPositionIdRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerOrderListByPositionIdRes_PayloadType
}

func (x *ProtoManagerOrderListByPositionIdRes) GetOrder() []*ProtoOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ProtoManagerOrderListByPositionIdRes) GetHasMore() bool {
	if x != nil && x.HasMore != nil {
		return *x.HasMore
	}
	return false
}

// Request to get list of Dynamic Leverage entities (https://help.ctrader.com/trading-with-ctrader/dynamic-leverage)
type ProtoDynamicLeverageListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=469" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoDynamicLeverageListReq fields.
const (
	Default_ProtoDynamicLeverageListReq_PayloadType = ProtoCSPayloadType_PROTO_DYNAMIC_LEVERAGE_LIST_REQ
)

func (x *ProtoDynamicLeverageListReq) Reset() {
	*x = ProtoDynamicLeverageListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDynamicLeverageListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDynamicLeverageListReq) ProtoMessage() {}

func (x *ProtoDynamicLeverageListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDynamicLeverageListReq.ProtoReflect.Descriptor instead.
func (*ProtoDynamicLeverageListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{55}
}

func (x *ProtoDynamicLeverageListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoDynamicLeverageListReq_PayloadType
}

// Response for ProtoDynamicLeverageListReq
type ProtoDynamicLeverageListRes struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType     `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=470" json:"payloadType,omitempty"`
	Leverage      []*ProtoDynamicLeverage `protobuf:"bytes,2,rep,name=leverage" json:"leverage,omitempty"` // Dynamic Leverage entity. https://help.ctrader.com/ctrader/trading/dynamic-leverage
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoDynamicLeverageListRes fields.
const (
	Default_ProtoDynamicLeverageListRes_PayloadType = ProtoCSPayloadType_PROTO_DYNAMIC_LEVERAGE_LIST_RES
)

func (x *ProtoDynamicLeverageListRes) Reset() {
	*x = ProtoDynamicLeverageListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDynamicLeverageListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDynamicLeverageListRes) ProtoMessage() {}

func (x *ProtoDynamicLeverageListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDynamicLeverageListRes.ProtoReflect.Descriptor instead.
func (*ProtoDynamicLeverageListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{56}
}

func (x *ProtoDynamicLeverageListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoDynamicLeverageListRes_PayloadType
}

func (x *ProtoDynamicLeverageListRes) GetLeverage() []*ProtoDynamicLeverage {
	if x != nil {
		return x.Leverage
	}
	return nil
}

// Request to get list of Guaranteed Stop Loss (GSL) Schedule items. GSl Schedule allows to change GSL by Schedule
type ProtoGSLScheduleListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=471" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoGSLScheduleListReq fields.
const (
	Default_ProtoGSLScheduleListReq_PayloadType = ProtoCSPayloadType_PROTO_GSL_SCHEDULE_LIST_REQ
)

func (x *ProtoGSLScheduleListReq) Reset() {
	*x = ProtoGSLScheduleListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoGSLScheduleListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGSLScheduleListReq) ProtoMessage() {}

func (x *ProtoGSLScheduleListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGSLScheduleListReq.ProtoReflect.Descriptor instead.
func (*ProtoGSLScheduleListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{57}
}

func (x *ProtoGSLScheduleListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoGSLScheduleListReq_PayloadType
}

// Response for ProtoGSLScheduleListReq
type ProtoGSLScheduleListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=472" json:"payloadType,omitempty"`
	Schedule      []*ProtoGSLSchedule    `protobuf:"bytes,2,rep,name=schedule" json:"schedule,omitempty"` // List of GSL Schedule entities
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoGSLScheduleListRes fields.
const (
	Default_ProtoGSLScheduleListRes_PayloadType = ProtoCSPayloadType_PROTO_GSL_SCHEDULE_LIST_RES
)

func (x *ProtoGSLScheduleListRes) Reset() {
	*x = ProtoGSLScheduleListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoGSLScheduleListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGSLScheduleListRes) ProtoMessage() {}

func (x *ProtoGSLScheduleListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGSLScheduleListRes.ProtoReflect.Descriptor instead.
func (*ProtoGSLScheduleListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{58}
}

func (x *ProtoGSLScheduleListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoGSLScheduleListRes_PayloadType
}

func (x *ProtoGSLScheduleListRes) GetSchedule() []*ProtoGSLSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// Request to create/update/delete Trader
type ProtoCrudTraderReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=501" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	Trader        *ProtoTrader           `protobuf:"bytes,3,req,name=trader" json:"trader,omitempty"`                                // Trader entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudTraderReq fields.
const (
	Default_ProtoCrudTraderReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_TRADER_REQ
)

func (x *ProtoCrudTraderReq) Reset() {
	*x = ProtoCrudTraderReq{}
	mi := &file_CSMessages_External_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudTraderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudTraderReq) ProtoMessage() {}

func (x *ProtoCrudTraderReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudTraderReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudTraderReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{59}
}

func (x *ProtoCrudTraderReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudTraderReq_PayloadType
}

func (x *ProtoCrudTraderReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudTraderReq) GetTrader() *ProtoTrader {
	if x != nil {
		return x.Trader
	}
	return nil
}

// Response for ProtoCrudTraderReq
type ProtoCrudTraderRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=502" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	TraderId      *int64                 `protobuf:"varint,3,req,name=traderId" json:"traderId,omitempty"`                           // Unique identifier of the Trader within environment
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudTraderRes fields.
const (
	Default_ProtoCrudTraderRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_TRADER_RES
)

func (x *ProtoCrudTraderRes) Reset() {
	*x = ProtoCrudTraderRes{}
	mi := &file_CSMessages_External_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudTraderRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudTraderRes) ProtoMessage() {}

func (x *ProtoCrudTraderRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudTraderRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudTraderRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{60}
}

func (x *ProtoCrudTraderRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudTraderRes_PayloadType
}

func (x *ProtoCrudTraderRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudTraderRes) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

// Request to update/delete Symbol (for create use ProtoCreateSymbolReq)
type ProtoCrudSymbolReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=507" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Update/delete operation
	Symbol        *ProtoManagerSymbol    `protobuf:"bytes,3,req,name=symbol" json:"symbol,omitempty"`                                // Symbol entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudSymbolReq fields.
const (
	Default_ProtoCrudSymbolReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_SYMBOL_REQ
)

func (x *ProtoCrudSymbolReq) Reset() {
	*x = ProtoCrudSymbolReq{}
	mi := &file_CSMessages_External_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudSymbolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudSymbolReq) ProtoMessage() {}

func (x *ProtoCrudSymbolReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudSymbolReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudSymbolReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{61}
}

func (x *ProtoCrudSymbolReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudSymbolReq_PayloadType
}

func (x *ProtoCrudSymbolReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudSymbolReq) GetSymbol() *ProtoManagerSymbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

// Response for ProtoCrudSymbolReq
type ProtoCrudSymbolRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=508" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Update/delete operation
	SymbolId      *int64                 `protobuf:"varint,3,req,name=symbolId" json:"symbolId,omitempty"`                           // The unique identifier of the Symbol in specific server environment within cTrader platform
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudSymbolRes fields.
const (
	Default_ProtoCrudSymbolRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_SYMBOL_RES
)

func (x *ProtoCrudSymbolRes) Reset() {
	*x = ProtoCrudSymbolRes{}
	mi := &file_CSMessages_External_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudSymbolRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudSymbolRes) ProtoMessage() {}

func (x *ProtoCrudSymbolRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudSymbolRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudSymbolRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{62}
}

func (x *ProtoCrudSymbolRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudSymbolRes_PayloadType
}

func (x *ProtoCrudSymbolRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudSymbolRes) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

// Request to create/update/delete group. Groups are used to manage Trader's settings and Manager permission. Each Trader belongs to one group
type ProtoCrudGroupReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=504" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update_diff/delete operation. Update_diff means that only changed parameters are sent in request (other parameters stay unchanged)
	Group         *ProtoGroup            `protobuf:"bytes,3,req,name=group" json:"group,omitempty"`                                  // Group entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudGroupReq fields.
const (
	Default_ProtoCrudGroupReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_GROUP_REQ
)

func (x *ProtoCrudGroupReq) Reset() {
	*x = ProtoCrudGroupReq{}
	mi := &file_CSMessages_External_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudGroupReq) ProtoMessage() {}

func (x *ProtoCrudGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudGroupReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudGroupReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{63}
}

func (x *ProtoCrudGroupReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudGroupReq_PayloadType
}

func (x *ProtoCrudGroupReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudGroupReq) GetGroup() *ProtoGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

// Response for ProtoCrudGroupReq
type ProtoCrudGroupRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=505" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update_diff/delete operation
	GroupId       *int64                 `protobuf:"varint,3,req,name=groupId" json:"groupId,omitempty"`                             // ID of the Group
	Group         *ProtoGroup            `protobuf:"bytes,4,opt,name=group" json:"group,omitempty"`                                  // Group entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudGroupRes fields.
const (
	Default_ProtoCrudGroupRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_GROUP_RES
)

func (x *ProtoCrudGroupRes) Reset() {
	*x = ProtoCrudGroupRes{}
	mi := &file_CSMessages_External_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudGroupRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudGroupRes) ProtoMessage() {}

func (x *ProtoCrudGroupRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudGroupRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudGroupRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{64}
}

func (x *ProtoCrudGroupRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudGroupRes_PayloadType
}

func (x *ProtoCrudGroupRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudGroupRes) GetGroupId() int64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *ProtoCrudGroupRes) GetGroup() *ProtoGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

// Request to create/update/delete Manager
type ProtoCrudManagerReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=510" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	Manager       *ProtoManager          `protobuf:"bytes,3,req,name=manager" json:"manager,omitempty"`                              // Manager entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudManagerReq fields.
const (
	Default_ProtoCrudManagerReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_MANAGER_REQ
)

func (x *ProtoCrudManagerReq) Reset() {
	*x = ProtoCrudManagerReq{}
	mi := &file_CSMessages_External_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudManagerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudManagerReq) ProtoMessage() {}

func (x *ProtoCrudManagerReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudManagerReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudManagerReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{65}
}

func (x *ProtoCrudManagerReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudManagerReq_PayloadType
}

func (x *ProtoCrudManagerReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudManagerReq) GetManager() *ProtoManager {
	if x != nil {
		return x.Manager
	}
	return nil
}

// Response for ProtoCrudManagerReq
type ProtoCrudManagerRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=511" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	ManagerId     *int64                 `protobuf:"varint,3,req,name=managerId" json:"managerId,omitempty"`                         // ID of Manager
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudManagerRes fields.
const (
	Default_ProtoCrudManagerRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_MANAGER_RES
)

func (x *ProtoCrudManagerRes) Reset() {
	*x = ProtoCrudManagerRes{}
	mi := &file_CSMessages_External_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudManagerRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudManagerRes) ProtoMessage() {}

func (x *ProtoCrudManagerRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudManagerRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudManagerRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{66}
}

func (x *ProtoCrudManagerRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudManagerRes_PayloadType
}

func (x *ProtoCrudManagerRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudManagerRes) GetManagerId() int64 {
	if x != nil && x.ManagerId != nil {
		return *x.ManagerId
	}
	return 0
}

// Request to create/update/delete Asset
type ProtoCrudAssetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=538" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	Asset         *ProtoAsset            `protobuf:"bytes,3,req,name=asset" json:"asset,omitempty"`                                  // Asset entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudAssetReq fields.
const (
	Default_ProtoCrudAssetReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_ASSET_REQ
)

func (x *ProtoCrudAssetReq) Reset() {
	*x = ProtoCrudAssetReq{}
	mi := &file_CSMessages_External_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudAssetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudAssetReq) ProtoMessage() {}

func (x *ProtoCrudAssetReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudAssetReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudAssetReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{67}
}

func (x *ProtoCrudAssetReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudAssetReq_PayloadType
}

func (x *ProtoCrudAssetReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudAssetReq) GetAsset() *ProtoAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

// Response for ProtoCrudAssetReq
type ProtoCrudAssetRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=539" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	AssetId       *int64                 `protobuf:"varint,3,req,name=assetId" json:"assetId,omitempty"`                             // ID of Asset
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudAssetRes fields.
const (
	Default_ProtoCrudAssetRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_ASSET_RES
)

func (x *ProtoCrudAssetRes) Reset() {
	*x = ProtoCrudAssetRes{}
	mi := &file_CSMessages_External_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudAssetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudAssetRes) ProtoMessage() {}

func (x *ProtoCrudAssetRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudAssetRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudAssetRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{68}
}

func (x *ProtoCrudAssetRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudAssetRes_PayloadType
}

func (x *ProtoCrudAssetRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudAssetRes) GetAssetId() int64 {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return 0
}

// Request to create/update/delete liquidity Feed link to symbol
type ProtoCrudLiquidityFeedSymbolReq struct {
	state               protoimpl.MessageState    `protogen:"open.v1"`
	PayloadType         *ProtoCSPayloadType       `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=545" json:"payloadType,omitempty"`
	Operation           *ProtoCrudOperation       `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	LiquidityFeedSymbol *ProtoLiquidityFeedSymbol `protobuf:"bytes,3,req,name=liquidityFeedSymbol" json:"liquidityFeedSymbol,omitempty"`      // Liquidity Feed for Symbol entity
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for ProtoCrudLiquidityFeedSymbolReq fields.
const (
	Default_ProtoCrudLiquidityFeedSymbolReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_LIQUIDITY_FEED_SYMBOL_REQ
)

func (x *ProtoCrudLiquidityFeedSymbolReq) Reset() {
	*x = ProtoCrudLiquidityFeedSymbolReq{}
	mi := &file_CSMessages_External_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudLiquidityFeedSymbolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudLiquidityFeedSymbolReq) ProtoMessage() {}

func (x *ProtoCrudLiquidityFeedSymbolReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudLiquidityFeedSymbolReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudLiquidityFeedSymbolReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{69}
}

func (x *ProtoCrudLiquidityFeedSymbolReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudLiquidityFeedSymbolReq_PayloadType
}

func (x *ProtoCrudLiquidityFeedSymbolReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudLiquidityFeedSymbolReq) GetLiquidityFeedSymbol() *ProtoLiquidityFeedSymbol {
	if x != nil {
		return x.LiquidityFeedSymbol
	}
	return nil
}

// Response for ProtoCrudLiquidityFeedSymbolReq
type ProtoCrudLiquidityFeedSymbolRes struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	PayloadType           *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=546" json:"payloadType,omitempty"`
	Operation             *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	LiquidityFeedSymbolId *int64                 `protobuf:"varint,3,req,name=liquidityFeedSymbolId" json:"liquidityFeedSymbolId,omitempty"` // Liquidity Feed for Symbol entity
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for ProtoCrudLiquidityFeedSymbolRes fields.
const (
	Default_ProtoCrudLiquidityFeedSymbolRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_LIQUIDITY_FEED_SYMBOL_RES
)

func (x *ProtoCrudLiquidityFeedSymbolRes) Reset() {
	*x = ProtoCrudLiquidityFeedSymbolRes{}
	mi := &file_CSMessages_External_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudLiquidityFeedSymbolRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudLiquidityFeedSymbolRes) ProtoMessage() {}

func (x *ProtoCrudLiquidityFeedSymbolRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudLiquidityFeedSymbolRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudLiquidityFeedSymbolRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{70}
}

func (x *ProtoCrudLiquidityFeedSymbolRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudLiquidityFeedSymbolRes_PayloadType
}

func (x *ProtoCrudLiquidityFeedSymbolRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudLiquidityFeedSymbolRes) GetLiquidityFeedSymbolId() int64 {
	if x != nil && x.LiquidityFeedSymbolId != nil {
		return *x.LiquidityFeedSymbolId
	}
	return 0
}

// Request to create/update/delete Swap and Dividend Profile. Profile is a set of settings which is applied within specific Groups
type ProtoCrudSwapAndDividendProfileReq struct {
	state                  protoimpl.MessageState       `protogen:"open.v1"`
	PayloadType            *ProtoCSPayloadType          `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=513" json:"payloadType,omitempty"`
	Operation              *ProtoCrudOperation          `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"`  // Create/update_diff/delete operation. Update_diff operations means that swapAndDividendSymbol records which are not sent will not be changed
	SwapAndDividendProfile *ProtoSwapAndDividendProfile `protobuf:"bytes,3,req,name=swapAndDividendProfile" json:"swapAndDividendProfile,omitempty"` // Swap and Dividend Profile entity
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for ProtoCrudSwapAndDividendProfileReq fields.
const (
	Default_ProtoCrudSwapAndDividendProfileReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_SWAP_AND_DIVIDEND_PROFILE_REQ
)

func (x *ProtoCrudSwapAndDividendProfileReq) Reset() {
	*x = ProtoCrudSwapAndDividendProfileReq{}
	mi := &file_CSMessages_External_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudSwapAndDividendProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudSwapAndDividendProfileReq) ProtoMessage() {}

func (x *ProtoCrudSwapAndDividendProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudSwapAndDividendProfileReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudSwapAndDividendProfileReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{71}
}

func (x *ProtoCrudSwapAndDividendProfileReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudSwapAndDividendProfileReq_PayloadType
}

func (x *ProtoCrudSwapAndDividendProfileReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudSwapAndDividendProfileReq) GetSwapAndDividendProfile() *ProtoSwapAndDividendProfile {
	if x != nil {
		return x.SwapAndDividendProfile
	}
	return nil
}

// Response for ProtoCrudSwapAndDividendProfileReq
type ProtoCrudSwapAndDividendProfileRes struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	PayloadType              *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=514" json:"payloadType,omitempty"`
	Operation                *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"`       // Create/update/delete operation
	SwapAndDividendProfileId *int64                 `protobuf:"varint,3,req,name=swapAndDividendProfileId" json:"swapAndDividendProfileId,omitempty"` // ID of Swap and Dividend Profile
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for ProtoCrudSwapAndDividendProfileRes fields.
const (
	Default_ProtoCrudSwapAndDividendProfileRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_SWAP_AND_DIVIDEND_PROFILE_RES
)

func (x *ProtoCrudSwapAndDividendProfileRes) Reset() {
	*x = ProtoCrudSwapAndDividendProfileRes{}
	mi := &file_CSMessages_External_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudSwapAndDividendProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudSwapAndDividendProfileRes) ProtoMessage() {}

func (x *ProtoCrudSwapAndDividendProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudSwapAndDividendProfileRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudSwapAndDividendProfileRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{72}
}

func (x *ProtoCrudSwapAndDividendProfileRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudSwapAndDividendProfileRes_PayloadType
}

func (x *ProtoCrudSwapAndDividendProfileRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudSwapAndDividendProfileRes) GetSwapAndDividendProfileId() int64 {
	if x != nil && x.SwapAndDividendProfileId != nil {
		return *x.SwapAndDividendProfileId
	}
	return 0
}

// Request to change Trader's balance
type ProtoChangeBalanceReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType     `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=519" json:"payloadType,omitempty"`
	TraderId      *int64                  `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"`                     // Unique identifier of the Trader within environment
	Amount        *int64                  `protobuf:"varint,3,req,name=amount" json:"amount,omitempty"`                         // Amount of balance operation
	Comment       *string                 `protobuf:"bytes,4,opt,name=comment" json:"comment,omitempty"`                        // Comment seen by Manager
	Type          *ProtoChangeBalanceType `protobuf:"varint,5,req,name=type,enum=ProtoChangeBalanceType" json:"type,omitempty"` // Type of operation
	ManagerId     *int64                  `protobuf:"varint,6,opt,name=managerId" json:"managerId,omitempty"`                   // ID of the Manager
	ExternalNote  *string                 `protobuf:"bytes,7,opt,name=externalNote" json:"externalNote,omitempty"`              // Comment seen by Trader and Manager
	Source        *string                 `protobuf:"bytes,8,opt,name=source" json:"source,omitempty"`                          // Field can be used to determine source of payment (e. g VISA or PayPal)
	ExternalId    *string                 `protobuf:"bytes,9,opt,name=externalId" json:"externalId,omitempty"`                  // External ID which can be used for easy reconciliation
	NewWay        *bool                   `protobuf:"varint,10,opt,name=newWay" json:"newWay,omitempty"`                        // Must be set to TRUE. If TRUE then for amount protocol value 1 is minimal value according to ProtoAsset.digits (=1/(10^digits)), e.g. if Trader's deposit Asset is JPY (digits=0), then value 1 equals to 1.00 JPY; if in USD (digits=2) then 1 equals to 0.01 USD. If FALSE, then 1 protocol value=0.01
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoChangeBalanceReq fields.
const (
	Default_ProtoChangeBalanceReq_PayloadType = ProtoCSPayloadType_PROTO_CHANGE_BALANCE_REQ
)

func (x *ProtoChangeBalanceReq) Reset() {
	*x = ProtoChangeBalanceReq{}
	mi := &file_CSMessages_External_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoChangeBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoChangeBalanceReq) ProtoMessage() {}

func (x *ProtoChangeBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoChangeBalanceReq.ProtoReflect.Descriptor instead.
func (*ProtoChangeBalanceReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{73}
}

func (x *ProtoChangeBalanceReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoChangeBalanceReq_PayloadType
}

func (x *ProtoChangeBalanceReq) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoChangeBalanceReq) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *ProtoChangeBalanceReq) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoChangeBalanceReq) GetType() ProtoChangeBalanceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ProtoChangeBalanceType_BALANCE_DEPOSIT
}

func (x *ProtoChangeBalanceReq) GetManagerId() int64 {
	if x != nil && x.ManagerId != nil {
		return *x.ManagerId
	}
	return 0
}

func (x *ProtoChangeBalanceReq) GetExternalNote() string {
	if x != nil && x.ExternalNote != nil {
		return *x.ExternalNote
	}
	return ""
}

func (x *ProtoChangeBalanceReq) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *ProtoChangeBalanceReq) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *ProtoChangeBalanceReq) GetNewWay() bool {
	if x != nil && x.NewWay != nil {
		return *x.NewWay
	}
	return false
}

// Response for ProtoChangeBalanceReq
type ProtoChangeBalanceRes struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PayloadType      *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=520" json:"payloadType,omitempty"`
	TraderId         *int64                 `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"`                 // Unique identifier of the Trader within environment
	BalanceHistoryId *int64                 `protobuf:"varint,3,req,name=balanceHistoryId" json:"balanceHistoryId,omitempty"` // ID of balance history record
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for ProtoChangeBalanceRes fields.
const (
	Default_ProtoChangeBalanceRes_PayloadType = ProtoCSPayloadType_PROTO_CHANGE_BALANCE_RES
)

func (x *ProtoChangeBalanceRes) Reset() {
	*x = ProtoChangeBalanceRes{}
	mi := &file_CSMessages_External_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoChangeBalanceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoChangeBalanceRes) ProtoMessage() {}

func (x *ProtoChangeBalanceRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoChangeBalanceRes.ProtoReflect.Descriptor instead.
func (*ProtoChangeBalanceRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{74}
}

func (x *ProtoChangeBalanceRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoChangeBalanceRes_PayloadType
}

func (x *ProtoChangeBalanceRes) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoChangeBalanceRes) GetBalanceHistoryId() int64 {
	if x != nil && x.BalanceHistoryId != nil {
		return *x.BalanceHistoryId
	}
	return 0
}

// Request to change server settings. See ProtoServerSetting in model messages for the types of settings
type ProtoUpdateServerSettingsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=516" json:"payloadType,omitempty"`
	ServerSetting []*ProtoServerSetting  `protobuf:"bytes,2,rep,name=serverSetting" json:"serverSetting,omitempty"` // Server Settings to be updated
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoUpdateServerSettingsReq fields.
const (
	Default_ProtoUpdateServerSettingsReq_PayloadType = ProtoCSPayloadType_PROTO_UPDATE_SERVER_SETTINGS_REQ
)

func (x *ProtoUpdateServerSettingsReq) Reset() {
	*x = ProtoUpdateServerSettingsReq{}
	mi := &file_CSMessages_External_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoUpdateServerSettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoUpdateServerSettingsReq) ProtoMessage() {}

func (x *ProtoUpdateServerSettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoUpdateServerSettingsReq.ProtoReflect.Descriptor instead.
func (*ProtoUpdateServerSettingsReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{75}
}

func (x *ProtoUpdateServerSettingsReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoUpdateServerSettingsReq_PayloadType
}

func (x *ProtoUpdateServerSettingsReq) GetServerSetting() []*ProtoServerSetting {
	if x != nil {
		return x.ServerSetting
	}
	return nil
}

// Response for ProtoUpdateServerSettingsReq
type ProtoUpdateServerSettingsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=517" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoUpdateServerSettingsRes fields.
const (
	Default_ProtoUpdateServerSettingsRes_PayloadType = ProtoCSPayloadType_PROTO_UPDATE_SERVER_SETTINGS_RES
)

func (x *ProtoUpdateServerSettingsRes) Reset() {
	*x = ProtoUpdateServerSettingsRes{}
	mi := &file_CSMessages_External_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoUpdateServerSettingsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoUpdateServerSettingsRes) ProtoMessage() {}

func (x *ProtoUpdateServerSettingsRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoUpdateServerSettingsRes.ProtoReflect.Descriptor instead.
func (*ProtoUpdateServerSettingsRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{76}
}

func (x *ProtoUpdateServerSettingsRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoUpdateServerSettingsRes_PayloadType
}

// Request to create price stream
type ProtoCreatePriceStreamReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=527" json:"payloadType,omitempty"`
	PriceStream   *ProtoPriceStream      `protobuf:"bytes,2,req,name=priceStream" json:"priceStream,omitempty"` // Price Stream entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCreatePriceStreamReq fields.
const (
	Default_ProtoCreatePriceStreamReq_PayloadType = ProtoCSPayloadType_PROTO_PRICE_STREAM_CREATE_REQ
)

func (x *ProtoCreatePriceStreamReq) Reset() {
	*x = ProtoCreatePriceStreamReq{}
	mi := &file_CSMessages_External_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCreatePriceStreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCreatePriceStreamReq) ProtoMessage() {}

func (x *ProtoCreatePriceStreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCreatePriceStreamReq.ProtoReflect.Descriptor instead.
func (*ProtoCreatePriceStreamReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{77}
}

func (x *ProtoCreatePriceStreamReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCreatePriceStreamReq_PayloadType
}

func (x *ProtoCreatePriceStreamReq) GetPriceStream() *ProtoPriceStream {
	if x != nil {
		return x.PriceStream
	}
	return nil
}

// Response for ProtoCreatePriceStreamReq
type ProtoCreatePriceStreamRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=528" json:"payloadType,omitempty"`
	PriceStreamId *int64                 `protobuf:"varint,2,req,name=priceStreamId" json:"priceStreamId,omitempty"` // ID of Price Stream entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCreatePriceStreamRes fields.
const (
	Default_ProtoCreatePriceStreamRes_PayloadType = ProtoCSPayloadType_PROTO_PRICE_STREAM_CREATE_RES
)

func (x *ProtoCreatePriceStreamRes) Reset() {
	*x = ProtoCreatePriceStreamRes{}
	mi := &file_CSMessages_External_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCreatePriceStreamRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCreatePriceStreamRes) ProtoMessage() {}

func (x *ProtoCreatePriceStreamRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCreatePriceStreamRes.ProtoReflect.Descriptor instead.
func (*ProtoCreatePriceStreamRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{78}
}

func (x *ProtoCreatePriceStreamRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCreatePriceStreamRes_PayloadType
}

func (x *ProtoCreatePriceStreamRes) GetPriceStreamId() int64 {
	if x != nil && x.PriceStreamId != nil {
		return *x.PriceStreamId
	}
	return 0
}

// Request to delete price stream
type ProtoDeletePriceStreamReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=529" json:"payloadType,omitempty"`
	PriceStreamId *int64                 `protobuf:"varint,2,req,name=priceStreamId" json:"priceStreamId,omitempty"` // ID of Price Stream entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoDeletePriceStreamReq fields.
const (
	Default_ProtoDeletePriceStreamReq_PayloadType = ProtoCSPayloadType_PROTO_PRICE_STREAM_DELETE_REQ
)

func (x *ProtoDeletePriceStreamReq) Reset() {
	*x = ProtoDeletePriceStreamReq{}
	mi := &file_CSMessages_External_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDeletePriceStreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDeletePriceStreamReq) ProtoMessage() {}

func (x *ProtoDeletePriceStreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDeletePriceStreamReq.ProtoReflect.Descriptor instead.
func (*ProtoDeletePriceStreamReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{79}
}

func (x *ProtoDeletePriceStreamReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoDeletePriceStreamReq_PayloadType
}

func (x *ProtoDeletePriceStreamReq) GetPriceStreamId() int64 {
	if x != nil && x.PriceStreamId != nil {
		return *x.PriceStreamId
	}
	return 0
}

// Response for ProtoDeletePriceStreamReq
type ProtoDeletePriceStreamRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=530" json:"payloadType,omitempty"`
	PriceStreamId *int64                 `protobuf:"varint,2,req,name=priceStreamId" json:"priceStreamId,omitempty"` // ID of Price Stream entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoDeletePriceStreamRes fields.
const (
	Default_ProtoDeletePriceStreamRes_PayloadType = ProtoCSPayloadType_PROTO_PRICE_STREAM_DELETE_RES
)

func (x *ProtoDeletePriceStreamRes) Reset() {
	*x = ProtoDeletePriceStreamRes{}
	mi := &file_CSMessages_External_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDeletePriceStreamRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDeletePriceStreamRes) ProtoMessage() {}

func (x *ProtoDeletePriceStreamRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDeletePriceStreamRes.ProtoReflect.Descriptor instead.
func (*ProtoDeletePriceStreamRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{80}
}

func (x *ProtoDeletePriceStreamRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoDeletePriceStreamRes_PayloadType
}

func (x *ProtoDeletePriceStreamRes) GetPriceStreamId() int64 {
	if x != nil && x.PriceStreamId != nil {
		return *x.PriceStreamId
	}
	return 0
}

// Request to update price stream
type ProtoUpdatePriceStreamReq struct {
	state         protoimpl.MessageState                                    `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType                                       `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=531" json:"payloadType,omitempty"`
	PriceStreamId *int64                                                    `protobuf:"varint,2,req,name=priceStreamId" json:"priceStreamId,omitempty"` // ID of Price Stream entity
	Name          *string                                                   `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`                    // Name of price stream
	Description   *string                                                   `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`      // Description of of Price Stream
	UpdateSymbol  []*ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol `protobuf:"bytes,5,rep,name=updateSymbol" json:"updateSymbol,omitempty"`    // Entities with parameters to be updated
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoUpdatePriceStreamReq fields.
const (
	Default_ProtoUpdatePriceStreamReq_PayloadType = ProtoCSPayloadType_PROTO_PRICE_STREAM_UPDATE_REQ
)

func (x *ProtoUpdatePriceStreamReq) Reset() {
	*x = ProtoUpdatePriceStreamReq{}
	mi := &file_CSMessages_External_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoUpdatePriceStreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoUpdatePriceStreamReq) ProtoMessage() {}

func (x *ProtoUpdatePriceStreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoUpdatePriceStreamReq.ProtoReflect.Descriptor instead.
func (*ProtoUpdatePriceStreamReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{81}
}

func (x *ProtoUpdatePriceStreamReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoUpdatePriceStreamReq_PayloadType
}

func (x *ProtoUpdatePriceStreamReq) GetPriceStreamId() int64 {
	if x != nil && x.PriceStreamId != nil {
		return *x.PriceStreamId
	}
	return 0
}

func (x *ProtoUpdatePriceStreamReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoUpdatePriceStreamReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoUpdatePriceStreamReq) GetUpdateSymbol() []*ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol {
	if x != nil {
		return x.UpdateSymbol
	}
	return nil
}

// Response for ProtoUpdatePriceStreamReq
type ProtoUpdatePriceStreamRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=532" json:"payloadType,omitempty"`
	PriceStreamId *int64                 `protobuf:"varint,2,req,name=priceStreamId" json:"priceStreamId,omitempty"` // ID of Price Stream entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoUpdatePriceStreamRes fields.
const (
	Default_ProtoUpdatePriceStreamRes_PayloadType = ProtoCSPayloadType_PROTO_PRICE_STREAM_UPDATE_RES
)

func (x *ProtoUpdatePriceStreamRes) Reset() {
	*x = ProtoUpdatePriceStreamRes{}
	mi := &file_CSMessages_External_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoUpdatePriceStreamRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoUpdatePriceStreamRes) ProtoMessage() {}

func (x *ProtoUpdatePriceStreamRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoUpdatePriceStreamRes.ProtoReflect.Descriptor instead.
func (*ProtoUpdatePriceStreamRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{82}
}

func (x *ProtoUpdatePriceStreamRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoUpdatePriceStreamRes_PayloadType
}

func (x *ProtoUpdatePriceStreamRes) GetPriceStreamId() int64 {
	if x != nil && x.PriceStreamId != nil {
		return *x.PriceStreamId
	}
	return 0
}

// Request to create/update/delete Dynamic Leverage settings (https://help.ctrader.com/trading-with-ctrader/dynamic-leverage)
type ProtoCrudDynamicLeverageReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=559" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete
	Leverage      *ProtoDynamicLeverage  `protobuf:"bytes,3,req,name=leverage" json:"leverage,omitempty"`                            // Dynamic Leverage entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudDynamicLeverageReq fields.
const (
	Default_ProtoCrudDynamicLeverageReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_DYNAMIC_LEVERAGE_REQ
)

func (x *ProtoCrudDynamicLeverageReq) Reset() {
	*x = ProtoCrudDynamicLeverageReq{}
	mi := &file_CSMessages_External_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudDynamicLeverageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudDynamicLeverageReq) ProtoMessage() {}

func (x *ProtoCrudDynamicLeverageReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudDynamicLeverageReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudDynamicLeverageReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{83}
}

func (x *ProtoCrudDynamicLeverageReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudDynamicLeverageReq_PayloadType
}

func (x *ProtoCrudDynamicLeverageReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudDynamicLeverageReq) GetLeverage() *ProtoDynamicLeverage {
	if x != nil {
		return x.Leverage
	}
	return nil
}

// Response for ProtoCrudDynamicLeverageReq
type ProtoCrudDynamicLeverageRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=560" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete
	LeverageId    *int64                 `protobuf:"varint,3,req,name=leverageId" json:"leverageId,omitempty"`                       // ID of Dynamic Leverage entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudDynamicLeverageRes fields.
const (
	Default_ProtoCrudDynamicLeverageRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_DYNAMIC_LEVERAGE_RES
)

func (x *ProtoCrudDynamicLeverageRes) Reset() {
	*x = ProtoCrudDynamicLeverageRes{}
	mi := &file_CSMessages_External_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudDynamicLeverageRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudDynamicLeverageRes) ProtoMessage() {}

func (x *ProtoCrudDynamicLeverageRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudDynamicLeverageRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudDynamicLeverageRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{84}
}

func (x *ProtoCrudDynamicLeverageRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudDynamicLeverageRes_PayloadType
}

func (x *ProtoCrudDynamicLeverageRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudDynamicLeverageRes) GetLeverageId() int64 {
	if x != nil && x.LeverageId != nil {
		return *x.LeverageId
	}
	return 0
}

// Request to create/update/delete Guaranteed Stop Loss (GSL) schedule items. GSL Schedule allows to change GSL by Schedule
type ProtoCrudGSLScheduleReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=563" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete
	Schedule      *ProtoGSLSchedule      `protobuf:"bytes,3,req,name=schedule" json:"schedule,omitempty"`                            // GSL schedule entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudGSLScheduleReq fields.
const (
	Default_ProtoCrudGSLScheduleReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_GSL_SCHEDULE_REQ
)

func (x *ProtoCrudGSLScheduleReq) Reset() {
	*x = ProtoCrudGSLScheduleReq{}
	mi := &file_CSMessages_External_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudGSLScheduleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudGSLScheduleReq) ProtoMessage() {}

func (x *ProtoCrudGSLScheduleReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudGSLScheduleReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudGSLScheduleReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{85}
}

func (x *ProtoCrudGSLScheduleReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudGSLScheduleReq_PayloadType
}

func (x *ProtoCrudGSLScheduleReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudGSLScheduleReq) GetSchedule() *ProtoGSLSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// Response for ProtoCrudGSLScheduleReq
type ProtoCrudGSLScheduleRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=564" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete
	ScheduleId    *int64                 `protobuf:"varint,3,req,name=scheduleId" json:"scheduleId,omitempty"`                       // ID of GSL schedule entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudGSLScheduleRes fields.
const (
	Default_ProtoCrudGSLScheduleRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_GSL_SCHEDULE_RES
)

func (x *ProtoCrudGSLScheduleRes) Reset() {
	*x = ProtoCrudGSLScheduleRes{}
	mi := &file_CSMessages_External_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudGSLScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudGSLScheduleRes) ProtoMessage() {}

func (x *ProtoCrudGSLScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudGSLScheduleRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudGSLScheduleRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{86}
}

func (x *ProtoCrudGSLScheduleRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudGSLScheduleRes_PayloadType
}

func (x *ProtoCrudGSLScheduleRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudGSLScheduleRes) GetScheduleId() int64 {
	if x != nil && x.ScheduleId != nil {
		return *x.ScheduleId
	}
	return 0
}

// Event that is sent when Trader is created/updated/deleted
type ProtoTraderChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=503" json:"payloadType,omitempty"`
	Trader        *ProtoTrader           `protobuf:"bytes,2,req,name=trader" json:"trader,omitempty"`                                // Trader entity
	Operation     *ProtoCrudOperation    `protobuf:"varint,3,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoTraderChangedEvent fields.
const (
	Default_ProtoTraderChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_TRADER_CHANGED_EVENT
)

func (x *ProtoTraderChangedEvent) Reset() {
	*x = ProtoTraderChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTraderChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTraderChangedEvent) ProtoMessage() {}

func (x *ProtoTraderChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTraderChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoTraderChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{87}
}

func (x *ProtoTraderChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoTraderChangedEvent_PayloadType
}

func (x *ProtoTraderChangedEvent) GetTrader() *ProtoTrader {
	if x != nil {
		return x.Trader
	}
	return nil
}

func (x *ProtoTraderChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

// Event that is sent when group is created/updated/deleted. Groups are used to manage Trader settings and Manager permission. Each Trader belongs to one group
type ProtoGroupChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=506" json:"payloadType,omitempty"`
	Group         *ProtoGroup            `protobuf:"bytes,2,req,name=group" json:"group,omitempty"`                                  // Group entity
	Operation     *ProtoCrudOperation    `protobuf:"varint,3,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update_diff/delete operation. Update_diff means that only changed parameters are sent in request (other parameters stay unchanged)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoGroupChangedEvent fields.
const (
	Default_ProtoGroupChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_GROUP_CHANGED_EVENT
)

func (x *ProtoGroupChangedEvent) Reset() {
	*x = ProtoGroupChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoGroupChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGroupChangedEvent) ProtoMessage() {}

func (x *ProtoGroupChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGroupChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoGroupChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{88}
}

func (x *ProtoGroupChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoGroupChangedEvent_PayloadType
}

func (x *ProtoGroupChangedEvent) GetGroup() *ProtoGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ProtoGroupChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

// Event that is sent when Symbol is created/updated/deleted
type ProtoManagerSymbolChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=558" json:"payloadType,omitempty"`
	Symbol        *ProtoManagerSymbol    `protobuf:"bytes,2,req,name=symbol" json:"symbol,omitempty"`                                // Symbol entity
	Operation     *ProtoCrudOperation    `protobuf:"varint,3,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerSymbolChangedEvent fields.
const (
	Default_ProtoManagerSymbolChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_SYMBOL_CHANGED_EVENT
)

func (x *ProtoManagerSymbolChangedEvent) Reset() {
	*x = ProtoManagerSymbolChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerSymbolChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerSymbolChangedEvent) ProtoMessage() {}

func (x *ProtoManagerSymbolChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerSymbolChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoManagerSymbolChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{89}
}

func (x *ProtoManagerSymbolChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerSymbolChangedEvent_PayloadType
}

func (x *ProtoManagerSymbolChangedEvent) GetSymbol() *ProtoManagerSymbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *ProtoManagerSymbolChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

// Event that is sent when Manager is created/updated/deleted
type ProtoManagerChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=512" json:"payloadType,omitempty"`
	Manager       *ProtoManager          `protobuf:"bytes,2,req,name=manager" json:"manager,omitempty"`                              // Manager entity
	Operation     *ProtoCrudOperation    `protobuf:"varint,3,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerChangedEvent fields.
const (
	Default_ProtoManagerChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_CHANGED_EVENT
)

func (x *ProtoManagerChangedEvent) Reset() {
	*x = ProtoManagerChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerChangedEvent) ProtoMessage() {}

func (x *ProtoManagerChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoManagerChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{90}
}

func (x *ProtoManagerChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerChangedEvent_PayloadType
}

func (x *ProtoManagerChangedEvent) GetManager() *ProtoManager {
	if x != nil {
		return x.Manager
	}
	return nil
}

func (x *ProtoManagerChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

// Event that is sent when server Settings are changed
type ProtoServerSettingsChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=518" json:"payloadType,omitempty"`
	ServerSetting []*ProtoServerSetting  `protobuf:"bytes,2,rep,name=serverSetting" json:"serverSetting,omitempty"` // Server Settings list
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoServerSettingsChangedEvent fields.
const (
	Default_ProtoServerSettingsChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_SERVER_SETTINGS_CHANGED_EVENT
)

func (x *ProtoServerSettingsChangedEvent) Reset() {
	*x = ProtoServerSettingsChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoServerSettingsChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoServerSettingsChangedEvent) ProtoMessage() {}

func (x *ProtoServerSettingsChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoServerSettingsChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoServerSettingsChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{91}
}

func (x *ProtoServerSettingsChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoServerSettingsChangedEvent_PayloadType
}

func (x *ProtoServerSettingsChangedEvent) GetServerSetting() []*ProtoServerSetting {
	if x != nil {
		return x.ServerSetting
	}
	return nil
}

// Event that is sent when price stream is created/updated/deleted
type ProtoPriceStreamChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=533" json:"payloadType,omitempty"`
	PriceStream   *ProtoPriceStream      `protobuf:"bytes,2,req,name=priceStream" json:"priceStream,omitempty"`                      // Price Stream entity
	Operation     *ProtoCrudOperation    `protobuf:"varint,3,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoPriceStreamChangedEvent fields.
const (
	Default_ProtoPriceStreamChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_PRICE_STREAM_CHANGED_EVENT
)

func (x *ProtoPriceStreamChangedEvent) Reset() {
	*x = ProtoPriceStreamChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPriceStreamChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPriceStreamChangedEvent) ProtoMessage() {}

func (x *ProtoPriceStreamChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPriceStreamChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoPriceStreamChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{92}
}

func (x *ProtoPriceStreamChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoPriceStreamChangedEvent_PayloadType
}

func (x *ProtoPriceStreamChangedEvent) GetPriceStream() *ProtoPriceStream {
	if x != nil {
		return x.PriceStream
	}
	return nil
}

func (x *ProtoPriceStreamChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

// Event that is sent when Dynamic Leverage is changed (https://help.ctrader.com/trading-with-ctrader/dynamic-leverage)
type ProtoDynamicLeverageChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=561" json:"payloadType,omitempty"`
	Leverage      *ProtoDynamicLeverage  `protobuf:"bytes,2,req,name=leverage" json:"leverage,omitempty"`                            // Dynamic Leverage entity
	Operation     *ProtoCrudOperation    `protobuf:"varint,3,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoDynamicLeverageChangedEvent fields.
const (
	Default_ProtoDynamicLeverageChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_DYNAMIC_LEVERAGE_CHANGED_EVENT
)

func (x *ProtoDynamicLeverageChangedEvent) Reset() {
	*x = ProtoDynamicLeverageChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDynamicLeverageChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDynamicLeverageChangedEvent) ProtoMessage() {}

func (x *ProtoDynamicLeverageChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDynamicLeverageChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoDynamicLeverageChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{93}
}

func (x *ProtoDynamicLeverageChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoDynamicLeverageChangedEvent_PayloadType
}

func (x *ProtoDynamicLeverageChangedEvent) GetLeverage() *ProtoDynamicLeverage {
	if x != nil {
		return x.Leverage
	}
	return nil
}

func (x *ProtoDynamicLeverageChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

// Event that is sent when Guaranteed Stop Loss (GSL) schedule item is changed. GSL schedule allows to change GSL settings by schedule
type ProtoGSLScheduleChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=565" json:"payloadType,omitempty"`
	Schedule      *ProtoGSLSchedule      `protobuf:"bytes,2,req,name=schedule" json:"schedule,omitempty"`                            // GSL schedule entity
	Operation     *ProtoCrudOperation    `protobuf:"varint,3,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoGSLScheduleChangedEvent fields.
const (
	Default_ProtoGSLScheduleChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_GSL_SCHEDULE_CHANGED_EVENT
)

func (x *ProtoGSLScheduleChangedEvent) Reset() {
	*x = ProtoGSLScheduleChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoGSLScheduleChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGSLScheduleChangedEvent) ProtoMessage() {}

func (x *ProtoGSLScheduleChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGSLScheduleChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoGSLScheduleChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{94}
}

func (x *ProtoGSLScheduleChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoGSLScheduleChangedEvent_PayloadType
}

func (x *ProtoGSLScheduleChangedEvent) GetSchedule() *ProtoGSLSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ProtoGSLScheduleChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

// Event that is sent when Manager loses access to Trader due to permissions change
type ProtoTraderPermissionLoseEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=562" json:"payloadType,omitempty"`
	TraderId      *int64                 `protobuf:"varint,2,opt,name=traderId" json:"traderId,omitempty"` // Unique identifier of the Trader within environment
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoTraderPermissionLoseEvent fields.
const (
	Default_ProtoTraderPermissionLoseEvent_PayloadType = ProtoCSPayloadType_PROTO_TRADER_PERMISSION_LOSE_EVENT
)

func (x *ProtoTraderPermissionLoseEvent) Reset() {
	*x = ProtoTraderPermissionLoseEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTraderPermissionLoseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTraderPermissionLoseEvent) ProtoMessage() {}

func (x *ProtoTraderPermissionLoseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTraderPermissionLoseEvent.ProtoReflect.Descriptor instead.
func (*ProtoTraderPermissionLoseEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{95}
}

func (x *ProtoTraderPermissionLoseEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoTraderPermissionLoseEvent_PayloadType
}

func (x *ProtoTraderPermissionLoseEvent) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

// Event that sent when Asset is created/updated/deleted
type ProtoAssetChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=540" json:"payloadType,omitempty"`
	Asset         *ProtoAsset            `protobuf:"bytes,2,req,name=asset" json:"asset,omitempty"`                                  // Asset entity
	Operation     *ProtoCrudOperation    `protobuf:"varint,3,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoAssetChangedEvent fields.
const (
	Default_ProtoAssetChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_ASSET_CHANGED_EVENT
)

func (x *ProtoAssetChangedEvent) Reset() {
	*x = ProtoAssetChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoAssetChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoAssetChangedEvent) ProtoMessage() {}

func (x *ProtoAssetChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoAssetChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoAssetChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{96}
}

func (x *ProtoAssetChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoAssetChangedEvent_PayloadType
}

func (x *ProtoAssetChangedEvent) GetAsset() *ProtoAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *ProtoAssetChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

// Event that sent when liquidity Feed is created/updated/deleted
type ProtoLiquidityFeedSymbolChangedEvent struct {
	state               protoimpl.MessageState    `protogen:"open.v1"`
	PayloadType         *ProtoCSPayloadType       `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=547" json:"payloadType,omitempty"`
	LiquidityFeedSymbol *ProtoLiquidityFeedSymbol `protobuf:"bytes,2,req,name=liquidityFeedSymbol" json:"liquidityFeedSymbol,omitempty"`      // Liquidity Feed to Symbol link entity
	Operation           *ProtoCrudOperation       `protobuf:"varint,3,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for ProtoLiquidityFeedSymbolChangedEvent fields.
const (
	Default_ProtoLiquidityFeedSymbolChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_LIQUIDITY_FEED_SYMBOL_CHANGED_EVENT
)

func (x *ProtoLiquidityFeedSymbolChangedEvent) Reset() {
	*x = ProtoLiquidityFeedSymbolChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLiquidityFeedSymbolChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLiquidityFeedSymbolChangedEvent) ProtoMessage() {}

func (x *ProtoLiquidityFeedSymbolChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLiquidityFeedSymbolChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoLiquidityFeedSymbolChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{97}
}

func (x *ProtoLiquidityFeedSymbolChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoLiquidityFeedSymbolChangedEvent_PayloadType
}

func (x *ProtoLiquidityFeedSymbolChangedEvent) GetLiquidityFeedSymbol() *ProtoLiquidityFeedSymbol {
	if x != nil {
		return x.LiquidityFeedSymbol
	}
	return nil
}

func (x *ProtoLiquidityFeedSymbolChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

// Event that sent when Swap And Dividend Profile is created/updated/deleted. Profile is a set of settings which is applied within specific Groups
type ProtoSwapAndDividendProfileChangedEvent struct {
	state                  protoimpl.MessageState       `protogen:"open.v1"`
	PayloadType            *ProtoCSPayloadType          `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=515" json:"payloadType,omitempty"`
	SwapAndDividendProfile *ProtoSwapAndDividendProfile `protobuf:"bytes,2,req,name=swapAndDividendProfile" json:"swapAndDividendProfile,omitempty"` // Swap And Dividend Profile entity
	Operation              *ProtoCrudOperation          `protobuf:"varint,3,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"`  // Create/update/delete operation
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for ProtoSwapAndDividendProfileChangedEvent fields.
const (
	Default_ProtoSwapAndDividendProfileChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_SWAP_AND_DIVIDEND_PROFILE_CHANGED_EVENT
)

func (x *ProtoSwapAndDividendProfileChangedEvent) Reset() {
	*x = ProtoSwapAndDividendProfileChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSwapAndDividendProfileChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSwapAndDividendProfileChangedEvent) ProtoMessage() {}

func (x *ProtoSwapAndDividendProfileChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSwapAndDividendProfileChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoSwapAndDividendProfileChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{98}
}

func (x *ProtoSwapAndDividendProfileChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSwapAndDividendProfileChangedEvent_PayloadType
}

func (x *ProtoSwapAndDividendProfileChangedEvent) GetSwapAndDividendProfile() *ProtoSwapAndDividendProfile {
	if x != nil {
		return x.SwapAndDividendProfile
	}
	return nil
}

func (x *ProtoSwapAndDividendProfileChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

// Request to get Trader by id
type ProtoTraderByIdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=703" json:"payloadType,omitempty"`
	TraderId      []int64                `protobuf:"varint,2,rep,name=traderId" json:"traderId,omitempty"` // Unique identifier of the Trader within environment
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoTraderByIdReq fields.
const (
	Default_ProtoTraderByIdReq_PayloadType = ProtoCSPayloadType_PROTO_TRADER_BY_ID_REQ
)

func (x *ProtoTraderByIdReq) Reset() {
	*x = ProtoTraderByIdReq{}
	mi := &file_CSMessages_External_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTraderByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTraderByIdReq) ProtoMessage() {}

func (x *ProtoTraderByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTraderByIdReq.ProtoReflect.Descriptor instead.
func (*ProtoTraderByIdReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{99}
}

func (x *ProtoTraderByIdReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoTraderByIdReq_PayloadType
}

func (x *ProtoTraderByIdReq) GetTraderId() []int64 {
	if x != nil {
		return x.TraderId
	}
	return nil
}

// Response for ProtoTraderByIdReq
type ProtoTraderByIdRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=704" json:"payloadType,omitempty"`
	Trader        []*ProtoTrader         `protobuf:"bytes,2,rep,name=trader" json:"trader,omitempty"` // Trader entities
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoTraderByIdRes fields.
const (
	Default_ProtoTraderByIdRes_PayloadType = ProtoCSPayloadType_PROTO_TRADER_BY_ID_RES
)

func (x *ProtoTraderByIdRes) Reset() {
	*x = ProtoTraderByIdRes{}
	mi := &file_CSMessages_External_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTraderByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTraderByIdRes) ProtoMessage() {}

func (x *ProtoTraderByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTraderByIdRes.ProtoReflect.Descriptor instead.
func (*ProtoTraderByIdRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{100}
}

func (x *ProtoTraderByIdRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoTraderByIdRes_PayloadType
}

func (x *ProtoTraderByIdRes) GetTrader() []*ProtoTrader {
	if x != nil {
		return x.Trader
	}
	return nil
}

// Request to get group by id
type ProtoGroupByIdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=475" json:"payloadType,omitempty"`
	GroupId       *int64                 `protobuf:"varint,2,req,name=groupId" json:"groupId,omitempty"` // ID of group
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoGroupByIdReq fields.
const (
	Default_ProtoGroupByIdReq_PayloadType = ProtoCSPayloadType_PROTO_GROUP_BY_ID_REQ
)

func (x *ProtoGroupByIdReq) Reset() {
	*x = ProtoGroupByIdReq{}
	mi := &file_CSMessages_External_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoGroupByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGroupByIdReq) ProtoMessage() {}

func (x *ProtoGroupByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGroupByIdReq.ProtoReflect.Descriptor instead.
func (*ProtoGroupByIdReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{101}
}

func (x *ProtoGroupByIdReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoGroupByIdReq_PayloadType
}

func (x *ProtoGroupByIdReq) GetGroupId() int64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

// Response for ProtoGroupByIdReq
type ProtoGroupByIdRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=476" json:"payloadType,omitempty"`
	Group         *ProtoGroup            `protobuf:"bytes,2,req,name=group" json:"group,omitempty"` // Group entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoGroupByIdRes fields.
const (
	Default_ProtoGroupByIdRes_PayloadType = ProtoCSPayloadType_PROTO_GROUP_BY_ID_RES
)

func (x *ProtoGroupByIdRes) Reset() {
	*x = ProtoGroupByIdRes{}
	mi := &file_CSMessages_External_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoGroupByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGroupByIdRes) ProtoMessage() {}

func (x *ProtoGroupByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGroupByIdRes.ProtoReflect.Descriptor instead.
func (*ProtoGroupByIdRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{102}
}

func (x *ProtoGroupByIdRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoGroupByIdRes_PayloadType
}

func (x *ProtoGroupByIdRes) GetGroup() *ProtoGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

// Request to get list of countries
type ProtoCountryListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=435" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCountryListReq fields.
const (
	Default_ProtoCountryListReq_PayloadType = ProtoCSPayloadType_PROTO_COUNTRY_LIST_REQ
)

func (x *ProtoCountryListReq) Reset() {
	*x = ProtoCountryListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCountryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCountryListReq) ProtoMessage() {}

func (x *ProtoCountryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCountryListReq.ProtoReflect.Descriptor instead.
func (*ProtoCountryListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{103}
}

func (x *ProtoCountryListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCountryListReq_PayloadType
}

// Response for ProtoCountryListReq
type ProtoCountryListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=436" json:"payloadType,omitempty"`
	Country       []*ProtoCountry        `protobuf:"bytes,2,rep,name=country" json:"country,omitempty"` // Country entities
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCountryListRes fields.
const (
	Default_ProtoCountryListRes_PayloadType = ProtoCSPayloadType_PROTO_COUNTRY_LIST_RES
)

func (x *ProtoCountryListRes) Reset() {
	*x = ProtoCountryListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCountryListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCountryListRes) ProtoMessage() {}

func (x *ProtoCountryListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCountryListRes.ProtoReflect.Descriptor instead.
func (*ProtoCountryListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{104}
}

func (x *ProtoCountryListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCountryListRes_PayloadType
}

func (x *ProtoCountryListRes) GetCountry() []*ProtoCountry {
	if x != nil {
		return x.Country
	}
	return nil
}

// Request to get list of Asset Classes
type ProtoAssetClassListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=437" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoAssetClassListReq fields.
const (
	Default_ProtoAssetClassListReq_PayloadType = ProtoCSPayloadType_PROTO_ASSET_CLASS_LIST_REQ
)

func (x *ProtoAssetClassListReq) Reset() {
	*x = ProtoAssetClassListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoAssetClassListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoAssetClassListReq) ProtoMessage() {}

func (x *ProtoAssetClassListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoAssetClassListReq.ProtoReflect.Descriptor instead.
func (*ProtoAssetClassListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{105}
}

func (x *ProtoAssetClassListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoAssetClassListReq_PayloadType
}

// Response for ProtoAssetClassListReq
type ProtoAssetClassListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=438" json:"payloadType,omitempty"`
	AssetClass    []*ProtoAssetClass     `protobuf:"bytes,2,rep,name=assetClass" json:"assetClass,omitempty"` // Asset Class entities
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoAssetClassListRes fields.
const (
	Default_ProtoAssetClassListRes_PayloadType = ProtoCSPayloadType_PROTO_ASSET_CLASS_LIST_RES
)

func (x *ProtoAssetClassListRes) Reset() {
	*x = ProtoAssetClassListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoAssetClassListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoAssetClassListRes) ProtoMessage() {}

func (x *ProtoAssetClassListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoAssetClassListRes.ProtoReflect.Descriptor instead.
func (*ProtoAssetClassListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{106}
}

func (x *ProtoAssetClassListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoAssetClassListRes_PayloadType
}

func (x *ProtoAssetClassListRes) GetAssetClass() []*ProtoAssetClass {
	if x != nil {
		return x.AssetClass
	}
	return nil
}

// Request to get list of Orders, filtered by utcLastUpdateTimestamp
type ProtoOrderManagerListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=443" json:"payloadType,omitempty"`
	FromTimestamp *int64                 `protobuf:"varint,2,req,name=fromTimestamp" json:"fromTimestamp,omitempty"` // UNIX timestamp in milliseconds of starting the search. Search by utcLastUpdateTimestamp of the Order
	ToTimestamp   *int64                 `protobuf:"varint,3,req,name=toTimestamp" json:"toTimestamp,omitempty"`     // UNIX timestamp in milliseconds of finishing the search. Search by utcLastUpdateTimestamp of the Order
	TraderId      *int64                 `protobuf:"varint,4,opt,name=traderId" json:"traderId,omitempty"`           // Unique identifier of the Trader within environment
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoOrderManagerListReq fields.
const (
	Default_ProtoOrderManagerListReq_PayloadType = ProtoCSPayloadType_PROTO_ORDER_MANAGER_LIST_REQ
)

func (x *ProtoOrderManagerListReq) Reset() {
	*x = ProtoOrderManagerListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoOrderManagerListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOrderManagerListReq) ProtoMessage() {}

func (x *ProtoOrderManagerListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOrderManagerListReq.ProtoReflect.Descriptor instead.
func (*ProtoOrderManagerListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{107}
}

func (x *ProtoOrderManagerListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoOrderManagerListReq_PayloadType
}

func (x *ProtoOrderManagerListReq) GetFromTimestamp() int64 {
	if x != nil && x.FromTimestamp != nil {
		return *x.FromTimestamp
	}
	return 0
}

func (x *ProtoOrderManagerListReq) GetToTimestamp() int64 {
	if x != nil && x.ToTimestamp != nil {
		return *x.ToTimestamp
	}
	return 0
}

func (x *ProtoOrderManagerListReq) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

// Response for ProtoOrderManagerListReq
type ProtoOrderManagerListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=444" json:"payloadType,omitempty"`
	Order         []*ProtoOrder          `protobuf:"bytes,2,rep,name=order" json:"order,omitempty"`      // Order entities, sorted by utcLastUpdateTimestamp in descending order (newest first)
	HasMore       *bool                  `protobuf:"varint,3,req,name=hasMore" json:"hasMore,omitempty"` // If TRUE then the number of entities by filter is larger than internal chunk size, the response contains the number of entities that is equal to chunk size
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoOrderManagerListRes fields.
const (
	Default_ProtoOrderManagerListRes_PayloadType = ProtoCSPayloadType_PROTO_ORDER_MANAGER_LIST_RES
)

func (x *ProtoOrderManagerListRes) Reset() {
	*x = ProtoOrderManagerListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoOrderManagerListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOrderManagerListRes) ProtoMessage() {}

func (x *ProtoOrderManagerListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOrderManagerListRes.ProtoReflect.Descriptor instead.
func (*ProtoOrderManagerListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{108}
}

func (x *ProtoOrderManagerListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoOrderManagerListRes_PayloadType
}

func (x *ProtoOrderManagerListRes) GetOrder() []*ProtoOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ProtoOrderManagerListRes) GetHasMore() bool {
	if x != nil && x.HasMore != nil {
		return *x.HasMore
	}
	return false
}

// Request to get Deal by ID
type ProtoManagerGetDealReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=709" json:"payloadType,omitempty"`
	DealId        *uint64                `protobuf:"varint,2,req,name=dealId" json:"dealId,omitempty"` // The unique ID of the execution Deal
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerGetDealReq fields.
const (
	Default_ProtoManagerGetDealReq_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_GET_DEAL_REQ
)

func (x *ProtoManagerGetDealReq) Reset() {
	*x = ProtoManagerGetDealReq{}
	mi := &file_CSMessages_External_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerGetDealReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerGetDealReq) ProtoMessage() {}

func (x *ProtoManagerGetDealReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerGetDealReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerGetDealReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{109}
}

func (x *ProtoManagerGetDealReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerGetDealReq_PayloadType
}

func (x *ProtoManagerGetDealReq) GetDealId() uint64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

// Response for ProtoManagerGetDealReq
type ProtoManagerGetDealRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=711" json:"payloadType,omitempty"`
	Deal          *ProtoDeal             `protobuf:"bytes,2,req,name=deal" json:"deal,omitempty"` // Deal (execution) entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerGetDealRes fields.
const (
	Default_ProtoManagerGetDealRes_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_GET_DEAL_RES
)

func (x *ProtoManagerGetDealRes) Reset() {
	*x = ProtoManagerGetDealRes{}
	mi := &file_CSMessages_External_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerGetDealRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerGetDealRes) ProtoMessage() {}

func (x *ProtoManagerGetDealRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerGetDealRes.ProtoReflect.Descriptor instead.
func (*ProtoManagerGetDealRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{110}
}

func (x *ProtoManagerGetDealRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerGetDealRes_PayloadType
}

func (x *ProtoManagerGetDealRes) GetDeal() *ProtoDeal {
	if x != nil {
		return x.Deal
	}
	return nil
}

// Request to get closed Positions
type ProtoManagerClosedPositionListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=720" json:"payloadType,omitempty"`
	FromTimestamp *int64                 `protobuf:"varint,2,req,name=fromTimestamp" json:"fromTimestamp,omitempty"` // UNIX timestamp in milliseconds from which start the searching
	ToTimestamp   *int64                 `protobuf:"varint,3,req,name=toTimestamp" json:"toTimestamp,omitempty"`     // UNIX timestamp in milliseconds of finishing the search
	TraderId      *int64                 `protobuf:"varint,4,opt,name=traderId" json:"traderId,omitempty"`           // Unique identifier of the Trader within environment
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerClosedPositionListReq fields.
const (
	Default_ProtoManagerClosedPositionListReq_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_CLOSED_POSITION_LIST_REQ
)

func (x *ProtoManagerClosedPositionListReq) Reset() {
	*x = ProtoManagerClosedPositionListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerClosedPositionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerClosedPositionListReq) ProtoMessage() {}

func (x *ProtoManagerClosedPositionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerClosedPositionListReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerClosedPositionListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{111}
}

func (x *ProtoManagerClosedPositionListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerClosedPositionListReq_PayloadType
}

func (x *ProtoManagerClosedPositionListReq) GetFromTimestamp() int64 {
	if x != nil && x.FromTimestamp != nil {
		return *x.FromTimestamp
	}
	return 0
}

func (x *ProtoManagerClosedPositionListReq) GetToTimestamp() int64 {
	if x != nil && x.ToTimestamp != nil {
		return *x.ToTimestamp
	}
	return 0
}

func (x *ProtoManagerClosedPositionListReq) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

// Response for ProtoManagerClosedPositionListReq
type ProtoManagerClosedPositionListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=721" json:"payloadType,omitempty"`
	Position      []*ProtoPosition       `protobuf:"bytes,2,rep,name=position" json:"position,omitempty"` // List of Positions
	HasMore       *bool                  `protobuf:"varint,3,req,name=hasMore" json:"hasMore,omitempty"`  // If TRUE then the number of entities by filter is larger than internal chunk size, the response contains the number of entities that is equal to chunk size
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerClosedPositionListRes fields.
const (
	Default_ProtoManagerClosedPositionListRes_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_CLOSED_POSITION_LIST_RES
)

func (x *ProtoManagerClosedPositionListRes) Reset() {
	*x = ProtoManagerClosedPositionListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerClosedPositionListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerClosedPositionListRes) ProtoMessage() {}

func (x *ProtoManagerClosedPositionListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerClosedPositionListRes.ProtoReflect.Descriptor instead.
func (*ProtoManagerClosedPositionListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{112}
}

func (x *ProtoManagerClosedPositionListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerClosedPositionListRes_PayloadType
}

func (x *ProtoManagerClosedPositionListRes) GetPosition() []*ProtoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *ProtoManagerClosedPositionListRes) GetHasMore() bool {
	if x != nil && x.HasMore != nil {
		return *x.HasMore
	}
	return false
}

// Request to get Position info by ID - related Orders, Deals, etc.
type ProtoPositionDetailsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=717" json:"payloadType,omitempty"`
	PositionId    *int64                 `protobuf:"varint,2,req,name=positionId" json:"positionId,omitempty"` // The unique ID of the Position
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoPositionDetailsReq fields.
const (
	Default_ProtoPositionDetailsReq_PayloadType = ProtoCSPayloadType_PROTO_POSITION_DETAILS_REQ
)

func (x *ProtoPositionDetailsReq) Reset() {
	*x = ProtoPositionDetailsReq{}
	mi := &file_CSMessages_External_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPositionDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPositionDetailsReq) ProtoMessage() {}

func (x *ProtoPositionDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPositionDetailsReq.ProtoReflect.Descriptor instead.
func (*ProtoPositionDetailsReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{113}
}

func (x *ProtoPositionDetailsReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoPositionDetailsReq_PayloadType
}

func (x *ProtoPositionDetailsReq) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

// Response for ProtoPositionDetailsReq
type ProtoPositionDetailsRes struct {
	state                          protoimpl.MessageState                 `protogen:"open.v1"`
	PayloadType                    *ProtoCSPayloadType                    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=718" json:"payloadType,omitempty"`
	Deal                           []*ProtoDeal                           `protobuf:"bytes,2,rep,name=deal" json:"deal,omitempty"`                                                     // Deal (execution) entities
	Order                          []*ProtoOrder                          `protobuf:"bytes,3,rep,name=order" json:"order,omitempty"`                                                   // Order entities
	StopLossTakeProfitChangeRecord []*ProtoStopLossTakeProfitChangeRecord `protobuf:"bytes,4,rep,name=stopLossTakeProfitChangeRecord" json:"stopLossTakeProfitChangeRecord,omitempty"` // Information about SL and TP changes
	SwapCalculationRecord          []*ProtoSwapCalculationRecord          `protobuf:"bytes,5,rep,name=swapCalculationRecord" json:"swapCalculationRecord,omitempty"`                   // Data about Swap calculation
	Position                       *ProtoPosition                         `protobuf:"bytes,6,opt,name=position" json:"position,omitempty"`                                             // Position entity
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

// Default values for ProtoPositionDetailsRes fields.
const (
	Default_ProtoPositionDetailsRes_PayloadType = ProtoCSPayloadType_PROTO_POSITION_DETAILS_RES
)

func (x *ProtoPositionDetailsRes) Reset() {
	*x = ProtoPositionDetailsRes{}
	mi := &file_CSMessages_External_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPositionDetailsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPositionDetailsRes) ProtoMessage() {}

func (x *ProtoPositionDetailsRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPositionDetailsRes.ProtoReflect.Descriptor instead.
func (*ProtoPositionDetailsRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{114}
}

func (x *ProtoPositionDetailsRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoPositionDetailsRes_PayloadType
}

func (x *ProtoPositionDetailsRes) GetDeal() []*ProtoDeal {
	if x != nil {
		return x.Deal
	}
	return nil
}

func (x *ProtoPositionDetailsRes) GetOrder() []*ProtoOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ProtoPositionDetailsRes) GetStopLossTakeProfitChangeRecord() []*ProtoStopLossTakeProfitChangeRecord {
	if x != nil {
		return x.StopLossTakeProfitChangeRecord
	}
	return nil
}

func (x *ProtoPositionDetailsRes) GetSwapCalculationRecord() []*ProtoSwapCalculationRecord {
	if x != nil {
		return x.SwapCalculationRecord
	}
	return nil
}

func (x *ProtoPositionDetailsRes) GetPosition() *ProtoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

// Request to get Position info by Position's id. Contains less data than ProtoPositionDetailsReq
type ProtoPositionDetailsLiteReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=754" json:"payloadType,omitempty"`
	PositionId    *int64                 `protobuf:"varint,2,req,name=positionId" json:"positionId,omitempty"` // The unique ID of the Position
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoPositionDetailsLiteReq fields.
const (
	Default_ProtoPositionDetailsLiteReq_PayloadType = ProtoCSPayloadType_PROTO_POSITION_DETAILS_LITE_REQ
)

func (x *ProtoPositionDetailsLiteReq) Reset() {
	*x = ProtoPositionDetailsLiteReq{}
	mi := &file_CSMessages_External_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPositionDetailsLiteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPositionDetailsLiteReq) ProtoMessage() {}

func (x *ProtoPositionDetailsLiteReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPositionDetailsLiteReq.ProtoReflect.Descriptor instead.
func (*ProtoPositionDetailsLiteReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{115}
}

func (x *ProtoPositionDetailsLiteReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoPositionDetailsLiteReq_PayloadType
}

func (x *ProtoPositionDetailsLiteReq) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

// Response for ProtoPositionDetailsLiteReq
type ProtoPositionDetailsLiteRes struct {
	state                          protoimpl.MessageState                 `protogen:"open.v1"`
	PayloadType                    *ProtoCSPayloadType                    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=755" json:"payloadType,omitempty"`
	StopLossTakeProfitChangeRecord []*ProtoStopLossTakeProfitChangeRecord `protobuf:"bytes,4,rep,name=stopLossTakeProfitChangeRecord" json:"stopLossTakeProfitChangeRecord,omitempty"` // Information about SL and TP changes
	SwapCalculationRecord          []*ProtoSwapCalculationRecord          `protobuf:"bytes,5,rep,name=swapCalculationRecord" json:"swapCalculationRecord,omitempty"`                   // Information about Swap calculation
	Position                       *ProtoPosition                         `protobuf:"bytes,6,opt,name=position" json:"position,omitempty"`                                             // Position entity
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

// Default values for ProtoPositionDetailsLiteRes fields.
const (
	Default_ProtoPositionDetailsLiteRes_PayloadType = ProtoCSPayloadType_PROTO_POSITION_DETAILS_LITE_RES
)

func (x *ProtoPositionDetailsLiteRes) Reset() {
	*x = ProtoPositionDetailsLiteRes{}
	mi := &file_CSMessages_External_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPositionDetailsLiteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPositionDetailsLiteRes) ProtoMessage() {}

func (x *ProtoPositionDetailsLiteRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPositionDetailsLiteRes.ProtoReflect.Descriptor instead.
func (*ProtoPositionDetailsLiteRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{116}
}

func (x *ProtoPositionDetailsLiteRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoPositionDetailsLiteRes_PayloadType
}

func (x *ProtoPositionDetailsLiteRes) GetStopLossTakeProfitChangeRecord() []*ProtoStopLossTakeProfitChangeRecord {
	if x != nil {
		return x.StopLossTakeProfitChangeRecord
	}
	return nil
}

func (x *ProtoPositionDetailsLiteRes) GetSwapCalculationRecord() []*ProtoSwapCalculationRecord {
	if x != nil {
		return x.SwapCalculationRecord
	}
	return nil
}

func (x *ProtoPositionDetailsLiteRes) GetPosition() *ProtoPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

// Request to create and send a new Order
type ProtoManagerNewOrderReq struct {
	state                   protoimpl.MessageState   `protogen:"open.v1"`
	PayloadType             *ProtoCSPayloadType      `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=738" json:"payloadType,omitempty"`
	TraderId                *uint64                  `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"`                                                               // Unique identifier of the Trader within environment
	SymbolId                *int64                   `protobuf:"varint,3,req,name=symbolId" json:"symbolId,omitempty"`                                                               // Unique identifier of the Symbol within environment
	OrderType               *ProtoOrderType          `protobuf:"varint,4,req,name=orderType,enum=ProtoOrderType" json:"orderType,omitempty"`                                         // The type of an Order - MARKET, LIMIT, STOP, MARKET_RANGE, STOP_LIMIT
	TradeSide               *ProtoTradeSide          `protobuf:"varint,5,req,name=tradeSide,enum=ProtoTradeSide" json:"tradeSide,omitempty"`                                         // The trade direction - BUY or SELL
	Volume                  *int64                   `protobuf:"varint,6,req,name=volume" json:"volume,omitempty"`                                                                   // The volume represented in 0.01 of a unit (e.g. US$ 10.00 = 1000)
	LimitPrice              *float64                 `protobuf:"fixed64,7,opt,name=limitPrice" json:"limitPrice,omitempty"`                                                          // The limit price, can be specified for the LIMIT Order only
	StopPrice               *float64                 `protobuf:"fixed64,8,opt,name=stopPrice" json:"stopPrice,omitempty"`                                                            // The stop price, can be specified for the STOP and the STOP_LIMIT Orders only
	TimeInForce             *ProtoTimeInForce        `protobuf:"varint,9,opt,name=timeInForce,enum=ProtoTimeInForce,def=2" json:"timeInForce,omitempty"`                             // The specific Order execution or expiration instruction - GOOD_TILL_DATE, GOOD_TILL_CANCEL, IMMEDIATE_OR_CANCEL, FILL_OR_KILL, MARKET_ON_OPEN. Default: GOOD_TILL_CANCEL
	ExpirationTimestamp     *int64                   `protobuf:"varint,10,opt,name=expirationTimestamp" json:"expirationTimestamp,omitempty"`                                        // UNIX timestamp in milliseconds of the Order expiration time. Should be set for the Good Till Date Orders
	StopLoss                *float64                 `protobuf:"fixed64,12,opt,name=stopLoss" json:"stopLoss,omitempty"`                                                             // The absolute Stop Loss price (1.23456 for example). Not supported for the MARKER Orders
	TakeProfit              *float64                 `protobuf:"fixed64,13,opt,name=takeProfit" json:"takeProfit,omitempty"`                                                         // The absolute Take Profit price (1.23456 for example). Unsupported for the MARKER Orders
	Comment                 *string                  `protobuf:"bytes,16,opt,name=comment" json:"comment,omitempty"`                                                                 // User-specified comment. MaxLength = 512
	Method                  *string                  `protobuf:"bytes,17,opt,name=method" json:"method,omitempty"`                                                                   // Technical field - to be filled with "ManagerAPI"
	BaseSlippagePrice       *float64                 `protobuf:"fixed64,19,opt,name=baseSlippagePrice" json:"baseSlippagePrice,omitempty"`                                           // Base price to calculate relative slippage price for MARKET_RANGE Order
	Label                   *string                  `protobuf:"bytes,21,opt,name=label" json:"label,omitempty"`                                                                     // User-specified label. MaxLength = 100
	Channel                 *string                  `protobuf:"bytes,22,opt,name=channel" json:"channel,omitempty"`                                                                 // Technical field - to be filled with "ManagerAPI"
	PositionId              *int64                   `protobuf:"varint,23,opt,name=positionId" json:"positionId,omitempty"`                                                          // The unique ID of the Position
	ClientOrderId           *string                  `protobuf:"bytes,24,opt,name=clientOrderId" json:"clientOrderId,omitempty"`                                                     // Optional user-specific clientOrderId (similar to FIX ClOrderID). MaxLength = 50
	ClientToken             *string                  `protobuf:"bytes,25,opt,name=clientToken" json:"clientToken,omitempty"`                                                         // Deprecated field
	RelativeStopLoss        *int64                   `protobuf:"varint,26,opt,name=relativeStopLoss" json:"relativeStopLoss,omitempty"`                                              // Relative Stop Loss that can be specified instead of the absolute as one. Specified in 1/100000 of unit of a price. For BUY stopLoss = entryPrice - relativeStopLoss, for SELL stopLoss = entryPrice + relativeStopLoss
	RelativeTakeProfit      *int64                   `protobuf:"varint,27,opt,name=relativeTakeProfit" json:"relativeTakeProfit,omitempty"`                                          // Relative Take Profit that can be specified instead of the absolute one. Specified in 1/100000 of unit of a price. For BUY takeProfit = entryPrice + relativeTakeProfit, for SELL takeProfit = entryPrice - relativeTakeProfit
	MirroringCommissionRate *int32                   `protobuf:"varint,28,opt,name=mirroringCommissionRate" json:"mirroringCommissionRate,omitempty"`                                // Mirroring commission rate, used by Copy functionality
	InnerMirroringFee       *bool                    `protobuf:"varint,29,opt,name=innerMirroringFee" json:"innerMirroringFee,omitempty"`                                            // Mirroring Fee rate, used by Copy functionality
	TrailingStopLoss        *bool                    `protobuf:"varint,30,opt,name=trailingStopLoss" json:"trailingStopLoss,omitempty"`                                              // If TRUE then the Stop Loss is Trailing
	StopTriggerMethod       *ProtoOrderTriggerMethod `protobuf:"varint,31,opt,name=stopTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopTriggerMethod,omitempty"`         // Trigger Method for the STOP or the STOP_LIMIT pending Order. Default: TRADE
	StopLossTriggerMethod   *ProtoOrderTriggerMethod `protobuf:"varint,32,opt,name=stopLossTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopLossTriggerMethod,omitempty"` // Stop Trigger Method for SL/TP Order
	SlippageInPoints        *int32                   `protobuf:"varint,33,opt,name=slippageInPoints" json:"slippageInPoints,omitempty"`                                              // Slippage Distance for MARKET_RANGE and STOP_LIMIT Order
	DesiredOpenTimestamp    *int64                   `protobuf:"varint,34,opt,name=desiredOpenTimestamp" json:"desiredOpenTimestamp,omitempty"`                                      // UNIX timestamp in milliseconds used to set time of the opening for MARKET_ON_OPEN Orders
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for ProtoManagerNewOrderReq fields.
const (
	Default_ProtoManagerNewOrderReq_PayloadType           = ProtoCSPayloadType_PROTO_MANAGER_NEW_ORDER_REQ
	Default_ProtoManagerNewOrderReq_TimeInForce           = ProtoTimeInForce_GOOD_TILL_CANCEL
	Default_ProtoManagerNewOrderReq_StopTriggerMethod     = ProtoOrderTriggerMethod_TRADE
	Default_ProtoManagerNewOrderReq_StopLossTriggerMethod = ProtoOrderTriggerMethod_TRADE
)

func (x *ProtoManagerNewOrderReq) Reset() {
	*x = ProtoManagerNewOrderReq{}
	mi := &file_CSMessages_External_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerNewOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerNewOrderReq) ProtoMessage() {}

func (x *ProtoManagerNewOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerNewOrderReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerNewOrderReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{117}
}

func (x *ProtoManagerNewOrderReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerNewOrderReq_PayloadType
}

func (x *ProtoManagerNewOrderReq) GetTraderId() uint64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoManagerNewOrderReq) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoManagerNewOrderReq) GetOrderType() ProtoOrderType {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return ProtoOrderType_MARKET
}

func (x *ProtoManagerNewOrderReq) GetTradeSide() ProtoTradeSide {
	if x != nil && x.TradeSide != nil {
		return *x.TradeSide
	}
	return ProtoTradeSide_BUY
}

func (x *ProtoManagerNewOrderReq) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoManagerNewOrderReq) GetLimitPrice() float64 {
	if x != nil && x.LimitPrice != nil {
		return *x.LimitPrice
	}
	return 0
}

func (x *ProtoManagerNewOrderReq) GetStopPrice() float64 {
	if x != nil && x.StopPrice != nil {
		return *x.StopPrice
	}
	return 0
}

func (x *ProtoManagerNewOrderReq) GetTimeInForce() ProtoTimeInForce {
	if x != nil && x.TimeInForce != nil {
		return *x.TimeInForce
	}
	return Default_ProtoManagerNewOrderReq_TimeInForce
}

func (x *ProtoManagerNewOrderReq) GetExpirationTimestamp() int64 {
	if x != nil && x.ExpirationTimestamp != nil {
		return *x.ExpirationTimestamp
	}
	return 0
}

func (x *ProtoManagerNewOrderReq) GetStopLoss() float64 {
	if x != nil && x.StopLoss != nil {
		return *x.StopLoss
	}
	return 0
}

func (x *ProtoManagerNewOrderReq) GetTakeProfit() float64 {
	if x != nil && x.TakeProfit != nil {
		return *x.TakeProfit
	}
	return 0
}

func (x *ProtoManagerNewOrderReq) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoManagerNewOrderReq) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *ProtoManagerNewOrderReq) GetBaseSlippagePrice() float64 {
	if x != nil && x.BaseSlippagePrice != nil {
		return *x.BaseSlippagePrice
	}
	return 0
}

func (x *ProtoManagerNewOrderReq) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ProtoManagerNewOrderReq) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ProtoManagerNewOrderReq) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoManagerNewOrderReq) GetClientOrderId() string {
	if x != nil && x.ClientOrderId != nil {
		return *x.ClientOrderId
	}
	return ""
}

func (x *ProtoManagerNewOrderReq) GetClientToken() string {
	if x != nil && x.ClientToken != nil {
		return *x.ClientToken
	}
	return ""
}

func (x *ProtoManagerNewOrderReq) GetRelativeStopLoss() int64 {
	if x != nil && x.RelativeStopLoss != nil {
		return *x.RelativeStopLoss
	}
	return 0
}

func (x *ProtoManagerNewOrderReq) GetRelativeTakeProfit() int64 {
	if x != nil && x.RelativeTakeProfit != nil {
		return *x.RelativeTakeProfit
	}
	return 0
}

func (x *ProtoManagerNewOrderReq) GetMirroringCommissionRate() int32 {
	if x != nil && x.MirroringCommissionRate != nil {
		return *x.MirroringCommissionRate
	}
	return 0
}

func (x *ProtoManagerNewOrderReq) GetInnerMirroringFee() bool {
	if x != nil && x.InnerMirroringFee != nil {
		return *x.InnerMirroringFee
	}
	return false
}

func (x *ProtoManagerNewOrderReq) GetTrailingStopLoss() bool {
	if x != nil && x.TrailingStopLoss != nil {
		return *x.TrailingStopLoss
	}
	return false
}

func (x *ProtoManagerNewOrderReq) GetStopTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopTriggerMethod != nil {
		return *x.StopTriggerMethod
	}
	return Default_ProtoManagerNewOrderReq_StopTriggerMethod
}

func (x *ProtoManagerNewOrderReq) GetStopLossTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopLossTriggerMethod != nil {
		return *x.StopLossTriggerMethod
	}
	return Default_ProtoManagerNewOrderReq_StopLossTriggerMethod
}

func (x *ProtoManagerNewOrderReq) GetSlippageInPoints() int32 {
	if x != nil && x.SlippageInPoints != nil {
		return *x.SlippageInPoints
	}
	return 0
}

func (x *ProtoManagerNewOrderReq) GetDesiredOpenTimestamp() int64 {
	if x != nil && x.DesiredOpenTimestamp != nil {
		return *x.DesiredOpenTimestamp
	}
	return 0
}

// Request to amend existing Order
type ProtoManagerAmendOrderReq struct {
	state                   protoimpl.MessageState   `protogen:"open.v1"`
	PayloadType             *ProtoCSPayloadType      `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=739" json:"payloadType,omitempty"`
	TraderId                *uint64                  `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"`                                                               // Unique identifier of the Trader within environment
	OrderId                 *int64                   `protobuf:"varint,3,req,name=orderId" json:"orderId,omitempty"`                                                                 // The unique ID of the Order
	TimeInForce             *ProtoTimeInForce        `protobuf:"varint,4,opt,name=timeInForce,enum=ProtoTimeInForce,def=2" json:"timeInForce,omitempty"`                             // The specific Order execution or expiration instruction - GOOD_TILL_DATE, GOOD_TILL_CANCEL, IMMEDIATE_OR_CANCEL, FILL_OR_KILL, MARKET_ON_OPEN. Default: GOOD_TILL_CANCEL
	LimitPrice              *float64                 `protobuf:"fixed64,5,opt,name=limitPrice" json:"limitPrice,omitempty"`                                                          // The limit price, can be specified for the LIMIT Order only
	StopPrice               *float64                 `protobuf:"fixed64,6,opt,name=stopPrice" json:"stopPrice,omitempty"`                                                            // The stop price, can be specified for the STOP and the STOP_LIMIT Orders only
	ExpirationTimestamp     *int64                   `protobuf:"varint,7,opt,name=expirationTimestamp" json:"expirationTimestamp,omitempty"`                                         // UNIX timestamp in milliseconds of the Order expiration time. Should be set for the Good Till Date Orders
	StopLoss                *float64                 `protobuf:"fixed64,9,opt,name=stopLoss" json:"stopLoss,omitempty"`                                                              // The absolute Stop Loss price (1.23456 for example). Not supported for the MARKER Orders
	TakeProfit              *float64                 `protobuf:"fixed64,10,opt,name=takeProfit" json:"takeProfit,omitempty"`                                                         // The absolute Take Profit price (1.23456 for example). Unsupported for the MARKER Orders
	Comment                 *string                  `protobuf:"bytes,13,opt,name=comment" json:"comment,omitempty"`                                                                 // User-specified comment. MaxLength = 512
	Channel                 *string                  `protobuf:"bytes,14,opt,name=channel" json:"channel,omitempty"`                                                                 // Technical field - to be filled with "ManagerAPI"
	RelativeStopLoss        *int64                   `protobuf:"varint,15,opt,name=relativeStopLoss" json:"relativeStopLoss,omitempty"`                                              // Relative Stop Loss that can be specified instead of the absolute as one. Specified in 1/100000 of unit of a price. For BUY stopLoss = entryPrice - relativeStopLoss, for SELL stopLoss = entryPrice + relativeStopLoss
	RelativeTakeProfit      *int64                   `protobuf:"varint,16,opt,name=relativeTakeProfit" json:"relativeTakeProfit,omitempty"`                                          // Relative Take Profit that can be specified instead of the absolute one. Specified in 1/100000 of unit of a price. For BUY takeProfit = entryPrice + relativeTakeProfit, for SELL takeProfit = entryPrice - relativeTakeProfit
	Volume                  *int64                   `protobuf:"varint,17,opt,name=volume" json:"volume,omitempty"`                                                                  // The volume represented in 0.01 of a unit (e.g. US$ 10.00 = 1000)
	MirroringCommissionRate *int32                   `protobuf:"varint,18,opt,name=mirroringCommissionRate" json:"mirroringCommissionRate,omitempty"`                                // Mirroring commission rate, used by Copy functionality
	InnerMirroringFee       *bool                    `protobuf:"varint,19,opt,name=innerMirroringFee" json:"innerMirroringFee,omitempty"`                                            // Mirroring Fee rate, used by Copy functionality
	TrailingStopLoss        *bool                    `protobuf:"varint,20,opt,name=trailingStopLoss" json:"trailingStopLoss,omitempty"`                                              // If TRUE then the Stop Loss is Trailing
	StopTriggerMethod       *ProtoOrderTriggerMethod `protobuf:"varint,21,opt,name=stopTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopTriggerMethod,omitempty"`         // Trigger Method for the STOP or the STOP_LIMIT pending Order
	StopLossTriggerMethod   *ProtoOrderTriggerMethod `protobuf:"varint,22,opt,name=stopLossTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopLossTriggerMethod,omitempty"` // Stop Trigger Method for SL/TP Order
	SlippageInPoints        *int32                   `protobuf:"varint,23,opt,name=slippageInPoints" json:"slippageInPoints,omitempty"`                                              // Slippage Distance for MARKET_RANGE and STOP_LIMIT Order
	DesiredOpenTimestamp    *int64                   `protobuf:"varint,24,opt,name=desiredOpenTimestamp" json:"desiredOpenTimestamp,omitempty"`                                      // UNIX timestamp in milliseconds used to set time of the opening for MARKET_ON_OPEN Orders
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for ProtoManagerAmendOrderReq fields.
const (
	Default_ProtoManagerAmendOrderReq_PayloadType           = ProtoCSPayloadType_PROTO_MANAGER_AMEND_ORDER_REQ
	Default_ProtoManagerAmendOrderReq_TimeInForce           = ProtoTimeInForce_GOOD_TILL_CANCEL
	Default_ProtoManagerAmendOrderReq_StopTriggerMethod     = ProtoOrderTriggerMethod_TRADE
	Default_ProtoManagerAmendOrderReq_StopLossTriggerMethod = ProtoOrderTriggerMethod_TRADE
)

func (x *ProtoManagerAmendOrderReq) Reset() {
	*x = ProtoManagerAmendOrderReq{}
	mi := &file_CSMessages_External_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerAmendOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerAmendOrderReq) ProtoMessage() {}

func (x *ProtoManagerAmendOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerAmendOrderReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerAmendOrderReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{118}
}

func (x *ProtoManagerAmendOrderReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerAmendOrderReq_PayloadType
}

func (x *ProtoManagerAmendOrderReq) GetTraderId() uint64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoManagerAmendOrderReq) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *ProtoManagerAmendOrderReq) GetTimeInForce() ProtoTimeInForce {
	if x != nil && x.TimeInForce != nil {
		return *x.TimeInForce
	}
	return Default_ProtoManagerAmendOrderReq_TimeInForce
}

func (x *ProtoManagerAmendOrderReq) GetLimitPrice() float64 {
	if x != nil && x.LimitPrice != nil {
		return *x.LimitPrice
	}
	return 0
}

func (x *ProtoManagerAmendOrderReq) GetStopPrice() float64 {
	if x != nil && x.StopPrice != nil {
		return *x.StopPrice
	}
	return 0
}

func (x *ProtoManagerAmendOrderReq) GetExpirationTimestamp() int64 {
	if x != nil && x.ExpirationTimestamp != nil {
		return *x.ExpirationTimestamp
	}
	return 0
}

func (x *ProtoManagerAmendOrderReq) GetStopLoss() float64 {
	if x != nil && x.StopLoss != nil {
		return *x.StopLoss
	}
	return 0
}

func (x *ProtoManagerAmendOrderReq) GetTakeProfit() float64 {
	if x != nil && x.TakeProfit != nil {
		return *x.TakeProfit
	}
	return 0
}

func (x *ProtoManagerAmendOrderReq) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoManagerAmendOrderReq) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ProtoManagerAmendOrderReq) GetRelativeStopLoss() int64 {
	if x != nil && x.RelativeStopLoss != nil {
		return *x.RelativeStopLoss
	}
	return 0
}

func (x *ProtoManagerAmendOrderReq) GetRelativeTakeProfit() int64 {
	if x != nil && x.RelativeTakeProfit != nil {
		return *x.RelativeTakeProfit
	}
	return 0
}

func (x *ProtoManagerAmendOrderReq) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoManagerAmendOrderReq) GetMirroringCommissionRate() int32 {
	if x != nil && x.MirroringCommissionRate != nil {
		return *x.MirroringCommissionRate
	}
	return 0
}

func (x *ProtoManagerAmendOrderReq) GetInnerMirroringFee() bool {
	if x != nil && x.InnerMirroringFee != nil {
		return *x.InnerMirroringFee
	}
	return false
}

func (x *ProtoManagerAmendOrderReq) GetTrailingStopLoss() bool {
	if x != nil && x.TrailingStopLoss != nil {
		return *x.TrailingStopLoss
	}
	return false
}

func (x *ProtoManagerAmendOrderReq) GetStopTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopTriggerMethod != nil {
		return *x.StopTriggerMethod
	}
	return Default_ProtoManagerAmendOrderReq_StopTriggerMethod
}

func (x *ProtoManagerAmendOrderReq) GetStopLossTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopLossTriggerMethod != nil {
		return *x.StopLossTriggerMethod
	}
	return Default_ProtoManagerAmendOrderReq_StopLossTriggerMethod
}

func (x *ProtoManagerAmendOrderReq) GetSlippageInPoints() int32 {
	if x != nil && x.SlippageInPoints != nil {
		return *x.SlippageInPoints
	}
	return 0
}

func (x *ProtoManagerAmendOrderReq) GetDesiredOpenTimestamp() int64 {
	if x != nil && x.DesiredOpenTimestamp != nil {
		return *x.DesiredOpenTimestamp
	}
	return 0
}

// Request to cancel an Order
type ProtoManagerCancelOrderReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=740" json:"payloadType,omitempty"`
	TraderId      *uint64                `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"` // Unique identifier of the Trader within environment
	OrderId       *int64                 `protobuf:"varint,3,req,name=orderId" json:"orderId,omitempty"`   // The unique ID of the Order
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerCancelOrderReq fields.
const (
	Default_ProtoManagerCancelOrderReq_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_CANCEL_ORDER_REQ
)

func (x *ProtoManagerCancelOrderReq) Reset() {
	*x = ProtoManagerCancelOrderReq{}
	mi := &file_CSMessages_External_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerCancelOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerCancelOrderReq) ProtoMessage() {}

func (x *ProtoManagerCancelOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerCancelOrderReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerCancelOrderReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{119}
}

func (x *ProtoManagerCancelOrderReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerCancelOrderReq_PayloadType
}

func (x *ProtoManagerCancelOrderReq) GetTraderId() uint64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoManagerCancelOrderReq) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

// Request to amend Position
type ProtoManagerAmendPositionReq struct {
	state                   protoimpl.MessageState   `protogen:"open.v1"`
	PayloadType             *ProtoCSPayloadType      `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=741" json:"payloadType,omitempty"`
	TraderId                *uint64                  `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"`                                                               // Unique identifier of the Trader within environment
	PositionId              *int64                   `protobuf:"varint,3,req,name=positionId" json:"positionId,omitempty"`                                                           // The unique ID of the Position
	StopLoss                *float64                 `protobuf:"fixed64,4,opt,name=stopLoss" json:"stopLoss,omitempty"`                                                              // The absolute Stop Loss price (1.23456 for example). Not supported for the MARKER Orders
	TakeProfit              *float64                 `protobuf:"fixed64,5,opt,name=takeProfit" json:"takeProfit,omitempty"`                                                          // The absolute Take Profit price (1.23456 for example). Unsupported for the MARKER Orders
	Channel                 *string                  `protobuf:"bytes,6,opt,name=channel" json:"channel,omitempty"`                                                                  // Technical field - to be filled with "ManagerAPI"
	MirroringCommissionRate *int32                   `protobuf:"varint,7,opt,name=mirroringCommissionRate" json:"mirroringCommissionRate,omitempty"`                                 // Technical field - should not be filled
	InnerMirroringFee       *bool                    `protobuf:"varint,8,opt,name=innerMirroringFee" json:"innerMirroringFee,omitempty"`                                             // Mirroring Fee rate, used by Copy functionality
	TrailingStopLoss        *bool                    `protobuf:"varint,9,opt,name=trailingStopLoss" json:"trailingStopLoss,omitempty"`                                               // If TRUE then the Stop Loss is Trailing
	StopLossTriggerMethod   *ProtoOrderTriggerMethod `protobuf:"varint,10,opt,name=stopLossTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopLossTriggerMethod,omitempty"` // Stop Trigger Method for SL/TP Order
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for ProtoManagerAmendPositionReq fields.
const (
	Default_ProtoManagerAmendPositionReq_PayloadType           = ProtoCSPayloadType_PROTO_MANAGER_AMEND_POSITION_REQ
	Default_ProtoManagerAmendPositionReq_StopLossTriggerMethod = ProtoOrderTriggerMethod_TRADE
)

func (x *ProtoManagerAmendPositionReq) Reset() {
	*x = ProtoManagerAmendPositionReq{}
	mi := &file_CSMessages_External_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerAmendPositionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerAmendPositionReq) ProtoMessage() {}

func (x *ProtoManagerAmendPositionReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerAmendPositionReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerAmendPositionReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{120}
}

func (x *ProtoManagerAmendPositionReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerAmendPositionReq_PayloadType
}

func (x *ProtoManagerAmendPositionReq) GetTraderId() uint64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoManagerAmendPositionReq) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoManagerAmendPositionReq) GetStopLoss() float64 {
	if x != nil && x.StopLoss != nil {
		return *x.StopLoss
	}
	return 0
}

func (x *ProtoManagerAmendPositionReq) GetTakeProfit() float64 {
	if x != nil && x.TakeProfit != nil {
		return *x.TakeProfit
	}
	return 0
}

func (x *ProtoManagerAmendPositionReq) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ProtoManagerAmendPositionReq) GetMirroringCommissionRate() int32 {
	if x != nil && x.MirroringCommissionRate != nil {
		return *x.MirroringCommissionRate
	}
	return 0
}

func (x *ProtoManagerAmendPositionReq) GetInnerMirroringFee() bool {
	if x != nil && x.InnerMirroringFee != nil {
		return *x.InnerMirroringFee
	}
	return false
}

func (x *ProtoManagerAmendPositionReq) GetTrailingStopLoss() bool {
	if x != nil && x.TrailingStopLoss != nil {
		return *x.TrailingStopLoss
	}
	return false
}

func (x *ProtoManagerAmendPositionReq) GetStopLossTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopLossTriggerMethod != nil {
		return *x.StopLossTriggerMethod
	}
	return Default_ProtoManagerAmendPositionReq_StopLossTriggerMethod
}

// Request to close Position
type ProtoManagerClosePositionReq struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	PayloadType             *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=742" json:"payloadType,omitempty"`
	TraderId                *uint64                `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"`                               // Unique identifier of the Trader within environment
	PositionId              *int64                 `protobuf:"varint,3,req,name=positionId" json:"positionId,omitempty"`                           // The unique ID of the Position to close
	Volume                  *int64                 `protobuf:"varint,4,req,name=volume" json:"volume,omitempty"`                                   // Volume to close, represented in 0.01 of a unit (e.g. cents)
	Channel                 *string                `protobuf:"bytes,7,opt,name=channel" json:"channel,omitempty"`                                  // Technical field - to be filled with "ManagerAPI"
	MirroringCommissionRate *int32                 `protobuf:"varint,8,opt,name=mirroringCommissionRate" json:"mirroringCommissionRate,omitempty"` // Mirroring commission rate, used by Copy functionality
	InnerMirroringFee       *bool                  `protobuf:"varint,9,opt,name=innerMirroringFee" json:"innerMirroringFee,omitempty"`             // Technical field used for setting mirroring commission, used by Copy functionality
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for ProtoManagerClosePositionReq fields.
const (
	Default_ProtoManagerClosePositionReq_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_CLOSE_POSITION_REQ
)

func (x *ProtoManagerClosePositionReq) Reset() {
	*x = ProtoManagerClosePositionReq{}
	mi := &file_CSMessages_External_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerClosePositionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerClosePositionReq) ProtoMessage() {}

func (x *ProtoManagerClosePositionReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerClosePositionReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerClosePositionReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{121}
}

func (x *ProtoManagerClosePositionReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerClosePositionReq_PayloadType
}

func (x *ProtoManagerClosePositionReq) GetTraderId() uint64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoManagerClosePositionReq) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoManagerClosePositionReq) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoManagerClosePositionReq) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ProtoManagerClosePositionReq) GetMirroringCommissionRate() int32 {
	if x != nil && x.MirroringCommissionRate != nil {
		return *x.MirroringCommissionRate
	}
	return 0
}

func (x *ProtoManagerClosePositionReq) GetInnerMirroringFee() bool {
	if x != nil && x.InnerMirroringFee != nil {
		return *x.InnerMirroringFee
	}
	return false
}

// Event that is sent when errors occur during the Order requests
type ProtoOrderErrorEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=138" json:"payloadType,omitempty"`
	ErrorCode     *string                `protobuf:"bytes,2,req,name=errorCode" json:"errorCode,omitempty"`     // The name of the ProtoErrorCode or the other custom ErrorCodes (e.g. ProtoCHErrorCode)
	OrderId       *int64                 `protobuf:"varint,3,opt,name=orderId" json:"orderId,omitempty"`        // The unique ID of the Order
	TraderId      *int64                 `protobuf:"varint,5,opt,name=traderId" json:"traderId,omitempty"`      // Unique identifier of the Trader within environment
	PositionId    *int64                 `protobuf:"varint,6,opt,name=positionId" json:"positionId,omitempty"`  // The unique ID of the Position
	Description   *string                `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"` // Error description
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoOrderErrorEvent fields.
const (
	Default_ProtoOrderErrorEvent_PayloadType = ProtoCSPayloadType_PROTO_ORDER_ERROR_EVENT
)

func (x *ProtoOrderErrorEvent) Reset() {
	*x = ProtoOrderErrorEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoOrderErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOrderErrorEvent) ProtoMessage() {}

func (x *ProtoOrderErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOrderErrorEvent.ProtoReflect.Descriptor instead.
func (*ProtoOrderErrorEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{122}
}

func (x *ProtoOrderErrorEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoOrderErrorEvent_PayloadType
}

func (x *ProtoOrderErrorEvent) GetErrorCode() string {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return ""
}

func (x *ProtoOrderErrorEvent) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *ProtoOrderErrorEvent) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoOrderErrorEvent) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoOrderErrorEvent) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// Event that is sent when Trader logs on the server
type ProtoTraderLogonEvent struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	PayloadType      *ProtoCSPayloadType     `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=730" json:"payloadType,omitempty"`
	TradeSessionInfo *ProtoTraderSessionInfo `protobuf:"bytes,2,req,name=tradeSessionInfo" json:"tradeSessionInfo,omitempty"` // Session info
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for ProtoTraderLogonEvent fields.
const (
	Default_ProtoTraderLogonEvent_PayloadType = ProtoCSPayloadType_PROTO_TRADER_LOGON_EVENT
)

func (x *ProtoTraderLogonEvent) Reset() {
	*x = ProtoTraderLogonEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTraderLogonEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTraderLogonEvent) ProtoMessage() {}

func (x *ProtoTraderLogonEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTraderLogonEvent.ProtoReflect.Descriptor instead.
func (*ProtoTraderLogonEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{123}
}

func (x *ProtoTraderLogonEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoTraderLogonEvent_PayloadType
}

func (x *ProtoTraderLogonEvent) GetTradeSessionInfo() *ProtoTraderSessionInfo {
	if x != nil {
		return x.TradeSessionInfo
	}
	return nil
}

// Event that is sent when Trader logs out of the server
type ProtoTraderLogoutEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=731" json:"payloadType,omitempty"`
	SessionId     *uint64                `protobuf:"varint,2,req,name=sessionId" json:"sessionId,omitempty"` // ID of the Trader's session
	TraderId      *uint64                `protobuf:"varint,3,opt,name=traderId" json:"traderId,omitempty"`   // Unique identifier of the Trader within environment
	IsOnline      *bool                  `protobuf:"varint,4,opt,name=isOnline" json:"isOnline,omitempty"`   // If TRUE then Trader is still online
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoTraderLogoutEvent fields.
const (
	Default_ProtoTraderLogoutEvent_PayloadType = ProtoCSPayloadType_PROTO_TRADER_LOGOUT_EVENT
)

func (x *ProtoTraderLogoutEvent) Reset() {
	*x = ProtoTraderLogoutEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTraderLogoutEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTraderLogoutEvent) ProtoMessage() {}

func (x *ProtoTraderLogoutEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTraderLogoutEvent.ProtoReflect.Descriptor instead.
func (*ProtoTraderLogoutEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{124}
}

func (x *ProtoTraderLogoutEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoTraderLogoutEvent_PayloadType
}

func (x *ProtoTraderLogoutEvent) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *ProtoTraderLogoutEvent) GetTraderId() uint64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoTraderLogoutEvent) GetIsOnline() bool {
	if x != nil && x.IsOnline != nil {
		return *x.IsOnline
	}
	return false
}

// Request to change Trader's Bonus
type ProtoManagerChangeBonusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=780" json:"payloadType,omitempty"`
	TraderId      *int64                 `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"`                      // Unique identifier of the Trader within environment
	Amount        *int64                 `protobuf:"varint,3,req,name=amount" json:"amount,omitempty"`                          // Amount of the Bonus operation
	Comment       *string                `protobuf:"bytes,4,opt,name=comment" json:"comment,omitempty"`                         // Comment seen by Manager
	Type          *ProtoChangeBonusType  `protobuf:"varint,5,req,name=type,enum=ProtoChangeBonusType" json:"type,omitempty"`    // Type of operation
	ExternalNote  *string                `protobuf:"bytes,6,opt,name=externalNote" json:"externalNote,omitempty"`               // Comment seen by Trader and Manager
	NewWay        *bool                  `protobuf:"varint,7,opt,name=newWay" json:"newWay,omitempty"`                          // Must be set to TRUE. If TRUE then for amount protocol value 1 is minimal value according to ProtoAsset.digits (=1/(10^digits)), e.g. if Trader's deposit Asset is JPY (digits=0), then value 1 equals to 1.00 JPY; if USD (digits=2) then 1 equals to 0.01 USD. If FALSE, then 1 protocol value=0.01
	Owner         *ProtoBonusOwner       `protobuf:"varint,8,opt,name=owner,enum=ProtoBonusOwner,def=0" json:"owner,omitempty"` // Who provided Bonus, Manager or Introducing Broker
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerChangeBonusReq fields.
const (
	Default_ProtoManagerChangeBonusReq_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_CHANGE_BONUS_REQ
	Default_ProtoManagerChangeBonusReq_Owner       = ProtoBonusOwner_MANAGER
)

func (x *ProtoManagerChangeBonusReq) Reset() {
	*x = ProtoManagerChangeBonusReq{}
	mi := &file_CSMessages_External_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerChangeBonusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerChangeBonusReq) ProtoMessage() {}

func (x *ProtoManagerChangeBonusReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerChangeBonusReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerChangeBonusReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{125}
}

func (x *ProtoManagerChangeBonusReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerChangeBonusReq_PayloadType
}

func (x *ProtoManagerChangeBonusReq) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoManagerChangeBonusReq) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *ProtoManagerChangeBonusReq) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoManagerChangeBonusReq) GetType() ProtoChangeBonusType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ProtoChangeBonusType_BONUS_DEPOSIT
}

func (x *ProtoManagerChangeBonusReq) GetExternalNote() string {
	if x != nil && x.ExternalNote != nil {
		return *x.ExternalNote
	}
	return ""
}

func (x *ProtoManagerChangeBonusReq) GetNewWay() bool {
	if x != nil && x.NewWay != nil {
		return *x.NewWay
	}
	return false
}

func (x *ProtoManagerChangeBonusReq) GetOwner() ProtoBonusOwner {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return Default_ProtoManagerChangeBonusReq_Owner
}

// Response for ProtoManagerChangeBonusReq
type ProtoManagerChangeBonusRes struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PayloadType    *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=781" json:"payloadType,omitempty"`
	TraderId       *int64                 `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"`             // Unique identifier of the Trader within environment
	BonusHistoryId *int64                 `protobuf:"varint,3,req,name=bonusHistoryId" json:"bonusHistoryId,omitempty"` // ID of Bonus History record
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for ProtoManagerChangeBonusRes fields.
const (
	Default_ProtoManagerChangeBonusRes_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_CHANGE_BONUS_RES
)

func (x *ProtoManagerChangeBonusRes) Reset() {
	*x = ProtoManagerChangeBonusRes{}
	mi := &file_CSMessages_External_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerChangeBonusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerChangeBonusRes) ProtoMessage() {}

func (x *ProtoManagerChangeBonusRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerChangeBonusRes.ProtoReflect.Descriptor instead.
func (*ProtoManagerChangeBonusRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{126}
}

func (x *ProtoManagerChangeBonusRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerChangeBonusRes_PayloadType
}

func (x *ProtoManagerChangeBonusRes) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoManagerChangeBonusRes) GetBonusHistoryId() int64 {
	if x != nil && x.BonusHistoryId != nil {
		return *x.BonusHistoryId
	}
	return 0
}

// Request for a list of Symbol categories available for a Trader
type ProtoSymbolCategoryListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=463" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoSymbolCategoryListReq fields.
const (
	Default_ProtoSymbolCategoryListReq_PayloadType = ProtoCSPayloadType_PROTO_SYMBOL_CATEGORY_LIST_REQ
)

func (x *ProtoSymbolCategoryListReq) Reset() {
	*x = ProtoSymbolCategoryListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSymbolCategoryListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSymbolCategoryListReq) ProtoMessage() {}

func (x *ProtoSymbolCategoryListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSymbolCategoryListReq.ProtoReflect.Descriptor instead.
func (*ProtoSymbolCategoryListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{127}
}

func (x *ProtoSymbolCategoryListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSymbolCategoryListReq_PayloadType
}

// Response for ProtoSymbolCategoryListReq
type ProtoSymbolCategoryListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=464" json:"payloadType,omitempty"`
	Categories    []*ProtoSymbolCategory `protobuf:"bytes,2,rep,name=categories" json:"categories,omitempty"` // List of Symbol categories
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoSymbolCategoryListRes fields.
const (
	Default_ProtoSymbolCategoryListRes_PayloadType = ProtoCSPayloadType_PROTO_SYMBOL_CATEGORY_LIST_RES
)

func (x *ProtoSymbolCategoryListRes) Reset() {
	*x = ProtoSymbolCategoryListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSymbolCategoryListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSymbolCategoryListRes) ProtoMessage() {}

func (x *ProtoSymbolCategoryListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSymbolCategoryListRes.ProtoReflect.Descriptor instead.
func (*ProtoSymbolCategoryListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{128}
}

func (x *ProtoSymbolCategoryListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSymbolCategoryListRes_PayloadType
}

func (x *ProtoSymbolCategoryListRes) GetCategories() []*ProtoSymbolCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

// Request for getting a conversion chain between two Assets that consists of several symbols. Use when no direct quote is available
type ProtoGetSymbolsForConversionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=864" json:"payloadType,omitempty"`
	FirstAssetId  *int64                 `protobuf:"varint,2,req,name=firstAssetId" json:"firstAssetId,omitempty"` // The ID of the first Asset in the conversation chain. e.g.: for EUR/USD the firstAssetId is EUR ID and lastAssetId is USD ID
	LastAssetId   *int64                 `protobuf:"varint,3,req,name=lastAssetId" json:"lastAssetId,omitempty"`   // The ID of the last Asset in the conversation chain. e.g.: for EUR/USD the firstAssetId is EUR ID and lastAssetId is USD ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoGetSymbolsForConversionReq fields.
const (
	Default_ProtoGetSymbolsForConversionReq_PayloadType = ProtoCSPayloadType_PROTO_SYMBOLS_FOR_CONVERSION_REQ
)

func (x *ProtoGetSymbolsForConversionReq) Reset() {
	*x = ProtoGetSymbolsForConversionReq{}
	mi := &file_CSMessages_External_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoGetSymbolsForConversionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGetSymbolsForConversionReq) ProtoMessage() {}

func (x *ProtoGetSymbolsForConversionReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGetSymbolsForConversionReq.ProtoReflect.Descriptor instead.
func (*ProtoGetSymbolsForConversionReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{129}
}

func (x *ProtoGetSymbolsForConversionReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoGetSymbolsForConversionReq_PayloadType
}

func (x *ProtoGetSymbolsForConversionReq) GetFirstAssetId() int64 {
	if x != nil && x.FirstAssetId != nil {
		return *x.FirstAssetId
	}
	return 0
}

func (x *ProtoGetSymbolsForConversionReq) GetLastAssetId() int64 {
	if x != nil && x.LastAssetId != nil {
		return *x.LastAssetId
	}
	return 0
}

// Response for ProtoGetSymbolsForConversionReq
type ProtoGetSymbolsForConversionRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=865" json:"payloadType,omitempty"`
	Symbol        []*ProtoLightSymbol    `protobuf:"bytes,2,rep,name=symbol" json:"symbol,omitempty"` // Symbol entities (with limited number of fields)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoGetSymbolsForConversionRes fields.
const (
	Default_ProtoGetSymbolsForConversionRes_PayloadType = ProtoCSPayloadType_PROTO_SYMBOLS_FOR_CONVERSION_RES
)

func (x *ProtoGetSymbolsForConversionRes) Reset() {
	*x = ProtoGetSymbolsForConversionRes{}
	mi := &file_CSMessages_External_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoGetSymbolsForConversionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGetSymbolsForConversionRes) ProtoMessage() {}

func (x *ProtoGetSymbolsForConversionRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGetSymbolsForConversionRes.ProtoReflect.Descriptor instead.
func (*ProtoGetSymbolsForConversionRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{130}
}

func (x *ProtoGetSymbolsForConversionRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoGetSymbolsForConversionRes_PayloadType
}

func (x *ProtoGetSymbolsForConversionRes) GetSymbol() []*ProtoLightSymbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

// Request to get Dealing Settings
type ProtoDealingSettingsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=816" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoDealingSettingsReq fields.
const (
	Default_ProtoDealingSettingsReq_PayloadType = ProtoCSPayloadType_PROTO_DEALING_SETTINGS_REQ
)

func (x *ProtoDealingSettingsReq) Reset() {
	*x = ProtoDealingSettingsReq{}
	mi := &file_CSMessages_External_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDealingSettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDealingSettingsReq) ProtoMessage() {}

func (x *ProtoDealingSettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDealingSettingsReq.ProtoReflect.Descriptor instead.
func (*ProtoDealingSettingsReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{131}
}

func (x *ProtoDealingSettingsReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoDealingSettingsReq_PayloadType
}

// Response for ProtoDealingSettingsReq
type ProtoDealingSettingsRes struct {
	state                   protoimpl.MessageState        `protogen:"open.v1"`
	PayloadType             *ProtoCSPayloadType           `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=817" json:"payloadType,omitempty"`
	AlwaysManualEnabled     *bool                         `protobuf:"varint,2,req,name=alwaysManualEnabled" json:"alwaysManualEnabled,omitempty"`                                           // Parameter which enables Symbol's alwaysManual parameter. So, if enableAlwaysManual=0 then alwaysManual is ignored
	MinGapTolerance         *int32                        `protobuf:"varint,3,req,name=minGapTolerance" json:"minGapTolerance,omitempty"`                                                   // Percentage multiplied by 10000: min = 0%, max = 100%, step = 0.0001%. 31234 value would mean 3.1234%. If abs(trigger price - order price)/trigger price*100% <= minGapTolerance then Order should be executed at the Order price. Valid for pending and protections
	MaxGapTolerance         *int32                        `protobuf:"varint,4,req,name=maxGapTolerance" json:"maxGapTolerance,omitempty"`                                                   // Percentage multiplied by 10000: min = 0%, max = 100%, step = 0.0001%. 31234 value would mean 3.1234%. If abs(trigger price - order price)/trigger price*100% >= maxGapTolerance then Order should be passed for the Dealer. Valid for pending and protections
	Symbol                  []*ProtoDealingSymbol         `protobuf:"bytes,5,rep,name=symbol" json:"symbol,omitempty"`                                                                      // Dealing Symbol entities
	ManualDealTimeout       *int64                        `protobuf:"varint,6,req,name=manualDealTimeout" json:"manualDealTimeout,omitempty"`                                               // After the specified timeout specified action will be carried out
	ManualDealTimeoutAction *ProtoManualDealTimeoutAction `protobuf:"varint,7,opt,name=manualDealTimeoutAction,enum=ProtoManualDealTimeoutAction" json:"manualDealTimeoutAction,omitempty"` // Parameter specifies what must happen with the Deal after manualDealTimeout - execution/rejection
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for ProtoDealingSettingsRes fields.
const (
	Default_ProtoDealingSettingsRes_PayloadType = ProtoCSPayloadType_PROTO_DEALING_SETTINGS_RES
)

func (x *ProtoDealingSettingsRes) Reset() {
	*x = ProtoDealingSettingsRes{}
	mi := &file_CSMessages_External_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDealingSettingsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDealingSettingsRes) ProtoMessage() {}

func (x *ProtoDealingSettingsRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDealingSettingsRes.ProtoReflect.Descriptor instead.
func (*ProtoDealingSettingsRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{132}
}

func (x *ProtoDealingSettingsRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoDealingSettingsRes_PayloadType
}

func (x *ProtoDealingSettingsRes) GetAlwaysManualEnabled() bool {
	if x != nil && x.AlwaysManualEnabled != nil {
		return *x.AlwaysManualEnabled
	}
	return false
}

func (x *ProtoDealingSettingsRes) GetMinGapTolerance() int32 {
	if x != nil && x.MinGapTolerance != nil {
		return *x.MinGapTolerance
	}
	return 0
}

func (x *ProtoDealingSettingsRes) GetMaxGapTolerance() int32 {
	if x != nil && x.MaxGapTolerance != nil {
		return *x.MaxGapTolerance
	}
	return 0
}

func (x *ProtoDealingSettingsRes) GetSymbol() []*ProtoDealingSymbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *ProtoDealingSettingsRes) GetManualDealTimeout() int64 {
	if x != nil && x.ManualDealTimeout != nil {
		return *x.ManualDealTimeout
	}
	return 0
}

func (x *ProtoDealingSettingsRes) GetManualDealTimeoutAction() ProtoManualDealTimeoutAction {
	if x != nil && x.ManualDealTimeoutAction != nil {
		return *x.ManualDealTimeoutAction
	}
	return ProtoManualDealTimeoutAction_REJECT_RESET
}

// Request to update Dealing Settings
type ProtoUpdateDealingSettingsReq struct {
	state                   protoimpl.MessageState        `protogen:"open.v1"`
	PayloadType             *ProtoCSPayloadType           `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=818" json:"payloadType,omitempty"`
	AlwaysManualEnabled     *bool                         `protobuf:"varint,2,opt,name=alwaysManualEnabled" json:"alwaysManualEnabled,omitempty"`                                           // Parameter which enables Symbol's alwaysManual parameter. So, if enableAlwaysManual=0 then alwaysManual is ignored
	MinGapTolerance         *int32                        `protobuf:"varint,3,opt,name=minGapTolerance" json:"minGapTolerance,omitempty"`                                                   // Percentage multiplied by 10000: min = 0%, max = 100%, step = 0.0001%. 31234 value would mean 3.1234%. If abs(trigger price - order price)/trigger price*100% <= minGapTolerance then Order should be executed at the Order price. Valid for pending and protections
	MaxGapTolerance         *int32                        `protobuf:"varint,4,opt,name=maxGapTolerance" json:"maxGapTolerance,omitempty"`                                                   // Percentage multiplied by 10000: min = 0%, max = 100%, step = 0.0001%. 31234 value would mean 3.1234%. If abs(trigger price - order price)/trigger price*100% >= maxGapTolerance then Order should be passed for the Dealer. Valid for pending and protections
	Symbol                  []*ProtoDealingSymbol         `protobuf:"bytes,5,rep,name=symbol" json:"symbol,omitempty"`                                                                      // Dealing Symbol entities
	ManualDealTimeout       *int64                        `protobuf:"varint,6,opt,name=manualDealTimeout" json:"manualDealTimeout,omitempty"`                                               // After the specified timeout specified action will be carried out
	ManualDealTimeoutAction *ProtoManualDealTimeoutAction `protobuf:"varint,7,opt,name=manualDealTimeoutAction,enum=ProtoManualDealTimeoutAction" json:"manualDealTimeoutAction,omitempty"` // Parameter specifies what must happen with the Deal after manualDealTimeout - execution/rejection
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for ProtoUpdateDealingSettingsReq fields.
const (
	Default_ProtoUpdateDealingSettingsReq_PayloadType = ProtoCSPayloadType_PROTO_UPDATE_DEALING_SETTINGS_REQ
)

func (x *ProtoUpdateDealingSettingsReq) Reset() {
	*x = ProtoUpdateDealingSettingsReq{}
	mi := &file_CSMessages_External_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoUpdateDealingSettingsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoUpdateDealingSettingsReq) ProtoMessage() {}

func (x *ProtoUpdateDealingSettingsReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoUpdateDealingSettingsReq.ProtoReflect.Descriptor instead.
func (*ProtoUpdateDealingSettingsReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{133}
}

func (x *ProtoUpdateDealingSettingsReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoUpdateDealingSettingsReq_PayloadType
}

func (x *ProtoUpdateDealingSettingsReq) GetAlwaysManualEnabled() bool {
	if x != nil && x.AlwaysManualEnabled != nil {
		return *x.AlwaysManualEnabled
	}
	return false
}

func (x *ProtoUpdateDealingSettingsReq) GetMinGapTolerance() int32 {
	if x != nil && x.MinGapTolerance != nil {
		return *x.MinGapTolerance
	}
	return 0
}

func (x *ProtoUpdateDealingSettingsReq) GetMaxGapTolerance() int32 {
	if x != nil && x.MaxGapTolerance != nil {
		return *x.MaxGapTolerance
	}
	return 0
}

func (x *ProtoUpdateDealingSettingsReq) GetSymbol() []*ProtoDealingSymbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *ProtoUpdateDealingSettingsReq) GetManualDealTimeout() int64 {
	if x != nil && x.ManualDealTimeout != nil {
		return *x.ManualDealTimeout
	}
	return 0
}

func (x *ProtoUpdateDealingSettingsReq) GetManualDealTimeoutAction() ProtoManualDealTimeoutAction {
	if x != nil && x.ManualDealTimeoutAction != nil {
		return *x.ManualDealTimeoutAction
	}
	return ProtoManualDealTimeoutAction_REJECT_RESET
}

// Response for ProtoUpdateDealingSettingsReq
type ProtoUpdateDealingSettingsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=819" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoUpdateDealingSettingsRes fields.
const (
	Default_ProtoUpdateDealingSettingsRes_PayloadType = ProtoCSPayloadType_PROTO_UPDATE_DEALING_SETTINGS_RES
)

func (x *ProtoUpdateDealingSettingsRes) Reset() {
	*x = ProtoUpdateDealingSettingsRes{}
	mi := &file_CSMessages_External_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoUpdateDealingSettingsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoUpdateDealingSettingsRes) ProtoMessage() {}

func (x *ProtoUpdateDealingSettingsRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoUpdateDealingSettingsRes.ProtoReflect.Descriptor instead.
func (*ProtoUpdateDealingSettingsRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{134}
}

func (x *ProtoUpdateDealingSettingsRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoUpdateDealingSettingsRes_PayloadType
}

// Event that is sent when Dealing Settings are changed
type ProtoDealingSettingsUpdatedEvent struct {
	state                   protoimpl.MessageState        `protogen:"open.v1"`
	PayloadType             *ProtoCSPayloadType           `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=843" json:"payloadType,omitempty"`
	AlwaysManualEnabled     *bool                         `protobuf:"varint,2,opt,name=alwaysManualEnabled" json:"alwaysManualEnabled,omitempty"`                                           // Parameter which enables Symbol's alwaysManual parameter. So, if enableAlwaysManual=0 then alwaysManual is ignored
	MinGapTolerance         *int32                        `protobuf:"varint,3,opt,name=minGapTolerance" json:"minGapTolerance,omitempty"`                                                   // Percentage multiplied by 10000: min = 0%, max = 100%, step = 0.0001%. 31234 value would mean 3.1234%.  If abs(trigger price - order price)/trigger price*100% <= minGapTolerance then Order should be executed at the Order price. Valid for pending and protections
	MaxGapTolerance         *int32                        `protobuf:"varint,4,opt,name=maxGapTolerance" json:"maxGapTolerance,omitempty"`                                                   // Percentage multiplied by 10000: min = 0%, max = 100%, step = 0.0001%. 31234 value would mean 3.1234%. If abs(trigger price - order price)/trigger price*100% >= maxGapTolerance then Order should be passed for the Dealer. Valid for pending and protections
	Symbol                  []*ProtoDealingSymbol         `protobuf:"bytes,5,rep,name=symbol" json:"symbol,omitempty"`                                                                      // Dealing Symbol entities
	ManualDealTimeout       *int64                        `protobuf:"varint,6,opt,name=manualDealTimeout" json:"manualDealTimeout,omitempty"`                                               // After the specified timeout specified action will be carried out
	ManualDealTimeoutAction *ProtoManualDealTimeoutAction `protobuf:"varint,7,opt,name=manualDealTimeoutAction,enum=ProtoManualDealTimeoutAction" json:"manualDealTimeoutAction,omitempty"` // Parameter specifies what must happen with the Deal after manualDealTimeout - execution/rejection
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for ProtoDealingSettingsUpdatedEvent fields.
const (
	Default_ProtoDealingSettingsUpdatedEvent_PayloadType = ProtoCSPayloadType_PROTO_DEALING_SETTINGS_UPDATED_EVENT
)

func (x *ProtoDealingSettingsUpdatedEvent) Reset() {
	*x = ProtoDealingSettingsUpdatedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDealingSettingsUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDealingSettingsUpdatedEvent) ProtoMessage() {}

func (x *ProtoDealingSettingsUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDealingSettingsUpdatedEvent.ProtoReflect.Descriptor instead.
func (*ProtoDealingSettingsUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{135}
}

func (x *ProtoDealingSettingsUpdatedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoDealingSettingsUpdatedEvent_PayloadType
}

func (x *ProtoDealingSettingsUpdatedEvent) GetAlwaysManualEnabled() bool {
	if x != nil && x.AlwaysManualEnabled != nil {
		return *x.AlwaysManualEnabled
	}
	return false
}

func (x *ProtoDealingSettingsUpdatedEvent) GetMinGapTolerance() int32 {
	if x != nil && x.MinGapTolerance != nil {
		return *x.MinGapTolerance
	}
	return 0
}

func (x *ProtoDealingSettingsUpdatedEvent) GetMaxGapTolerance() int32 {
	if x != nil && x.MaxGapTolerance != nil {
		return *x.MaxGapTolerance
	}
	return 0
}

func (x *ProtoDealingSettingsUpdatedEvent) GetSymbol() []*ProtoDealingSymbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *ProtoDealingSettingsUpdatedEvent) GetManualDealTimeout() int64 {
	if x != nil && x.ManualDealTimeout != nil {
		return *x.ManualDealTimeout
	}
	return 0
}

func (x *ProtoDealingSettingsUpdatedEvent) GetManualDealTimeoutAction() ProtoManualDealTimeoutAction {
	if x != nil && x.ManualDealTimeoutAction != nil {
		return *x.ManualDealTimeoutAction
	}
	return ProtoManualDealTimeoutAction_REJECT_RESET
}

// Request to get list of manually created Deals
type ProtoManualDealListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=821" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealListReq fields.
const (
	Default_ProtoManualDealListReq_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_LIST_REQ
)

func (x *ProtoManualDealListReq) Reset() {
	*x = ProtoManualDealListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealListReq) ProtoMessage() {}

func (x *ProtoManualDealListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealListReq.ProtoReflect.Descriptor instead.
func (*ProtoManualDealListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{136}
}

func (x *ProtoManualDealListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealListReq_PayloadType
}

// Response for ProtoManualDealListReq
type ProtoManualDealListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=822" json:"payloadType,omitempty"`
	Deal          []*ProtoManualDeal     `protobuf:"bytes,2,rep,name=deal" json:"deal,omitempty"` // Manual Deal entities
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealListRes fields.
const (
	Default_ProtoManualDealListRes_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_LIST_RES
)

func (x *ProtoManualDealListRes) Reset() {
	*x = ProtoManualDealListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealListRes) ProtoMessage() {}

func (x *ProtoManualDealListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealListRes.ProtoReflect.Descriptor instead.
func (*ProtoManualDealListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{137}
}

func (x *ProtoManualDealListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealListRes_PayloadType
}

func (x *ProtoManualDealListRes) GetDeal() []*ProtoManualDeal {
	if x != nil {
		return x.Deal
	}
	return nil
}

// Event that is sent when new Manual Deal is created
type ProtoNewManualDealEvent struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PayloadType        *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=820" json:"payloadType,omitempty"`
	TraderId           *int64                 `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"`                         // Unique identifier of the Trader within environment
	TraderLogin        *int64                 `protobuf:"varint,3,req,name=traderLogin" json:"traderLogin,omitempty"`                   // Unique identifier of the Trader within environment. Account can be identified either by traderLogin or by traderId
	TraderName         *string                `protobuf:"bytes,4,opt,name=traderName" json:"traderName,omitempty"`                      // Full name of the Trader
	PositionId         *int64                 `protobuf:"varint,6,req,name=positionId" json:"positionId,omitempty"`                     // Reference to the Position linked with the Manual Deal
	SymbolId           *int64                 `protobuf:"varint,7,req,name=symbolId" json:"symbolId,omitempty"`                         // ID of the Symbol
	OrderId            *int64                 `protobuf:"varint,8,req,name=orderId" json:"orderId,omitempty"`                           // ID of the Order
	OrderType          *ProtoOrderType        `protobuf:"varint,9,req,name=orderType,enum=ProtoOrderType" json:"orderType,omitempty"`   // Type of the Order
	TradeSide          *ProtoTradeSide        `protobuf:"varint,10,req,name=tradeSide,enum=ProtoTradeSide" json:"tradeSide,omitempty"`  // The trade direction - BUY or SELL
	BookType           *ProtoBookType         `protobuf:"varint,11,req,name=bookType,enum=ProtoBookType" json:"bookType,omitempty"`     // Type of Book (BOOK A or BOOK B)
	ClosingOrder       *bool                  `protobuf:"varint,12,req,name=closingOrder" json:"closingOrder,omitempty"`                // If TRUE then the Order is closing part of whole Position. Must have specified positionId
	GuaranteedStopLoss *bool                  `protobuf:"varint,13,req,name=guaranteedStopLoss" json:"guaranteedStopLoss,omitempty"`    // If TRUE then Position's stop loss is guaranteedStopLoss
	CheckTolerance     *bool                  `protobuf:"varint,14,req,name=checkTolerance" json:"checkTolerance,omitempty"`            // Tolerance check is a kind of check, which could give reject to the market Order if price of the market changed a lot
	LimitPrice         *int64                 `protobuf:"varint,15,opt,name=limitPrice" json:"limitPrice,omitempty"`                    // The Limit Price, can be specified for the LIMIT Order only
	DesiredVWAP        *int64                 `protobuf:"varint,16,opt,name=desiredVWAP" json:"desiredVWAP,omitempty"`                  // Price desired by the client as an execution price
	DealId             *int64                 `protobuf:"varint,17,req,name=dealId" json:"dealId,omitempty"`                            // ID of Deal (execution) entity
	Volume             *int64                 `protobuf:"varint,18,req,name=volume" json:"volume,omitempty"`                            // The volume represented in 0.01 of a unit (e.g. US$ 10.00 = 1000)
	Stake              *int64                 `protobuf:"varint,19,opt,name=stake" json:"stake,omitempty"`                              // Stake, filled under this Deal
	TriggerPrice       *int64                 `protobuf:"varint,20,opt,name=triggerPrice" json:"triggerPrice,omitempty"`                // Price which triggered the Deal
	GroupId            *int64                 `protobuf:"varint,21,req,name=groupId" json:"groupId,omitempty"`                          // ID of the group of the Trader
	Comment            *string                `protobuf:"bytes,22,opt,name=comment" json:"comment,omitempty"`                           // Comment
	Reason             *ProtoManualDealReason `protobuf:"varint,23,req,name=reason,enum=ProtoManualDealReason" json:"reason,omitempty"` // What caused the Manual Deal
	Timestamp          *int64                 `protobuf:"varint,24,req,name=timestamp" json:"timestamp,omitempty"`                      // UNIX timestamp in milliseconds of the Deal occurrence
	Markup             *int64                 `protobuf:"varint,25,req,name=markup" json:"markup,omitempty"`                            // Deal total markup (per Symbol + per Price Stream)
	StopOut            *bool                  `protobuf:"varint,26,opt,name=stopOut" json:"stopOut,omitempty"`                          // If TRUE then Deal was caused by Stop Out
	CloseWithPID       *int64                 `protobuf:"varint,27,opt,name=closeWithPID" json:"closeWithPID,omitempty"`                // Some number which may be used to aggregate Deals into Positions on the hedged accounts
	DepositAssetId     *int64                 `protobuf:"varint,28,req,name=depositAssetId" json:"depositAssetId,omitempty"`            // ID of the deposit Asset
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for ProtoNewManualDealEvent fields.
const (
	Default_ProtoNewManualDealEvent_PayloadType = ProtoCSPayloadType_PROTO_NEW_MANUAL_DEAL_EVENT
)

func (x *ProtoNewManualDealEvent) Reset() {
	*x = ProtoNewManualDealEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoNewManualDealEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoNewManualDealEvent) ProtoMessage() {}

func (x *ProtoNewManualDealEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoNewManualDealEvent.ProtoReflect.Descriptor instead.
func (*ProtoNewManualDealEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{138}
}

func (x *ProtoNewManualDealEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoNewManualDealEvent_PayloadType
}

func (x *ProtoNewManualDealEvent) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetTraderLogin() int64 {
	if x != nil && x.TraderLogin != nil {
		return *x.TraderLogin
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetTraderName() string {
	if x != nil && x.TraderName != nil {
		return *x.TraderName
	}
	return ""
}

func (x *ProtoNewManualDealEvent) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetOrderType() ProtoOrderType {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return ProtoOrderType_MARKET
}

func (x *ProtoNewManualDealEvent) GetTradeSide() ProtoTradeSide {
	if x != nil && x.TradeSide != nil {
		return *x.TradeSide
	}
	return ProtoTradeSide_BUY
}

func (x *ProtoNewManualDealEvent) GetBookType() ProtoBookType {
	if x != nil && x.BookType != nil {
		return *x.BookType
	}
	return ProtoBookType_BOOK_A
}

func (x *ProtoNewManualDealEvent) GetClosingOrder() bool {
	if x != nil && x.ClosingOrder != nil {
		return *x.ClosingOrder
	}
	return false
}

func (x *ProtoNewManualDealEvent) GetGuaranteedStopLoss() bool {
	if x != nil && x.GuaranteedStopLoss != nil {
		return *x.GuaranteedStopLoss
	}
	return false
}

func (x *ProtoNewManualDealEvent) GetCheckTolerance() bool {
	if x != nil && x.CheckTolerance != nil {
		return *x.CheckTolerance
	}
	return false
}

func (x *ProtoNewManualDealEvent) GetLimitPrice() int64 {
	if x != nil && x.LimitPrice != nil {
		return *x.LimitPrice
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetDesiredVWAP() int64 {
	if x != nil && x.DesiredVWAP != nil {
		return *x.DesiredVWAP
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetStake() int64 {
	if x != nil && x.Stake != nil {
		return *x.Stake
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetTriggerPrice() int64 {
	if x != nil && x.TriggerPrice != nil {
		return *x.TriggerPrice
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetGroupId() int64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoNewManualDealEvent) GetReason() ProtoManualDealReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ProtoManualDealReason_MANUAL_DEAL_REASON_ALWAYS_MANUAL
}

func (x *ProtoNewManualDealEvent) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetMarkup() int64 {
	if x != nil && x.Markup != nil {
		return *x.Markup
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetStopOut() bool {
	if x != nil && x.StopOut != nil {
		return *x.StopOut
	}
	return false
}

func (x *ProtoNewManualDealEvent) GetCloseWithPID() int64 {
	if x != nil && x.CloseWithPID != nil {
		return *x.CloseWithPID
	}
	return 0
}

func (x *ProtoNewManualDealEvent) GetDepositAssetId() int64 {
	if x != nil && x.DepositAssetId != nil {
		return *x.DepositAssetId
	}
	return 0
}

// Request to claim Manual Deal for procession
type ProtoManualDealClaimReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=823" json:"payloadType,omitempty"`
	DealId        *int64                 `protobuf:"varint,2,req,name=dealId" json:"dealId,omitempty"` // ID of Deal (execution) entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealClaimReq fields.
const (
	Default_ProtoManualDealClaimReq_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_CLAIM_REQ
)

func (x *ProtoManualDealClaimReq) Reset() {
	*x = ProtoManualDealClaimReq{}
	mi := &file_CSMessages_External_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealClaimReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealClaimReq) ProtoMessage() {}

func (x *ProtoManualDealClaimReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealClaimReq.ProtoReflect.Descriptor instead.
func (*ProtoManualDealClaimReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{139}
}

func (x *ProtoManualDealClaimReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealClaimReq_PayloadType
}

func (x *ProtoManualDealClaimReq) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

// Response for ProtoManualDealClaimReq
type ProtoManualDealClaimRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=824" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealClaimRes fields.
const (
	Default_ProtoManualDealClaimRes_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_CLAIM_RES
)

func (x *ProtoManualDealClaimRes) Reset() {
	*x = ProtoManualDealClaimRes{}
	mi := &file_CSMessages_External_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealClaimRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealClaimRes) ProtoMessage() {}

func (x *ProtoManualDealClaimRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealClaimRes.ProtoReflect.Descriptor instead.
func (*ProtoManualDealClaimRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{140}
}

func (x *ProtoManualDealClaimRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealClaimRes_PayloadType
}

// Event that is sent when new Manual Deal is claimed by Manager
type ProtoManualDealClaimedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=825" json:"payloadType,omitempty"`
	DealId        *int64                 `protobuf:"varint,2,req,name=dealId" json:"dealId,omitempty"`             // ID of the Manual Deal
	ManagerId     *int64                 `protobuf:"varint,3,req,name=managerId" json:"managerId,omitempty"`       // ID of the Manager
	ManagerLogin  *int64                 `protobuf:"varint,4,req,name=managerLogin" json:"managerLogin,omitempty"` // Login of the Manager
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealClaimedEvent fields.
const (
	Default_ProtoManualDealClaimedEvent_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_CLAIMED_EVENT
)

func (x *ProtoManualDealClaimedEvent) Reset() {
	*x = ProtoManualDealClaimedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealClaimedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealClaimedEvent) ProtoMessage() {}

func (x *ProtoManualDealClaimedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealClaimedEvent.ProtoReflect.Descriptor instead.
func (*ProtoManualDealClaimedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{141}
}

func (x *ProtoManualDealClaimedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealClaimedEvent_PayloadType
}

func (x *ProtoManualDealClaimedEvent) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

func (x *ProtoManualDealClaimedEvent) GetManagerId() int64 {
	if x != nil && x.ManagerId != nil {
		return *x.ManagerId
	}
	return 0
}

func (x *ProtoManualDealClaimedEvent) GetManagerLogin() int64 {
	if x != nil && x.ManagerLogin != nil {
		return *x.ManagerLogin
	}
	return 0
}

// Request to cancel claiming of Manual Deal
type ProtoManualDealUnclaimReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=826" json:"payloadType,omitempty"`
	DealId        *int64                 `protobuf:"varint,2,req,name=dealId" json:"dealId,omitempty"` // ID of the Manual Deal
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealUnclaimReq fields.
const (
	Default_ProtoManualDealUnclaimReq_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_UNCLAIM_REQ
)

func (x *ProtoManualDealUnclaimReq) Reset() {
	*x = ProtoManualDealUnclaimReq{}
	mi := &file_CSMessages_External_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealUnclaimReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealUnclaimReq) ProtoMessage() {}

func (x *ProtoManualDealUnclaimReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealUnclaimReq.ProtoReflect.Descriptor instead.
func (*ProtoManualDealUnclaimReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{142}
}

func (x *ProtoManualDealUnclaimReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealUnclaimReq_PayloadType
}

func (x *ProtoManualDealUnclaimReq) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

// Response for ProtoManualDealUmClaimReq
type ProtoManualDealUnclaimRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=827" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealUnclaimRes fields.
const (
	Default_ProtoManualDealUnclaimRes_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_UNCLAIM_RES
)

func (x *ProtoManualDealUnclaimRes) Reset() {
	*x = ProtoManualDealUnclaimRes{}
	mi := &file_CSMessages_External_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealUnclaimRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealUnclaimRes) ProtoMessage() {}

func (x *ProtoManualDealUnclaimRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealUnclaimRes.ProtoReflect.Descriptor instead.
func (*ProtoManualDealUnclaimRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{143}
}

func (x *ProtoManualDealUnclaimRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealUnclaimRes_PayloadType
}

// Event that is sent when new Manual Deal is unclaimed by manager
type ProtoManualDealUnclaimedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=828" json:"payloadType,omitempty"`
	DealId        *int64                 `protobuf:"varint,2,req,name=dealId" json:"dealId,omitempty"` // ID of the Manual Deal
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealUnclaimedEvent fields.
const (
	Default_ProtoManualDealUnclaimedEvent_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_UNCLAIMED_EVENT
)

func (x *ProtoManualDealUnclaimedEvent) Reset() {
	*x = ProtoManualDealUnclaimedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealUnclaimedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealUnclaimedEvent) ProtoMessage() {}

func (x *ProtoManualDealUnclaimedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealUnclaimedEvent.ProtoReflect.Descriptor instead.
func (*ProtoManualDealUnclaimedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{144}
}

func (x *ProtoManualDealUnclaimedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealUnclaimedEvent_PayloadType
}

func (x *ProtoManualDealUnclaimedEvent) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

// Request to not execute Manual Deal. Order returns to the normal condition as if it had not been triggered
type ProtoManualDealResetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=829" json:"payloadType,omitempty"`
	DealId        *int64                 `protobuf:"varint,2,req,name=dealId" json:"dealId,omitempty"` // ID of the Manual Deal
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealResetReq fields.
const (
	Default_ProtoManualDealResetReq_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_RESET_REQ
)

func (x *ProtoManualDealResetReq) Reset() {
	*x = ProtoManualDealResetReq{}
	mi := &file_CSMessages_External_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealResetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealResetReq) ProtoMessage() {}

func (x *ProtoManualDealResetReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealResetReq.ProtoReflect.Descriptor instead.
func (*ProtoManualDealResetReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{145}
}

func (x *ProtoManualDealResetReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealResetReq_PayloadType
}

func (x *ProtoManualDealResetReq) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

// Response for ProtoManualDealResetReq
type ProtoManualDealResetRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=830" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealResetRes fields.
const (
	Default_ProtoManualDealResetRes_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_RESET_RES
)

func (x *ProtoManualDealResetRes) Reset() {
	*x = ProtoManualDealResetRes{}
	mi := &file_CSMessages_External_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealResetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealResetRes) ProtoMessage() {}

func (x *ProtoManualDealResetRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealResetRes.ProtoReflect.Descriptor instead.
func (*ProtoManualDealResetRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{146}
}

func (x *ProtoManualDealResetRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealResetRes_PayloadType
}

// Request to reject Manual Deal
type ProtoManualDealRejectReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=831" json:"payloadType,omitempty"`
	DealId        *int64                 `protobuf:"varint,2,req,name=dealId" json:"dealId,omitempty"`            // ID of the Manual Deal
	RejectReason  *string                `protobuf:"bytes,3,opt,name=rejectReason" json:"rejectReason,omitempty"` // Reason for rejection of the Deal
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealRejectReq fields.
const (
	Default_ProtoManualDealRejectReq_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_REJECT_REQ
)

func (x *ProtoManualDealRejectReq) Reset() {
	*x = ProtoManualDealRejectReq{}
	mi := &file_CSMessages_External_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealRejectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealRejectReq) ProtoMessage() {}

func (x *ProtoManualDealRejectReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealRejectReq.ProtoReflect.Descriptor instead.
func (*ProtoManualDealRejectReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{147}
}

func (x *ProtoManualDealRejectReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealRejectReq_PayloadType
}

func (x *ProtoManualDealRejectReq) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

func (x *ProtoManualDealRejectReq) GetRejectReason() string {
	if x != nil && x.RejectReason != nil {
		return *x.RejectReason
	}
	return ""
}

// Response for ProtoManualDealRejectReq
type ProtoManualDealRejectRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=832" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealRejectRes fields.
const (
	Default_ProtoManualDealRejectRes_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_REJECT_RES
)

func (x *ProtoManualDealRejectRes) Reset() {
	*x = ProtoManualDealRejectRes{}
	mi := &file_CSMessages_External_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealRejectRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealRejectRes) ProtoMessage() {}

func (x *ProtoManualDealRejectRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealRejectRes.ProtoReflect.Descriptor instead.
func (*ProtoManualDealRejectRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{148}
}

func (x *ProtoManualDealRejectRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealRejectRes_PayloadType
}

// Request to execute Manual Deal
type ProtoManualDealExecuteReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=833" json:"payloadType,omitempty"`
	DealId        *int64                 `protobuf:"varint,2,req,name=dealId" json:"dealId,omitempty"` // ID of the Manual Deal
	Price         *int64                 `protobuf:"varint,3,req,name=price" json:"price,omitempty"`   // Price of the Deal
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealExecuteReq fields.
const (
	Default_ProtoManualDealExecuteReq_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_EXECUTE_REQ
)

func (x *ProtoManualDealExecuteReq) Reset() {
	*x = ProtoManualDealExecuteReq{}
	mi := &file_CSMessages_External_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealExecuteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealExecuteReq) ProtoMessage() {}

func (x *ProtoManualDealExecuteReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealExecuteReq.ProtoReflect.Descriptor instead.
func (*ProtoManualDealExecuteReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{149}
}

func (x *ProtoManualDealExecuteReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealExecuteReq_PayloadType
}

func (x *ProtoManualDealExecuteReq) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

func (x *ProtoManualDealExecuteReq) GetPrice() int64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

// Response for ProtoManualDealExecuteReq
type ProtoManualDealExecuteRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=834" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealExecuteRes fields.
const (
	Default_ProtoManualDealExecuteRes_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_EXECUTE_RES
)

func (x *ProtoManualDealExecuteRes) Reset() {
	*x = ProtoManualDealExecuteRes{}
	mi := &file_CSMessages_External_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealExecuteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealExecuteRes) ProtoMessage() {}

func (x *ProtoManualDealExecuteRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealExecuteRes.ProtoReflect.Descriptor instead.
func (*ProtoManualDealExecuteRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{150}
}

func (x *ProtoManualDealExecuteRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealExecuteRes_PayloadType
}

// Event that is sent when Manual Deal processing is finished
type ProtoManualDealProcessedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=835" json:"payloadType,omitempty"`
	DealId        *int64                 `protobuf:"varint,2,req,name=dealId" json:"dealId,omitempty"` // ID of the Manual Deal
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManualDealProcessedEvent fields.
const (
	Default_ProtoManualDealProcessedEvent_PayloadType = ProtoCSPayloadType_PROTO_MANUAL_DEAL_PROCESSED_EVENT
)

func (x *ProtoManualDealProcessedEvent) Reset() {
	*x = ProtoManualDealProcessedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDealProcessedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDealProcessedEvent) ProtoMessage() {}

func (x *ProtoManualDealProcessedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDealProcessedEvent.ProtoReflect.Descriptor instead.
func (*ProtoManualDealProcessedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{151}
}

func (x *ProtoManualDealProcessedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManualDealProcessedEvent_PayloadType
}

func (x *ProtoManualDealProcessedEvent) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

// Request to created/update/delete Max AutoExecution Size Profile. Profile is a set of settings which is applied within specific Groups
type ProtoCrudMaxAutoExecutionSizeProfileReq struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType               `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=883" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation               `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Created/update_diff/delete operation. Update_diff means that only changed parameters are sent in request (other parameters stay unchanged)
	Profile       *ProtoMaxAutoExecutionSizeProfile `protobuf:"bytes,3,req,name=profile" json:"profile,omitempty"`                              // Max AutoExecution Size Profile entity, containing settings for maxAutoExecutionSize for Symbol
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudMaxAutoExecutionSizeProfileReq fields.
const (
	Default_ProtoCrudMaxAutoExecutionSizeProfileReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_REQ
)

func (x *ProtoCrudMaxAutoExecutionSizeProfileReq) Reset() {
	*x = ProtoCrudMaxAutoExecutionSizeProfileReq{}
	mi := &file_CSMessages_External_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudMaxAutoExecutionSizeProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudMaxAutoExecutionSizeProfileReq) ProtoMessage() {}

func (x *ProtoCrudMaxAutoExecutionSizeProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudMaxAutoExecutionSizeProfileReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudMaxAutoExecutionSizeProfileReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{152}
}

func (x *ProtoCrudMaxAutoExecutionSizeProfileReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudMaxAutoExecutionSizeProfileReq_PayloadType
}

func (x *ProtoCrudMaxAutoExecutionSizeProfileReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudMaxAutoExecutionSizeProfileReq) GetProfile() *ProtoMaxAutoExecutionSizeProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Response for ProtoCrudMaxAutoExecutionSizeProfileReq
type ProtoCrudMaxAutoExecutionSizeProfileRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=884" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Created/update_diff/delete operation
	ProfileId     *int64                 `protobuf:"varint,3,req,name=profileId" json:"profileId,omitempty"`                         // Modified Profile's ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudMaxAutoExecutionSizeProfileRes fields.
const (
	Default_ProtoCrudMaxAutoExecutionSizeProfileRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_RES
)

func (x *ProtoCrudMaxAutoExecutionSizeProfileRes) Reset() {
	*x = ProtoCrudMaxAutoExecutionSizeProfileRes{}
	mi := &file_CSMessages_External_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudMaxAutoExecutionSizeProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudMaxAutoExecutionSizeProfileRes) ProtoMessage() {}

func (x *ProtoCrudMaxAutoExecutionSizeProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudMaxAutoExecutionSizeProfileRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudMaxAutoExecutionSizeProfileRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{153}
}

func (x *ProtoCrudMaxAutoExecutionSizeProfileRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudMaxAutoExecutionSizeProfileRes_PayloadType
}

func (x *ProtoCrudMaxAutoExecutionSizeProfileRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudMaxAutoExecutionSizeProfileRes) GetProfileId() int64 {
	if x != nil && x.ProfileId != nil {
		return *x.ProfileId
	}
	return 0
}

// Event that is sent when Max AutoExecution Size Profile is created/updated/deleted. Profile is a set of settings which is applied within specific Groups
type ProtoMaxAutoExecutionSizeProfileChangedEvent struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType               `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=885" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation               `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Created/update_diff/delete operation. Update_diff means that only changed parameters are sent in request (other parameters stay unchanged)
	Profile       *ProtoMaxAutoExecutionSizeProfile `protobuf:"bytes,3,req,name=profile" json:"profile,omitempty"`                              // Modified AutoExecution Size Profile entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoMaxAutoExecutionSizeProfileChangedEvent fields.
const (
	Default_ProtoMaxAutoExecutionSizeProfileChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_CHANGED_EVENT
)

func (x *ProtoMaxAutoExecutionSizeProfileChangedEvent) Reset() {
	*x = ProtoMaxAutoExecutionSizeProfileChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoMaxAutoExecutionSizeProfileChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMaxAutoExecutionSizeProfileChangedEvent) ProtoMessage() {}

func (x *ProtoMaxAutoExecutionSizeProfileChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMaxAutoExecutionSizeProfileChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoMaxAutoExecutionSizeProfileChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{154}
}

func (x *ProtoMaxAutoExecutionSizeProfileChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoMaxAutoExecutionSizeProfileChangedEvent_PayloadType
}

func (x *ProtoMaxAutoExecutionSizeProfileChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoMaxAutoExecutionSizeProfileChangedEvent) GetProfile() *ProtoMaxAutoExecutionSizeProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Request to get list of Max AutoExecution Size Profiles. Profile is a set of settings which is applied within specific Groups
type ProtoMaxAutoExecutionSizeProfileListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=886" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoMaxAutoExecutionSizeProfileListReq fields.
const (
	Default_ProtoMaxAutoExecutionSizeProfileListReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_LIST_REQ
)

func (x *ProtoMaxAutoExecutionSizeProfileListReq) Reset() {
	*x = ProtoMaxAutoExecutionSizeProfileListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoMaxAutoExecutionSizeProfileListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMaxAutoExecutionSizeProfileListReq) ProtoMessage() {}

func (x *ProtoMaxAutoExecutionSizeProfileListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMaxAutoExecutionSizeProfileListReq.ProtoReflect.Descriptor instead.
func (*ProtoMaxAutoExecutionSizeProfileListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{155}
}

func (x *ProtoMaxAutoExecutionSizeProfileListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoMaxAutoExecutionSizeProfileListReq_PayloadType
}

// Response for ProtoMaxAutoExecutionSizeProfileListReq
type ProtoMaxAutoExecutionSizeProfileListRes struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType                 `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=887" json:"payloadType,omitempty"`
	Profile       []*ProtoMaxAutoExecutionSizeProfile `protobuf:"bytes,2,rep,name=profile" json:"profile,omitempty"` // List of Max AutoExecution Size Profiles
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoMaxAutoExecutionSizeProfileListRes fields.
const (
	Default_ProtoMaxAutoExecutionSizeProfileListRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_LIST_RES
)

func (x *ProtoMaxAutoExecutionSizeProfileListRes) Reset() {
	*x = ProtoMaxAutoExecutionSizeProfileListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoMaxAutoExecutionSizeProfileListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMaxAutoExecutionSizeProfileListRes) ProtoMessage() {}

func (x *ProtoMaxAutoExecutionSizeProfileListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMaxAutoExecutionSizeProfileListRes.ProtoReflect.Descriptor instead.
func (*ProtoMaxAutoExecutionSizeProfileListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{156}
}

func (x *ProtoMaxAutoExecutionSizeProfileListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoMaxAutoExecutionSizeProfileListRes_PayloadType
}

func (x *ProtoMaxAutoExecutionSizeProfileListRes) GetProfile() []*ProtoMaxAutoExecutionSizeProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Request to create a new Order
type ProtoDealerNewOrderReq struct {
	state                 protoimpl.MessageState   `protogen:"open.v1"`
	PayloadType           *ProtoCSPayloadType      `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=836" json:"payloadType,omitempty"`
	TraderId              *uint64                  `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"`                                                               // Unique identifier of the Trader within environment
	SymbolId              *int64                   `protobuf:"varint,3,req,name=symbolId" json:"symbolId,omitempty"`                                                               // The unique identifier of the Symbol in specific server environment within cTrader platform
	OrderType             *ProtoOrderType          `protobuf:"varint,4,req,name=orderType,enum=ProtoOrderType" json:"orderType,omitempty"`                                         // The type of an Order - MARKET, LIMIT, STOP, MARKET_RANGE, STOP_LIMIT
	TradeSide             *ProtoTradeSide          `protobuf:"varint,5,req,name=tradeSide,enum=ProtoTradeSide" json:"tradeSide,omitempty"`                                         // The trade direction - BUY or SELL
	Volume                *int64                   `protobuf:"varint,6,req,name=volume" json:"volume,omitempty"`                                                                   // The volume represented in 0.01 of a unit (e.g. US$ 10.00 = 1000)
	LimitPrice            *float64                 `protobuf:"fixed64,7,opt,name=limitPrice" json:"limitPrice,omitempty"`                                                          // The limit price, can be specified for the LIMIT Order only
	StopPrice             *float64                 `protobuf:"fixed64,8,opt,name=stopPrice" json:"stopPrice,omitempty"`                                                            // The stop price, can be specified for the STOP and the STOP_LIMIT Orders only
	TimeInForce           *ProtoTimeInForce        `protobuf:"varint,9,opt,name=timeInForce,enum=ProtoTimeInForce,def=2" json:"timeInForce,omitempty"`                             // The specific Order execution or expiration instruction - GOOD_TILL_DATE, GOOD_TILL_CANCEL, IMMEDIATE_OR_CANCEL, FILL_OR_KILL, MARKET_ON_OPEN. Default: GOOD_TILL_CANCEL
	ExpirationTimestamp   *int64                   `protobuf:"varint,10,opt,name=expirationTimestamp" json:"expirationTimestamp,omitempty"`                                        // UNIX timestamp in milliseconds or the Order expiration. Should be set for the Good Till Date Orders
	StopLoss              *float64                 `protobuf:"fixed64,12,opt,name=stopLoss" json:"stopLoss,omitempty"`                                                             // The absolute Stop Loss price (1.23456 for example). Not supported for the MARKER Orders
	TakeProfit            *float64                 `protobuf:"fixed64,13,opt,name=takeProfit" json:"takeProfit,omitempty"`                                                         // The absolute Take Profit price (1.23456 for example). Unsupported for the MARKER Orders
	Comment               *string                  `protobuf:"bytes,14,opt,name=comment" json:"comment,omitempty"`                                                                 // User-specified comment. MaxLength = 512
	Method                *string                  `protobuf:"bytes,15,opt,name=method" json:"method,omitempty"`                                                                   // Technical field - to be filled with "ManagerAPI"
	BaseSlippagePrice     *float64                 `protobuf:"fixed64,16,opt,name=baseSlippagePrice" json:"baseSlippagePrice,omitempty"`                                           // Base price to calculate relative slippage price for MARKET_RANGE Order
	Label                 *string                  `protobuf:"bytes,18,opt,name=label" json:"label,omitempty"`                                                                     // User-specified label. MaxLength = 100
	Channel               *string                  `protobuf:"bytes,19,opt,name=channel" json:"channel,omitempty"`                                                                 // Technical field - to be filled with "ManagerAPI"
	PositionId            *int64                   `protobuf:"varint,20,opt,name=positionId" json:"positionId,omitempty"`                                                          // Reference to the existing Position if the Order is intended to modify it
	ClientOrderId         *string                  `protobuf:"bytes,21,opt,name=clientOrderId" json:"clientOrderId,omitempty"`                                                     // Optional user-specific clientOrderId (similar to FIX ClOrderID). MaxLength = 50
	ClientToken           *string                  `protobuf:"bytes,22,opt,name=clientToken" json:"clientToken,omitempty"`                                                         // Deprecated field, should not be used
	RelativeStopLoss      *int64                   `protobuf:"varint,23,opt,name=relativeStopLoss" json:"relativeStopLoss,omitempty"`                                              // Relative Stop Loss that can be specified instead of the absolute as one. Specified in 1/100000 of unit of a price. For BUY stopLoss = entryPrice - relativeStopLoss, for SELL stopLoss = entryPrice + relativeStopLoss
	RelativeTakeProfit    *int64                   `protobuf:"varint,24,opt,name=relativeTakeProfit" json:"relativeTakeProfit,omitempty"`                                          // Relative Take Profit that can be specified instead of the absolute one. Specified in 1/100000 of unit of a price. For BUY takeProfit = entryPrice + relativeTakeProfit, for SELL takeProfit = entryPrice - relativeTakeProfit
	Stake                 *int64                   `protobuf:"varint,25,opt,name=stake" json:"stake,omitempty"`                                                                    // Stake for Spread Betting
	DesiredVWAP           *float64                 `protobuf:"fixed64,26,opt,name=desiredVWAP" json:"desiredVWAP,omitempty"`                                                       // Price desired by the client as an execution price
	GuaranteedStopLoss    *bool                    `protobuf:"varint,27,opt,name=guaranteedStopLoss" json:"guaranteedStopLoss,omitempty"`                                          // If TRUE then the Stop Loss is guaranteed. Available for the French Risk or the Guaranteed Stop Loss Accounts
	CheckTolerance        *bool                    `protobuf:"varint,28,opt,name=checkTolerance" json:"checkTolerance,omitempty"`                                                  // If TRUE then tolerance check is applied and Order may be rejected due to significant price change. Applied only for B-book Orders
	IgnoreValidation      *bool                    `protobuf:"varint,29,opt,name=ignoreValidation" json:"ignoreValidation,omitempty"`                                              // If TRUE then a lot of server validations should be skipped: Symbol and Trader restrictions (market is closed, short selling disabled, account is disabled, GSL is not allowed, min\max volume, protection distances, etc.)
	TrailingStopLoss      *bool                    `protobuf:"varint,30,opt,name=trailingStopLoss" json:"trailingStopLoss,omitempty"`                                              // If TRUE then the Trailing Stop Loss is applied
	StopTriggerMethod     *ProtoOrderTriggerMethod `protobuf:"varint,31,opt,name=stopTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopTriggerMethod,omitempty"`         // Trigger method for the STOP or the STOP_LIMIT pending Order
	StopLossTriggerMethod *ProtoOrderTriggerMethod `protobuf:"varint,32,opt,name=stopLossTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopLossTriggerMethod,omitempty"` // Stop trigger method for SL/TP Order
	SlippageInPoints      *int32                   `protobuf:"varint,33,opt,name=slippageInPoints" json:"slippageInPoints,omitempty"`                                              // Slippage Distance for MARKET_RANGE and STOP_LIMIT Order
	DesiredOpenTimestamp  *int64                   `protobuf:"varint,34,opt,name=desiredOpenTimestamp" json:"desiredOpenTimestamp,omitempty"`                                      // UNIX timestamp in milliseconds used to set time of the opening for MARKET_ON_OPEN Orders
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for ProtoDealerNewOrderReq fields.
const (
	Default_ProtoDealerNewOrderReq_PayloadType           = ProtoCSPayloadType_PROTO_DEALER_NEW_ORDER_REQ
	Default_ProtoDealerNewOrderReq_TimeInForce           = ProtoTimeInForce_GOOD_TILL_CANCEL
	Default_ProtoDealerNewOrderReq_StopTriggerMethod     = ProtoOrderTriggerMethod_TRADE
	Default_ProtoDealerNewOrderReq_StopLossTriggerMethod = ProtoOrderTriggerMethod_TRADE
)

func (x *ProtoDealerNewOrderReq) Reset() {
	*x = ProtoDealerNewOrderReq{}
	mi := &file_CSMessages_External_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDealerNewOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDealerNewOrderReq) ProtoMessage() {}

func (x *ProtoDealerNewOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDealerNewOrderReq.ProtoReflect.Descriptor instead.
func (*ProtoDealerNewOrderReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{157}
}

func (x *ProtoDealerNewOrderReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoDealerNewOrderReq_PayloadType
}

func (x *ProtoDealerNewOrderReq) GetTraderId() uint64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetOrderType() ProtoOrderType {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return ProtoOrderType_MARKET
}

func (x *ProtoDealerNewOrderReq) GetTradeSide() ProtoTradeSide {
	if x != nil && x.TradeSide != nil {
		return *x.TradeSide
	}
	return ProtoTradeSide_BUY
}

func (x *ProtoDealerNewOrderReq) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetLimitPrice() float64 {
	if x != nil && x.LimitPrice != nil {
		return *x.LimitPrice
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetStopPrice() float64 {
	if x != nil && x.StopPrice != nil {
		return *x.StopPrice
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetTimeInForce() ProtoTimeInForce {
	if x != nil && x.TimeInForce != nil {
		return *x.TimeInForce
	}
	return Default_ProtoDealerNewOrderReq_TimeInForce
}

func (x *ProtoDealerNewOrderReq) GetExpirationTimestamp() int64 {
	if x != nil && x.ExpirationTimestamp != nil {
		return *x.ExpirationTimestamp
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetStopLoss() float64 {
	if x != nil && x.StopLoss != nil {
		return *x.StopLoss
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetTakeProfit() float64 {
	if x != nil && x.TakeProfit != nil {
		return *x.TakeProfit
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoDealerNewOrderReq) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *ProtoDealerNewOrderReq) GetBaseSlippagePrice() float64 {
	if x != nil && x.BaseSlippagePrice != nil {
		return *x.BaseSlippagePrice
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ProtoDealerNewOrderReq) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ProtoDealerNewOrderReq) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetClientOrderId() string {
	if x != nil && x.ClientOrderId != nil {
		return *x.ClientOrderId
	}
	return ""
}

func (x *ProtoDealerNewOrderReq) GetClientToken() string {
	if x != nil && x.ClientToken != nil {
		return *x.ClientToken
	}
	return ""
}

func (x *ProtoDealerNewOrderReq) GetRelativeStopLoss() int64 {
	if x != nil && x.RelativeStopLoss != nil {
		return *x.RelativeStopLoss
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetRelativeTakeProfit() int64 {
	if x != nil && x.RelativeTakeProfit != nil {
		return *x.RelativeTakeProfit
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetStake() int64 {
	if x != nil && x.Stake != nil {
		return *x.Stake
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetDesiredVWAP() float64 {
	if x != nil && x.DesiredVWAP != nil {
		return *x.DesiredVWAP
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetGuaranteedStopLoss() bool {
	if x != nil && x.GuaranteedStopLoss != nil {
		return *x.GuaranteedStopLoss
	}
	return false
}

func (x *ProtoDealerNewOrderReq) GetCheckTolerance() bool {
	if x != nil && x.CheckTolerance != nil {
		return *x.CheckTolerance
	}
	return false
}

func (x *ProtoDealerNewOrderReq) GetIgnoreValidation() bool {
	if x != nil && x.IgnoreValidation != nil {
		return *x.IgnoreValidation
	}
	return false
}

func (x *ProtoDealerNewOrderReq) GetTrailingStopLoss() bool {
	if x != nil && x.TrailingStopLoss != nil {
		return *x.TrailingStopLoss
	}
	return false
}

func (x *ProtoDealerNewOrderReq) GetStopTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopTriggerMethod != nil {
		return *x.StopTriggerMethod
	}
	return Default_ProtoDealerNewOrderReq_StopTriggerMethod
}

func (x *ProtoDealerNewOrderReq) GetStopLossTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopLossTriggerMethod != nil {
		return *x.StopLossTriggerMethod
	}
	return Default_ProtoDealerNewOrderReq_StopLossTriggerMethod
}

func (x *ProtoDealerNewOrderReq) GetSlippageInPoints() int32 {
	if x != nil && x.SlippageInPoints != nil {
		return *x.SlippageInPoints
	}
	return 0
}

func (x *ProtoDealerNewOrderReq) GetDesiredOpenTimestamp() int64 {
	if x != nil && x.DesiredOpenTimestamp != nil {
		return *x.DesiredOpenTimestamp
	}
	return 0
}

// Request to amend an Order
type ProtoDealerAmendOrderReq struct {
	state                 protoimpl.MessageState   `protogen:"open.v1"`
	PayloadType           *ProtoCSPayloadType      `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=837" json:"payloadType,omitempty"`
	IgnoreValidation      *bool                    `protobuf:"varint,2,req,name=ignoreValidation" json:"ignoreValidation,omitempty"`                                               // If TRUE then a lot of server validations should be skipped: Symbol and Trader restrictions (market is closed, short selling disabled, account is disabled, GSL is not allowed, min\max volume, protection distances, etc.)
	TraderId              *uint64                  `protobuf:"varint,3,req,name=traderId" json:"traderId,omitempty"`                                                               // Unique identifier of the Trader within environment
	OrderId               *int64                   `protobuf:"varint,4,req,name=orderId" json:"orderId,omitempty"`                                                                 // The unique ID of the Order
	TimeInForce           *ProtoTimeInForce        `protobuf:"varint,5,opt,name=timeInForce,enum=ProtoTimeInForce,def=2" json:"timeInForce,omitempty"`                             // The specific Order execution or expiration instruction - GOOD_TILL_DATE, GOOD_TILL_CANCEL, IMMEDIATE_OR_CANCEL, FILL_OR_KILL, MARKET_ON_OPEN. Default: GOOD_TILL_CANCEL
	LimitPrice            *float64                 `protobuf:"fixed64,6,opt,name=limitPrice" json:"limitPrice,omitempty"`                                                          // The limit price, can be specified for the LIMIT Order only
	StopPrice             *float64                 `protobuf:"fixed64,7,opt,name=stopPrice" json:"stopPrice,omitempty"`                                                            // The stop price, can be specified for the STOP and the STOP_LIMIT Orders only
	ExpirationTimestamp   *int64                   `protobuf:"varint,8,opt,name=expirationTimestamp" json:"expirationTimestamp,omitempty"`                                         // UNIX timestamp in milliseconds of the Order expiration time. Should be set for the Good Till Date Orders
	StopLoss              *float64                 `protobuf:"fixed64,10,opt,name=stopLoss" json:"stopLoss,omitempty"`                                                             // The absolute Stop Loss price (1.23456 for example). Not supported for the MARKER Orders
	TakeProfit            *float64                 `protobuf:"fixed64,11,opt,name=takeProfit" json:"takeProfit,omitempty"`                                                         // The absolute Take Profit price (1.23456 for example). Unsupported for the MARKER Orders
	Channel               *string                  `protobuf:"bytes,15,opt,name=channel" json:"channel,omitempty"`                                                                 // Technical field - to be filled with "ManagerAPI"
	RelativeStopLoss      *int64                   `protobuf:"varint,16,opt,name=relativeStopLoss" json:"relativeStopLoss,omitempty"`                                              // Relative Stop Loss that can be specified instead of the absolute as one. Specified in 1/100000 of unit of a price. For BUY stopLoss = entryPrice - relativeStopLoss, for SELL stopLoss = entryPrice + relativeStopLoss
	RelativeTakeProfit    *int64                   `protobuf:"varint,17,opt,name=relativeTakeProfit" json:"relativeTakeProfit,omitempty"`                                          // Relative Take Profit that can be specified instead of the absolute one. Specified in 1/100000 of unit of a price. For BUY takeProfit = entryPrice + relativeTakeProfit, for SELL takeProfit = entryPrice - relativeTakeProfit
	Volume                *int64                   `protobuf:"varint,18,opt,name=volume" json:"volume,omitempty"`                                                                  // The volume represented in 0.01 of a unit (e.g. US$ 10.00 = 1000)
	GuaranteedStopLoss    *bool                    `protobuf:"varint,19,opt,name=guaranteedStopLoss" json:"guaranteedStopLoss,omitempty"`                                          // If TRUE then the Stop Loss is Guaranteed. Available for the French Risk or the Guaranteed Stop Loss Accounts
	Stake                 *int64                   `protobuf:"varint,20,opt,name=stake" json:"stake,omitempty"`                                                                    // Stake for Spread Betting
	TrailingStopLoss      *bool                    `protobuf:"varint,21,opt,name=trailingStopLoss" json:"trailingStopLoss,omitempty"`                                              // If TRUE then the Trailing Stop Loss is applied
	StopTriggerMethod     *ProtoOrderTriggerMethod `protobuf:"varint,22,opt,name=stopTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopTriggerMethod,omitempty"`         // Trigger Method for the STOP or the STOP_LIMIT pending Order
	StopLossTriggerMethod *ProtoOrderTriggerMethod `protobuf:"varint,23,opt,name=stopLossTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopLossTriggerMethod,omitempty"` // Stop Trigger Method for SL/TP Order
	SlippageInPoints      *int32                   `protobuf:"varint,24,opt,name=slippageInPoints" json:"slippageInPoints,omitempty"`                                              // Slippage Distance for MARKET_RANGE and STOP_LIMIT Order
	DesiredOpenTimestamp  *int64                   `protobuf:"varint,25,opt,name=desiredOpenTimestamp" json:"desiredOpenTimestamp,omitempty"`                                      // UNIX timestamp in milliseconds used to set time of the opening for MARKET_ON_OPEN Orders
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for ProtoDealerAmendOrderReq fields.
const (
	Default_ProtoDealerAmendOrderReq_PayloadType           = ProtoCSPayloadType_PROTO_DEALER_AMEND_ORDER_REQ
	Default_ProtoDealerAmendOrderReq_TimeInForce           = ProtoTimeInForce_GOOD_TILL_CANCEL
	Default_ProtoDealerAmendOrderReq_StopTriggerMethod     = ProtoOrderTriggerMethod_TRADE
	Default_ProtoDealerAmendOrderReq_StopLossTriggerMethod = ProtoOrderTriggerMethod_TRADE
)

func (x *ProtoDealerAmendOrderReq) Reset() {
	*x = ProtoDealerAmendOrderReq{}
	mi := &file_CSMessages_External_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDealerAmendOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDealerAmendOrderReq) ProtoMessage() {}

func (x *ProtoDealerAmendOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDealerAmendOrderReq.ProtoReflect.Descriptor instead.
func (*ProtoDealerAmendOrderReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{158}
}

func (x *ProtoDealerAmendOrderReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoDealerAmendOrderReq_PayloadType
}

func (x *ProtoDealerAmendOrderReq) GetIgnoreValidation() bool {
	if x != nil && x.IgnoreValidation != nil {
		return *x.IgnoreValidation
	}
	return false
}

func (x *ProtoDealerAmendOrderReq) GetTraderId() uint64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoDealerAmendOrderReq) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *ProtoDealerAmendOrderReq) GetTimeInForce() ProtoTimeInForce {
	if x != nil && x.TimeInForce != nil {
		return *x.TimeInForce
	}
	return Default_ProtoDealerAmendOrderReq_TimeInForce
}

func (x *ProtoDealerAmendOrderReq) GetLimitPrice() float64 {
	if x != nil && x.LimitPrice != nil {
		return *x.LimitPrice
	}
	return 0
}

func (x *ProtoDealerAmendOrderReq) GetStopPrice() float64 {
	if x != nil && x.StopPrice != nil {
		return *x.StopPrice
	}
	return 0
}

func (x *ProtoDealerAmendOrderReq) GetExpirationTimestamp() int64 {
	if x != nil && x.ExpirationTimestamp != nil {
		return *x.ExpirationTimestamp
	}
	return 0
}

func (x *ProtoDealerAmendOrderReq) GetStopLoss() float64 {
	if x != nil && x.StopLoss != nil {
		return *x.StopLoss
	}
	return 0
}

func (x *ProtoDealerAmendOrderReq) GetTakeProfit() float64 {
	if x != nil && x.TakeProfit != nil {
		return *x.TakeProfit
	}
	return 0
}

func (x *ProtoDealerAmendOrderReq) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ProtoDealerAmendOrderReq) GetRelativeStopLoss() int64 {
	if x != nil && x.RelativeStopLoss != nil {
		return *x.RelativeStopLoss
	}
	return 0
}

func (x *ProtoDealerAmendOrderReq) GetRelativeTakeProfit() int64 {
	if x != nil && x.RelativeTakeProfit != nil {
		return *x.RelativeTakeProfit
	}
	return 0
}

func (x *ProtoDealerAmendOrderReq) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoDealerAmendOrderReq) GetGuaranteedStopLoss() bool {
	if x != nil && x.GuaranteedStopLoss != nil {
		return *x.GuaranteedStopLoss
	}
	return false
}

func (x *ProtoDealerAmendOrderReq) GetStake() int64 {
	if x != nil && x.Stake != nil {
		return *x.Stake
	}
	return 0
}

func (x *ProtoDealerAmendOrderReq) GetTrailingStopLoss() bool {
	if x != nil && x.TrailingStopLoss != nil {
		return *x.TrailingStopLoss
	}
	return false
}

func (x *ProtoDealerAmendOrderReq) GetStopTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopTriggerMethod != nil {
		return *x.StopTriggerMethod
	}
	return Default_ProtoDealerAmendOrderReq_StopTriggerMethod
}

func (x *ProtoDealerAmendOrderReq) GetStopLossTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopLossTriggerMethod != nil {
		return *x.StopLossTriggerMethod
	}
	return Default_ProtoDealerAmendOrderReq_StopLossTriggerMethod
}

func (x *ProtoDealerAmendOrderReq) GetSlippageInPoints() int32 {
	if x != nil && x.SlippageInPoints != nil {
		return *x.SlippageInPoints
	}
	return 0
}

func (x *ProtoDealerAmendOrderReq) GetDesiredOpenTimestamp() int64 {
	if x != nil && x.DesiredOpenTimestamp != nil {
		return *x.DesiredOpenTimestamp
	}
	return 0
}

// Request to cancel an Order
type ProtoDealerCancelOrderReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PayloadType      *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=838" json:"payloadType,omitempty"`
	IgnoreValidation *bool                  `protobuf:"varint,2,req,name=ignoreValidation" json:"ignoreValidation,omitempty"` // If TRUE then a lot of server validations should be skipped: Symbol and Trader restrictions (market is closed, short selling disabled, account is disabled, GSL is not allowed, min\max volume, protection distances, etc.)
	TraderId         *uint64                `protobuf:"varint,3,req,name=traderId" json:"traderId,omitempty"`                 // Unique identifier of the Trader within environment
	OrderId          *int64                 `protobuf:"varint,4,req,name=orderId" json:"orderId,omitempty"`                   // The unique ID of the Order
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for ProtoDealerCancelOrderReq fields.
const (
	Default_ProtoDealerCancelOrderReq_PayloadType = ProtoCSPayloadType_PROTO_DEALER_CANCEL_ORDER_REQ
)

func (x *ProtoDealerCancelOrderReq) Reset() {
	*x = ProtoDealerCancelOrderReq{}
	mi := &file_CSMessages_External_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDealerCancelOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDealerCancelOrderReq) ProtoMessage() {}

func (x *ProtoDealerCancelOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDealerCancelOrderReq.ProtoReflect.Descriptor instead.
func (*ProtoDealerCancelOrderReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{159}
}

func (x *ProtoDealerCancelOrderReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoDealerCancelOrderReq_PayloadType
}

func (x *ProtoDealerCancelOrderReq) GetIgnoreValidation() bool {
	if x != nil && x.IgnoreValidation != nil {
		return *x.IgnoreValidation
	}
	return false
}

func (x *ProtoDealerCancelOrderReq) GetTraderId() uint64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoDealerCancelOrderReq) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

// Request to amend Position
type ProtoDealerAmendPositionReq struct {
	state                 protoimpl.MessageState   `protogen:"open.v1"`
	PayloadType           *ProtoCSPayloadType      `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=839" json:"payloadType,omitempty"`
	IgnoreValidation      *bool                    `protobuf:"varint,2,req,name=ignoreValidation" json:"ignoreValidation,omitempty"`                                               // If TRUE then a lot of server validations should be skipped: Symbol and Trader restrictions (market is closed, short selling disabled, account is disabled, GSL is not allowed, min\max volume, protection distances, etc.)
	TraderId              *uint64                  `protobuf:"varint,3,req,name=traderId" json:"traderId,omitempty"`                                                               // Unique identifier of the Trader within environment
	PositionId            *int64                   `protobuf:"varint,4,req,name=positionId" json:"positionId,omitempty"`                                                           // The unique ID of the Position
	StopLoss              *float64                 `protobuf:"fixed64,5,opt,name=stopLoss" json:"stopLoss,omitempty"`                                                              // The absolute Stop Loss price (1.23456 for example). Not supported for the MARKER Orders
	TakeProfit            *float64                 `protobuf:"fixed64,6,opt,name=takeProfit" json:"takeProfit,omitempty"`                                                          // The absolute Take Profit price (1.23456 for example). Unsupported for the MARKER Orders
	Channel               *string                  `protobuf:"bytes,7,opt,name=channel" json:"channel,omitempty"`                                                                  // Technical field - to be filled with "ManagerAPI"
	GuaranteedStopLoss    *bool                    `protobuf:"varint,8,opt,name=guaranteedStopLoss" json:"guaranteedStopLoss,omitempty"`                                           // If TRUE then the Stop Loss is Guaranteed. Available for the French Risk or the Guaranteed Stop Loss Accounts
	TrailingStopLoss      *bool                    `protobuf:"varint,9,opt,name=trailingStopLoss" json:"trailingStopLoss,omitempty"`                                               // If TRUE then the Trailing Stop Loss is applied
	StopLossTriggerMethod *ProtoOrderTriggerMethod `protobuf:"varint,10,opt,name=stopLossTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopLossTriggerMethod,omitempty"` // Stop trigger method for SL/TP Order
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for ProtoDealerAmendPositionReq fields.
const (
	Default_ProtoDealerAmendPositionReq_PayloadType           = ProtoCSPayloadType_PROTO_DEALER_AMEND_POSITION_REQ
	Default_ProtoDealerAmendPositionReq_StopLossTriggerMethod = ProtoOrderTriggerMethod_TRADE
)

func (x *ProtoDealerAmendPositionReq) Reset() {
	*x = ProtoDealerAmendPositionReq{}
	mi := &file_CSMessages_External_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDealerAmendPositionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDealerAmendPositionReq) ProtoMessage() {}

func (x *ProtoDealerAmendPositionReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDealerAmendPositionReq.ProtoReflect.Descriptor instead.
func (*ProtoDealerAmendPositionReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{160}
}

func (x *ProtoDealerAmendPositionReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoDealerAmendPositionReq_PayloadType
}

func (x *ProtoDealerAmendPositionReq) GetIgnoreValidation() bool {
	if x != nil && x.IgnoreValidation != nil {
		return *x.IgnoreValidation
	}
	return false
}

func (x *ProtoDealerAmendPositionReq) GetTraderId() uint64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoDealerAmendPositionReq) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoDealerAmendPositionReq) GetStopLoss() float64 {
	if x != nil && x.StopLoss != nil {
		return *x.StopLoss
	}
	return 0
}

func (x *ProtoDealerAmendPositionReq) GetTakeProfit() float64 {
	if x != nil && x.TakeProfit != nil {
		return *x.TakeProfit
	}
	return 0
}

func (x *ProtoDealerAmendPositionReq) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ProtoDealerAmendPositionReq) GetGuaranteedStopLoss() bool {
	if x != nil && x.GuaranteedStopLoss != nil {
		return *x.GuaranteedStopLoss
	}
	return false
}

func (x *ProtoDealerAmendPositionReq) GetTrailingStopLoss() bool {
	if x != nil && x.TrailingStopLoss != nil {
		return *x.TrailingStopLoss
	}
	return false
}

func (x *ProtoDealerAmendPositionReq) GetStopLossTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopLossTriggerMethod != nil {
		return *x.StopLossTriggerMethod
	}
	return Default_ProtoDealerAmendPositionReq_StopLossTriggerMethod
}

// Request to close Position
type ProtoDealerClosePositionReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PayloadType      *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=840" json:"payloadType,omitempty"`
	IgnoreValidation *bool                  `protobuf:"varint,2,req,name=ignoreValidation" json:"ignoreValidation,omitempty"` // If TRUE then a lot of server validations should be skipped: Symbol and Trader restrictions (market is closed, short selling disabled, account is disabled, GSL is not allowed, min\max volume, protection distances, etc.)
	TraderId         *uint64                `protobuf:"varint,3,req,name=traderId" json:"traderId,omitempty"`                 // Unique identifier of the Trader within environment
	PositionId       *int64                 `protobuf:"varint,4,req,name=positionId" json:"positionId,omitempty"`             // The unique ID of the Position
	Volume           *int64                 `protobuf:"varint,5,req,name=volume" json:"volume,omitempty"`                     // The volume represented in 0.01 of a unit (e.g. US$ 10.00 = 1000)
	Stake            *int64                 `protobuf:"varint,6,opt,name=stake" json:"stake,omitempty"`                       // Stake for Spread Betting
	Channel          *string                `protobuf:"bytes,7,opt,name=channel" json:"channel,omitempty"`                    // Technical field - to be filled with "ManagerAPI"
	DesiredVWAP      *float64               `protobuf:"fixed64,8,opt,name=desiredVWAP" json:"desiredVWAP,omitempty"`          // Price desired by the client as an execution price
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for ProtoDealerClosePositionReq fields.
const (
	Default_ProtoDealerClosePositionReq_PayloadType = ProtoCSPayloadType_PROTO_DEALER_CLOSE_POSITION_REQ
)

func (x *ProtoDealerClosePositionReq) Reset() {
	*x = ProtoDealerClosePositionReq{}
	mi := &file_CSMessages_External_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDealerClosePositionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDealerClosePositionReq) ProtoMessage() {}

func (x *ProtoDealerClosePositionReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDealerClosePositionReq.ProtoReflect.Descriptor instead.
func (*ProtoDealerClosePositionReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{161}
}

func (x *ProtoDealerClosePositionReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoDealerClosePositionReq_PayloadType
}

func (x *ProtoDealerClosePositionReq) GetIgnoreValidation() bool {
	if x != nil && x.IgnoreValidation != nil {
		return *x.IgnoreValidation
	}
	return false
}

func (x *ProtoDealerClosePositionReq) GetTraderId() uint64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoDealerClosePositionReq) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoDealerClosePositionReq) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoDealerClosePositionReq) GetStake() int64 {
	if x != nil && x.Stake != nil {
		return *x.Stake
	}
	return 0
}

func (x *ProtoDealerClosePositionReq) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ProtoDealerClosePositionReq) GetDesiredVWAP() float64 {
	if x != nil && x.DesiredVWAP != nil {
		return *x.DesiredVWAP
	}
	return 0
}

// Event that is sent when Asset Class is created/updated
type ProtoAssetClassChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=846" json:"payloadType,omitempty"`
	AssetClass    *ProtoAssetClass       `protobuf:"bytes,2,req,name=assetClass" json:"assetClass,omitempty"`                        // Asset class entity
	Operation     *ProtoCrudOperation    `protobuf:"varint,3,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update operation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoAssetClassChangedEvent fields.
const (
	Default_ProtoAssetClassChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_ASSET_CLASS_CHANGED_EVENT
)

func (x *ProtoAssetClassChangedEvent) Reset() {
	*x = ProtoAssetClassChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoAssetClassChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoAssetClassChangedEvent) ProtoMessage() {}

func (x *ProtoAssetClassChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoAssetClassChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoAssetClassChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{162}
}

func (x *ProtoAssetClassChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoAssetClassChangedEvent_PayloadType
}

func (x *ProtoAssetClassChangedEvent) GetAssetClass() *ProtoAssetClass {
	if x != nil {
		return x.AssetClass
	}
	return nil
}

func (x *ProtoAssetClassChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

// Event that is sent when Asset Class is deleted
type ProtoAssetClassDeletedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=847" json:"payloadType,omitempty"`
	AssetClassId  *int64                 `protobuf:"varint,2,req,name=assetClassId" json:"assetClassId,omitempty"` // Asset class ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoAssetClassDeletedEvent fields.
const (
	Default_ProtoAssetClassDeletedEvent_PayloadType = ProtoCSPayloadType_PROTO_ASSET_CLASS_DELETED_EVENT
)

func (x *ProtoAssetClassDeletedEvent) Reset() {
	*x = ProtoAssetClassDeletedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoAssetClassDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoAssetClassDeletedEvent) ProtoMessage() {}

func (x *ProtoAssetClassDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoAssetClassDeletedEvent.ProtoReflect.Descriptor instead.
func (*ProtoAssetClassDeletedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{163}
}

func (x *ProtoAssetClassDeletedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoAssetClassDeletedEvent_PayloadType
}

func (x *ProtoAssetClassDeletedEvent) GetAssetClassId() int64 {
	if x != nil && x.AssetClassId != nil {
		return *x.AssetClassId
	}
	return 0
}

// Event that is sent when Symbol Category is created/updated
type ProtoSymbolCategoryChangedEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PayloadType    *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=848" json:"payloadType,omitempty"`
	SymbolCategory *ProtoSymbolCategory   `protobuf:"bytes,2,req,name=symbolCategory" json:"symbolCategory,omitempty"`                // Symbol Category
	Operation      *ProtoCrudOperation    `protobuf:"varint,3,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update operation
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for ProtoSymbolCategoryChangedEvent fields.
const (
	Default_ProtoSymbolCategoryChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_SYMBOL_CATEGORY_CHANGED_EVENT
)

func (x *ProtoSymbolCategoryChangedEvent) Reset() {
	*x = ProtoSymbolCategoryChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSymbolCategoryChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSymbolCategoryChangedEvent) ProtoMessage() {}

func (x *ProtoSymbolCategoryChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSymbolCategoryChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoSymbolCategoryChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{164}
}

func (x *ProtoSymbolCategoryChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSymbolCategoryChangedEvent_PayloadType
}

func (x *ProtoSymbolCategoryChangedEvent) GetSymbolCategory() *ProtoSymbolCategory {
	if x != nil {
		return x.SymbolCategory
	}
	return nil
}

func (x *ProtoSymbolCategoryChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

// Event that is sent when Symbol Category is deleted
type ProtoSymbolCategoryDeletedEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PayloadType      *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=849" json:"payloadType,omitempty"`
	SymbolCategoryId *int64                 `protobuf:"varint,2,req,name=symbolCategoryId" json:"symbolCategoryId,omitempty"` // Symbol Category ID
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for ProtoSymbolCategoryDeletedEvent fields.
const (
	Default_ProtoSymbolCategoryDeletedEvent_PayloadType = ProtoCSPayloadType_PROTO_SYMBOL_CATEGORY_DELETED_EVENT
)

func (x *ProtoSymbolCategoryDeletedEvent) Reset() {
	*x = ProtoSymbolCategoryDeletedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSymbolCategoryDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSymbolCategoryDeletedEvent) ProtoMessage() {}

func (x *ProtoSymbolCategoryDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSymbolCategoryDeletedEvent.ProtoReflect.Descriptor instead.
func (*ProtoSymbolCategoryDeletedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{165}
}

func (x *ProtoSymbolCategoryDeletedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSymbolCategoryDeletedEvent_PayloadType
}

func (x *ProtoSymbolCategoryDeletedEvent) GetSymbolCategoryId() int64 {
	if x != nil && x.SymbolCategoryId != nil {
		return *x.SymbolCategoryId
	}
	return 0
}

// Request to force close Position even when it is impossible to do it "legally" (LP stopped streaming, Position was not closed, but should be, etc.)
type ProtoForceClosePositionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=870" json:"payloadType,omitempty"`
	PositionId    *int64                 `protobuf:"varint,2,req,name=positionId" json:"positionId,omitempty"`    // The unique ID of the Position
	DesiredVWAP   *float64               `protobuf:"fixed64,3,req,name=desiredVWAP" json:"desiredVWAP,omitempty"` // Price desired by the client as an execution price
	Comment       *string                `protobuf:"bytes,4,opt,name=comment" json:"comment,omitempty"`           // Comment which was set for the Deal
	Channel       *string                `protobuf:"bytes,5,opt,name=channel" json:"channel,omitempty"`           // Technical field - to be filled with "ManagerAPI"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoForceClosePositionReq fields.
const (
	Default_ProtoForceClosePositionReq_PayloadType = ProtoCSPayloadType_PROTO_FORCE_CLOSE_POSITION_REQ
)

func (x *ProtoForceClosePositionReq) Reset() {
	*x = ProtoForceClosePositionReq{}
	mi := &file_CSMessages_External_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoForceClosePositionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoForceClosePositionReq) ProtoMessage() {}

func (x *ProtoForceClosePositionReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoForceClosePositionReq.ProtoReflect.Descriptor instead.
func (*ProtoForceClosePositionReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{166}
}

func (x *ProtoForceClosePositionReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoForceClosePositionReq_PayloadType
}

func (x *ProtoForceClosePositionReq) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoForceClosePositionReq) GetDesiredVWAP() float64 {
	if x != nil && x.DesiredVWAP != nil {
		return *x.DesiredVWAP
	}
	return 0
}

func (x *ProtoForceClosePositionReq) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoForceClosePositionReq) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

// Response for ProtoForceClosePositionReq
type ProtoForceOpenPositionReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PayloadType      *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=871" json:"payloadType,omitempty"`
	TraderId         *int64                 `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"`                       // Unique identifier of the Trader within environment
	SymbolId         *int64                 `protobuf:"varint,3,req,name=symbolId" json:"symbolId,omitempty"`                       // The unique identifier of the Symbol in specific server environment within cTrader platform
	TradeSide        *ProtoTradeSide        `protobuf:"varint,4,req,name=tradeSide,enum=ProtoTradeSide" json:"tradeSide,omitempty"` // The trade direction - BUY or SELL
	Volume           *int64                 `protobuf:"varint,5,req,name=volume" json:"volume,omitempty"`                           // The volume represented in 0.01 of a unit (e.g. US$ 10.00 = 1000)
	DesiredVWAP      *float64               `protobuf:"fixed64,6,req,name=desiredVWAP" json:"desiredVWAP,omitempty"`                // Price desired by the client as an execution price
	UnrealizedSwaps  *int64                 `protobuf:"varint,7,opt,name=unrealizedSwaps" json:"unrealizedSwaps,omitempty"`         // Unrealised Swap to be set for the created Position
	UsedMargin       *uint64                `protobuf:"varint,8,opt,name=usedMargin" json:"usedMargin,omitempty"`                   // Required margin for the Position (will be auto calculated if unspecified)
	Comment          *string                `protobuf:"bytes,9,opt,name=comment" json:"comment,omitempty"`                          // Comment for the Deal
	Channel          *string                `protobuf:"bytes,10,opt,name=channel" json:"channel,omitempty"`                         // Technical field - to be filled with "ManagerAPI"
	StopLoss         *float64               `protobuf:"fixed64,11,opt,name=stopLoss" json:"stopLoss,omitempty"`                     // The absolute Stop Loss price (1.23456 for example). Not supported for the MARKER Orders
	ChargeCommission *bool                  `protobuf:"varint,12,opt,name=chargeCommission" json:"chargeCommission,omitempty"`      // If false then applicable trading commission is not charged
	NewWay           *bool                  `protobuf:"varint,13,opt,name=newWay" json:"newWay,omitempty"`                          // Must be set to TRUE. If TRUE then for amount protocol value 1 is minimal value according to ProtoAsset.digits (=1/(10^digits)), e.g. if Trader's deposit Asset is JPY (digits=0), then value 1 equals to 1.00 JPY; if USD (digits=2) then 1 equals to 0.01 USD. If FALSE, then 1 protocol value=0.01
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for ProtoForceOpenPositionReq fields.
const (
	Default_ProtoForceOpenPositionReq_PayloadType = ProtoCSPayloadType_PROTO_FORCE_OPEN_POSITION_REQ
)

func (x *ProtoForceOpenPositionReq) Reset() {
	*x = ProtoForceOpenPositionReq{}
	mi := &file_CSMessages_External_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoForceOpenPositionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoForceOpenPositionReq) ProtoMessage() {}

func (x *ProtoForceOpenPositionReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoForceOpenPositionReq.ProtoReflect.Descriptor instead.
func (*ProtoForceOpenPositionReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{167}
}

func (x *ProtoForceOpenPositionReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoForceOpenPositionReq_PayloadType
}

func (x *ProtoForceOpenPositionReq) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoForceOpenPositionReq) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoForceOpenPositionReq) GetTradeSide() ProtoTradeSide {
	if x != nil && x.TradeSide != nil {
		return *x.TradeSide
	}
	return ProtoTradeSide_BUY
}

func (x *ProtoForceOpenPositionReq) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoForceOpenPositionReq) GetDesiredVWAP() float64 {
	if x != nil && x.DesiredVWAP != nil {
		return *x.DesiredVWAP
	}
	return 0
}

func (x *ProtoForceOpenPositionReq) GetUnrealizedSwaps() int64 {
	if x != nil && x.UnrealizedSwaps != nil {
		return *x.UnrealizedSwaps
	}
	return 0
}

func (x *ProtoForceOpenPositionReq) GetUsedMargin() uint64 {
	if x != nil && x.UsedMargin != nil {
		return *x.UsedMargin
	}
	return 0
}

func (x *ProtoForceOpenPositionReq) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoForceOpenPositionReq) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ProtoForceOpenPositionReq) GetStopLoss() float64 {
	if x != nil && x.StopLoss != nil {
		return *x.StopLoss
	}
	return 0
}

func (x *ProtoForceOpenPositionReq) GetChargeCommission() bool {
	if x != nil && x.ChargeCommission != nil {
		return *x.ChargeCommission
	}
	return false
}

func (x *ProtoForceOpenPositionReq) GetNewWay() bool {
	if x != nil && x.NewWay != nil {
		return *x.NewWay
	}
	return false
}

// Request to transfer funds between Traders
type ProtoManagerBalanceTransferReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	PayloadType          *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=355" json:"payloadType,omitempty"`
	FromTraderId         *int64                 `protobuf:"varint,2,req,name=fromTraderId" json:"fromTraderId,omitempty"`                // ID of the Trader to transfer from
	ToTraderId           *int64                 `protobuf:"varint,3,req,name=toTraderId" json:"toTraderId,omitempty"`                    // ID of the Trader to transfer to
	Amount               *int64                 `protobuf:"varint,4,req,name=amount" json:"amount,omitempty"`                            // Amount of the transfer in 10^Asset.digits
	ConversionRate       *float64               `protobuf:"fixed64,5,opt,name=conversionRate" json:"conversionRate,omitempty"`           // Conversion rate for the case when fromTraderId and toTraderId Traders' deposit Assets are different
	NewWay               *bool                  `protobuf:"varint,6,opt,name=newWay" json:"newWay,omitempty"`                            // Must be set to TRUE. If TRUE then for amount protocol value 1 is minimal value according to ProtoAsset.digits (=1/(10^digits)), e.g. if Trader's deposit Asset is JPY (digits=0), then value 1 equals to 1.00 JPY; if USD (digits=2) then 1 equals to 0.01 USD. If FALSE, then 1 protocol value=0.01
	CommentForFromTrader *string                `protobuf:"bytes,7,opt,name=commentForFromTrader" json:"commentForFromTrader,omitempty"` // Comment which will be set for the fromTraderId
	CommentForToTrader   *string                `protobuf:"bytes,8,opt,name=commentForToTrader" json:"commentForToTrader,omitempty"`     // Comment which will be set for the toTraderId
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for ProtoManagerBalanceTransferReq fields.
const (
	Default_ProtoManagerBalanceTransferReq_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_BALANCE_TRANSFER_REQ
)

func (x *ProtoManagerBalanceTransferReq) Reset() {
	*x = ProtoManagerBalanceTransferReq{}
	mi := &file_CSMessages_External_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerBalanceTransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerBalanceTransferReq) ProtoMessage() {}

func (x *ProtoManagerBalanceTransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerBalanceTransferReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerBalanceTransferReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{168}
}

func (x *ProtoManagerBalanceTransferReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerBalanceTransferReq_PayloadType
}

func (x *ProtoManagerBalanceTransferReq) GetFromTraderId() int64 {
	if x != nil && x.FromTraderId != nil {
		return *x.FromTraderId
	}
	return 0
}

func (x *ProtoManagerBalanceTransferReq) GetToTraderId() int64 {
	if x != nil && x.ToTraderId != nil {
		return *x.ToTraderId
	}
	return 0
}

func (x *ProtoManagerBalanceTransferReq) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *ProtoManagerBalanceTransferReq) GetConversionRate() float64 {
	if x != nil && x.ConversionRate != nil {
		return *x.ConversionRate
	}
	return 0
}

func (x *ProtoManagerBalanceTransferReq) GetNewWay() bool {
	if x != nil && x.NewWay != nil {
		return *x.NewWay
	}
	return false
}

func (x *ProtoManagerBalanceTransferReq) GetCommentForFromTrader() string {
	if x != nil && x.CommentForFromTrader != nil {
		return *x.CommentForFromTrader
	}
	return ""
}

func (x *ProtoManagerBalanceTransferReq) GetCommentForToTrader() string {
	if x != nil && x.CommentForToTrader != nil {
		return *x.CommentForToTrader
	}
	return ""
}

// Response for ProtoManagerBalanceTransferReq
type ProtoManagerBalanceTransferRes struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PayloadType     *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=356" json:"payloadType,omitempty"`
	DepositedAmount *uint64                `protobuf:"varint,2,req,name=depositedAmount" json:"depositedAmount,omitempty"`
	MoneyDigits     *uint32                `protobuf:"varint,3,opt,name=moneyDigits" json:"moneyDigits,omitempty"` // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpret as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects depositedAmount
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for ProtoManagerBalanceTransferRes fields.
const (
	Default_ProtoManagerBalanceTransferRes_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_BALANCE_TRANSFER_RES
)

func (x *ProtoManagerBalanceTransferRes) Reset() {
	*x = ProtoManagerBalanceTransferRes{}
	mi := &file_CSMessages_External_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerBalanceTransferRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerBalanceTransferRes) ProtoMessage() {}

func (x *ProtoManagerBalanceTransferRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerBalanceTransferRes.ProtoReflect.Descriptor instead.
func (*ProtoManagerBalanceTransferRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{169}
}

func (x *ProtoManagerBalanceTransferRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerBalanceTransferRes_PayloadType
}

func (x *ProtoManagerBalanceTransferRes) GetDepositedAmount() uint64 {
	if x != nil && x.DepositedAmount != nil {
		return *x.DepositedAmount
	}
	return 0
}

func (x *ProtoManagerBalanceTransferRes) GetMoneyDigits() uint32 {
	if x != nil && x.MoneyDigits != nil {
		return *x.MoneyDigits
	}
	return 0
}

// Request to create/update/delete profile for changing Symbol trading Schedule. Profile is a set of settings which is applied within specific Groups
type ProtoCrudScheduleProfileReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PayloadType     *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=360" json:"payloadType,omitempty"`
	Operation       *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	ScheduleProfile *ProtoScheduleProfile  `protobuf:"bytes,3,req,name=scheduleProfile" json:"scheduleProfile,omitempty"`              // Symbol Trading Schedule Profile entity
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for ProtoCrudScheduleProfileReq fields.
const (
	Default_ProtoCrudScheduleProfileReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_SCHEDULE_PROFILE_REQ
)

func (x *ProtoCrudScheduleProfileReq) Reset() {
	*x = ProtoCrudScheduleProfileReq{}
	mi := &file_CSMessages_External_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudScheduleProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudScheduleProfileReq) ProtoMessage() {}

func (x *ProtoCrudScheduleProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudScheduleProfileReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudScheduleProfileReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{170}
}

func (x *ProtoCrudScheduleProfileReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudScheduleProfileReq_PayloadType
}

func (x *ProtoCrudScheduleProfileReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudScheduleProfileReq) GetScheduleProfile() *ProtoScheduleProfile {
	if x != nil {
		return x.ScheduleProfile
	}
	return nil
}

// Response for ProtoCrudScheduleProfileReq
type ProtoCrudScheduleProfileRes struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PayloadType       *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=361" json:"payloadType,omitempty"`
	Operation         *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	ScheduleProfileId *int64                 `protobuf:"varint,3,req,name=scheduleProfileId" json:"scheduleProfileId,omitempty"`         // Symbol Trading Schedule Profile ID
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for ProtoCrudScheduleProfileRes fields.
const (
	Default_ProtoCrudScheduleProfileRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_SCHEDULE_PROFILE_RES
)

func (x *ProtoCrudScheduleProfileRes) Reset() {
	*x = ProtoCrudScheduleProfileRes{}
	mi := &file_CSMessages_External_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudScheduleProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudScheduleProfileRes) ProtoMessage() {}

func (x *ProtoCrudScheduleProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudScheduleProfileRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudScheduleProfileRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{171}
}

func (x *ProtoCrudScheduleProfileRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudScheduleProfileRes_PayloadType
}

func (x *ProtoCrudScheduleProfileRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudScheduleProfileRes) GetScheduleProfileId() int64 {
	if x != nil && x.ScheduleProfileId != nil {
		return *x.ScheduleProfileId
	}
	return 0
}

// Event that is sent when Symbol trading Schedule is created/updated/deleted. Profile is a set of settings which is applied within specific Groups
type ProtoScheduleProfileChangedEvent struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PayloadType     *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=362" json:"payloadType,omitempty"`
	Operation       *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	ScheduleProfile *ProtoScheduleProfile  `protobuf:"bytes,3,req,name=scheduleProfile" json:"scheduleProfile,omitempty"`              // Symbol Trading Schedule Profile entity
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for ProtoScheduleProfileChangedEvent fields.
const (
	Default_ProtoScheduleProfileChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_SCHEDULE_PROFILE_CHANGED_EVENT
)

func (x *ProtoScheduleProfileChangedEvent) Reset() {
	*x = ProtoScheduleProfileChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoScheduleProfileChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoScheduleProfileChangedEvent) ProtoMessage() {}

func (x *ProtoScheduleProfileChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoScheduleProfileChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoScheduleProfileChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{172}
}

func (x *ProtoScheduleProfileChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoScheduleProfileChangedEvent_PayloadType
}

func (x *ProtoScheduleProfileChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoScheduleProfileChangedEvent) GetScheduleProfile() *ProtoScheduleProfile {
	if x != nil {
		return x.ScheduleProfile
	}
	return nil
}

// Request to get list of Symbol Trading Schedule Profiles. Profile is a set of settings which is applied within specific Groups
type ProtoScheduleProfileListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=363" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoScheduleProfileListReq fields.
const (
	Default_ProtoScheduleProfileListReq_PayloadType = ProtoCSPayloadType_PROTO_SCHEDULE_PROFILE_LIST_REQ
)

func (x *ProtoScheduleProfileListReq) Reset() {
	*x = ProtoScheduleProfileListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoScheduleProfileListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoScheduleProfileListReq) ProtoMessage() {}

func (x *ProtoScheduleProfileListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoScheduleProfileListReq.ProtoReflect.Descriptor instead.
func (*ProtoScheduleProfileListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{173}
}

func (x *ProtoScheduleProfileListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoScheduleProfileListReq_PayloadType
}

// Response for ProtoScheduleProfileListReq
type ProtoScheduleProfileListRes struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	PayloadType     *ProtoCSPayloadType     `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=364" json:"payloadType,omitempty"`
	ScheduleProfile []*ProtoScheduleProfile `protobuf:"bytes,2,rep,name=scheduleProfile" json:"scheduleProfile,omitempty"` // List Symbol Trading Schedule Profiles
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for ProtoScheduleProfileListRes fields.
const (
	Default_ProtoScheduleProfileListRes_PayloadType = ProtoCSPayloadType_PROTO_SCHEDULE_PROFILE_LIST_RES
)

func (x *ProtoScheduleProfileListRes) Reset() {
	*x = ProtoScheduleProfileListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoScheduleProfileListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoScheduleProfileListRes) ProtoMessage() {}

func (x *ProtoScheduleProfileListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoScheduleProfileListRes.ProtoReflect.Descriptor instead.
func (*ProtoScheduleProfileListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{174}
}

func (x *ProtoScheduleProfileListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoScheduleProfileListRes_PayloadType
}

func (x *ProtoScheduleProfileListRes) GetScheduleProfile() []*ProtoScheduleProfile {
	if x != nil {
		return x.ScheduleProfile
	}
	return nil
}

// Request to create/update/delete Commission Profile. Profile is a set of settings which is applied within specific Groups
type ProtoCrudCommissionProfileReq struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	PayloadType       *ProtoCSPayloadType     `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=365" json:"payloadType,omitempty"`
	Operation         *ProtoCrudOperation     `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	CommissionProfile *ProtoCommissionProfile `protobuf:"bytes,3,req,name=commissionProfile" json:"commissionProfile,omitempty"`          // Commission Profile entity
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for ProtoCrudCommissionProfileReq fields.
const (
	Default_ProtoCrudCommissionProfileReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_COMMISSION_PROFILE_REQ
)

func (x *ProtoCrudCommissionProfileReq) Reset() {
	*x = ProtoCrudCommissionProfileReq{}
	mi := &file_CSMessages_External_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudCommissionProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudCommissionProfileReq) ProtoMessage() {}

func (x *ProtoCrudCommissionProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudCommissionProfileReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudCommissionProfileReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{175}
}

func (x *ProtoCrudCommissionProfileReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudCommissionProfileReq_PayloadType
}

func (x *ProtoCrudCommissionProfileReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudCommissionProfileReq) GetCommissionProfile() *ProtoCommissionProfile {
	if x != nil {
		return x.CommissionProfile
	}
	return nil
}

// Response for ProtoCrudCommissionProfileReq
type ProtoCrudCommissionProfileRes struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PayloadType         *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=366" json:"payloadType,omitempty"`
	Operation           *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	CommissionProfileId *int64                 `protobuf:"varint,3,req,name=commissionProfileId" json:"commissionProfileId,omitempty"`     // Commission Profile ID
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for ProtoCrudCommissionProfileRes fields.
const (
	Default_ProtoCrudCommissionProfileRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_COMMISSION_PROFILE_RES
)

func (x *ProtoCrudCommissionProfileRes) Reset() {
	*x = ProtoCrudCommissionProfileRes{}
	mi := &file_CSMessages_External_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudCommissionProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudCommissionProfileRes) ProtoMessage() {}

func (x *ProtoCrudCommissionProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudCommissionProfileRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudCommissionProfileRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{176}
}

func (x *ProtoCrudCommissionProfileRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudCommissionProfileRes_PayloadType
}

func (x *ProtoCrudCommissionProfileRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudCommissionProfileRes) GetCommissionProfileId() int64 {
	if x != nil && x.CommissionProfileId != nil {
		return *x.CommissionProfileId
	}
	return 0
}

// Event that is sent when Commission Profile is changed
type ProtoCommissionProfileChangedEvent struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	PayloadType       *ProtoCSPayloadType     `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=367" json:"payloadType,omitempty"`
	Operation         *ProtoCrudOperation     `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	CommissionProfile *ProtoCommissionProfile `protobuf:"bytes,3,req,name=commissionProfile" json:"commissionProfile,omitempty"`          // Commission Profile entity
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for ProtoCommissionProfileChangedEvent fields.
const (
	Default_ProtoCommissionProfileChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_COMMISSION_PROFILE_CHANGED_EVENT
)

func (x *ProtoCommissionProfileChangedEvent) Reset() {
	*x = ProtoCommissionProfileChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCommissionProfileChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCommissionProfileChangedEvent) ProtoMessage() {}

func (x *ProtoCommissionProfileChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCommissionProfileChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoCommissionProfileChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{177}
}

func (x *ProtoCommissionProfileChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCommissionProfileChangedEvent_PayloadType
}

func (x *ProtoCommissionProfileChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCommissionProfileChangedEvent) GetCommissionProfile() *ProtoCommissionProfile {
	if x != nil {
		return x.CommissionProfile
	}
	return nil
}

// Request to get list of Commission Profiles
type ProtoCommissionProfileListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=368" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCommissionProfileListReq fields.
const (
	Default_ProtoCommissionProfileListReq_PayloadType = ProtoCSPayloadType_PROTO_COMMISSION_PROFILE_LIST_REQ
)

func (x *ProtoCommissionProfileListReq) Reset() {
	*x = ProtoCommissionProfileListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCommissionProfileListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCommissionProfileListReq) ProtoMessage() {}

func (x *ProtoCommissionProfileListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCommissionProfileListReq.ProtoReflect.Descriptor instead.
func (*ProtoCommissionProfileListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{178}
}

func (x *ProtoCommissionProfileListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCommissionProfileListReq_PayloadType
}

// Response for ProtoCommissionProfileListReq
type ProtoCommissionProfileListRes struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	PayloadType       *ProtoCSPayloadType       `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=369" json:"payloadType,omitempty"`
	CommissionProfile []*ProtoCommissionProfile `protobuf:"bytes,2,rep,name=commissionProfile" json:"commissionProfile,omitempty"` // Commission Profile entities
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for ProtoCommissionProfileListRes fields.
const (
	Default_ProtoCommissionProfileListRes_PayloadType = ProtoCSPayloadType_PROTO_COMMISSION_PROFILE_LIST_RES
)

func (x *ProtoCommissionProfileListRes) Reset() {
	*x = ProtoCommissionProfileListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCommissionProfileListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCommissionProfileListRes) ProtoMessage() {}

func (x *ProtoCommissionProfileListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCommissionProfileListRes.ProtoReflect.Descriptor instead.
func (*ProtoCommissionProfileListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{179}
}

func (x *ProtoCommissionProfileListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCommissionProfileListRes_PayloadType
}

func (x *ProtoCommissionProfileListRes) GetCommissionProfile() []*ProtoCommissionProfile {
	if x != nil {
		return x.CommissionProfile
	}
	return nil
}

// Request to create/update/delete Volume Profiles. Profile is a set of settings which is applied within specific Groups
type ProtoCrudVolumeProfileReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=375" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	VolumeProfile *ProtoVolumeProfile    `protobuf:"bytes,3,req,name=volumeProfile" json:"volumeProfile,omitempty"`                  // Volume Profile entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudVolumeProfileReq fields.
const (
	Default_ProtoCrudVolumeProfileReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_VOLUME_PROFILE_REQ
)

func (x *ProtoCrudVolumeProfileReq) Reset() {
	*x = ProtoCrudVolumeProfileReq{}
	mi := &file_CSMessages_External_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudVolumeProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudVolumeProfileReq) ProtoMessage() {}

func (x *ProtoCrudVolumeProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudVolumeProfileReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudVolumeProfileReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{180}
}

func (x *ProtoCrudVolumeProfileReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudVolumeProfileReq_PayloadType
}

func (x *ProtoCrudVolumeProfileReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudVolumeProfileReq) GetVolumeProfile() *ProtoVolumeProfile {
	if x != nil {
		return x.VolumeProfile
	}
	return nil
}

// Response for ProtoCrudVolumeProfileReq
type ProtoCrudVolumeProfileRes struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PayloadType     *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=376" json:"payloadType,omitempty"`
	Operation       *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	VolumeProfileId *int64                 `protobuf:"varint,3,req,name=volumeProfileId" json:"volumeProfileId,omitempty"`             // Volume Profile ID
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for ProtoCrudVolumeProfileRes fields.
const (
	Default_ProtoCrudVolumeProfileRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_VOLUME_PROFILE_RES
)

func (x *ProtoCrudVolumeProfileRes) Reset() {
	*x = ProtoCrudVolumeProfileRes{}
	mi := &file_CSMessages_External_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudVolumeProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudVolumeProfileRes) ProtoMessage() {}

func (x *ProtoCrudVolumeProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudVolumeProfileRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudVolumeProfileRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{181}
}

func (x *ProtoCrudVolumeProfileRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudVolumeProfileRes_PayloadType
}

func (x *ProtoCrudVolumeProfileRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudVolumeProfileRes) GetVolumeProfileId() int64 {
	if x != nil && x.VolumeProfileId != nil {
		return *x.VolumeProfileId
	}
	return 0
}

// Event that is sent when Volume Profile is updated/created/deleted. Profile is a set of settings which is applied within specific Groups
type ProtoVolumeProfileChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=377" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	VolumeProfile *ProtoVolumeProfile    `protobuf:"bytes,3,req,name=volumeProfile" json:"volumeProfile,omitempty"`                  // Volume Profile entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoVolumeProfileChangedEvent fields.
const (
	Default_ProtoVolumeProfileChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_VOLUME_PROFILE_CHANGED_EVENT
)

func (x *ProtoVolumeProfileChangedEvent) Reset() {
	*x = ProtoVolumeProfileChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoVolumeProfileChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoVolumeProfileChangedEvent) ProtoMessage() {}

func (x *ProtoVolumeProfileChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoVolumeProfileChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoVolumeProfileChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{182}
}

func (x *ProtoVolumeProfileChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoVolumeProfileChangedEvent_PayloadType
}

func (x *ProtoVolumeProfileChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoVolumeProfileChangedEvent) GetVolumeProfile() *ProtoVolumeProfile {
	if x != nil {
		return x.VolumeProfile
	}
	return nil
}

// Request to get list of Volume Profiles
type ProtoVolumeProfileListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=378" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoVolumeProfileListReq fields.
const (
	Default_ProtoVolumeProfileListReq_PayloadType = ProtoCSPayloadType_PROTO_VOLUME_PROFILE_LIST_REQ
)

func (x *ProtoVolumeProfileListReq) Reset() {
	*x = ProtoVolumeProfileListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoVolumeProfileListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoVolumeProfileListReq) ProtoMessage() {}

func (x *ProtoVolumeProfileListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoVolumeProfileListReq.ProtoReflect.Descriptor instead.
func (*ProtoVolumeProfileListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{183}
}

func (x *ProtoVolumeProfileListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoVolumeProfileListReq_PayloadType
}

// Response for ProtoVolumeProfileListReq
type ProtoVolumeProfileListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=379" json:"payloadType,omitempty"`
	VolumeProfile []*ProtoVolumeProfile  `protobuf:"bytes,2,rep,name=volumeProfile" json:"volumeProfile,omitempty"` // Volume Profile entities
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoVolumeProfileListRes fields.
const (
	Default_ProtoVolumeProfileListRes_PayloadType = ProtoCSPayloadType_PROTO_VOLUME_PROFILE_LIST_RES
)

func (x *ProtoVolumeProfileListRes) Reset() {
	*x = ProtoVolumeProfileListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoVolumeProfileListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoVolumeProfileListRes) ProtoMessage() {}

func (x *ProtoVolumeProfileListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoVolumeProfileListRes.ProtoReflect.Descriptor instead.
func (*ProtoVolumeProfileListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{184}
}

func (x *ProtoVolumeProfileListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoVolumeProfileListRes_PayloadType
}

func (x *ProtoVolumeProfileListRes) GetVolumeProfile() []*ProtoVolumeProfile {
	if x != nil {
		return x.VolumeProfile
	}
	return nil
}

// Request to create/update/delete Execution Profiles. Profile is a set of settings which is applied within specific Groups
type ProtoCrudExecutionProfileReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PayloadType      *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=380" json:"payloadType,omitempty"`
	Operation        *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	ExecutionProfile *ProtoExecutionProfile `protobuf:"bytes,3,req,name=executionProfile" json:"executionProfile,omitempty"`            // Execution Profile entity
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for ProtoCrudExecutionProfileReq fields.
const (
	Default_ProtoCrudExecutionProfileReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_EXECUTION_PROFILE_REQ
)

func (x *ProtoCrudExecutionProfileReq) Reset() {
	*x = ProtoCrudExecutionProfileReq{}
	mi := &file_CSMessages_External_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudExecutionProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudExecutionProfileReq) ProtoMessage() {}

func (x *ProtoCrudExecutionProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudExecutionProfileReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudExecutionProfileReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{185}
}

func (x *ProtoCrudExecutionProfileReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudExecutionProfileReq_PayloadType
}

func (x *ProtoCrudExecutionProfileReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudExecutionProfileReq) GetExecutionProfile() *ProtoExecutionProfile {
	if x != nil {
		return x.ExecutionProfile
	}
	return nil
}

// Response for ProtoCrudExecutionProfileReq
type ProtoCrudExecutionProfileRes struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PayloadType        *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=381" json:"payloadType,omitempty"`
	Operation          *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Execution Profile entity
	ExecutionProfileId *int64                 `protobuf:"varint,3,req,name=executionProfileId" json:"executionProfileId,omitempty"`       // Execution Profile ID
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for ProtoCrudExecutionProfileRes fields.
const (
	Default_ProtoCrudExecutionProfileRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_EXECUTION_PROFILE_RES
)

func (x *ProtoCrudExecutionProfileRes) Reset() {
	*x = ProtoCrudExecutionProfileRes{}
	mi := &file_CSMessages_External_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudExecutionProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudExecutionProfileRes) ProtoMessage() {}

func (x *ProtoCrudExecutionProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudExecutionProfileRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudExecutionProfileRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{186}
}

func (x *ProtoCrudExecutionProfileRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudExecutionProfileRes_PayloadType
}

func (x *ProtoCrudExecutionProfileRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudExecutionProfileRes) GetExecutionProfileId() int64 {
	if x != nil && x.ExecutionProfileId != nil {
		return *x.ExecutionProfileId
	}
	return 0
}

// Event that is sent when Execution Profile is updated/created/deleted
type ProtoExecutionProfileChangedEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PayloadType      *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=382" json:"payloadType,omitempty"`
	Operation        *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	ExecutionProfile *ProtoExecutionProfile `protobuf:"bytes,3,req,name=executionProfile" json:"executionProfile,omitempty"`            // Execution Profile entity
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for ProtoExecutionProfileChangedEvent fields.
const (
	Default_ProtoExecutionProfileChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_EXECUTION_PROFILE_CHANGED_EVENT
)

func (x *ProtoExecutionProfileChangedEvent) Reset() {
	*x = ProtoExecutionProfileChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoExecutionProfileChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoExecutionProfileChangedEvent) ProtoMessage() {}

func (x *ProtoExecutionProfileChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoExecutionProfileChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoExecutionProfileChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{187}
}

func (x *ProtoExecutionProfileChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoExecutionProfileChangedEvent_PayloadType
}

func (x *ProtoExecutionProfileChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoExecutionProfileChangedEvent) GetExecutionProfile() *ProtoExecutionProfile {
	if x != nil {
		return x.ExecutionProfile
	}
	return nil
}

// Request to get list of Execution Profiles
type ProtoExecutionProfileListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=383" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoExecutionProfileListReq fields.
const (
	Default_ProtoExecutionProfileListReq_PayloadType = ProtoCSPayloadType_PROTO_EXECUTION_PROFILE_LIST_REQ
)

func (x *ProtoExecutionProfileListReq) Reset() {
	*x = ProtoExecutionProfileListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoExecutionProfileListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoExecutionProfileListReq) ProtoMessage() {}

func (x *ProtoExecutionProfileListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoExecutionProfileListReq.ProtoReflect.Descriptor instead.
func (*ProtoExecutionProfileListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{188}
}

func (x *ProtoExecutionProfileListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoExecutionProfileListReq_PayloadType
}

// Response for ProtoExecutionProfileListReq
type ProtoExecutionProfileListRes struct {
	state            protoimpl.MessageState   `protogen:"open.v1"`
	PayloadType      *ProtoCSPayloadType      `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=384" json:"payloadType,omitempty"`
	ExecutionProfile []*ProtoExecutionProfile `protobuf:"bytes,2,rep,name=executionProfile" json:"executionProfile,omitempty"` // Execution Profile entities
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for ProtoExecutionProfileListRes fields.
const (
	Default_ProtoExecutionProfileListRes_PayloadType = ProtoCSPayloadType_PROTO_EXECUTION_PROFILE_LIST_RES
)

func (x *ProtoExecutionProfileListRes) Reset() {
	*x = ProtoExecutionProfileListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoExecutionProfileListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoExecutionProfileListRes) ProtoMessage() {}

func (x *ProtoExecutionProfileListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoExecutionProfileListRes.ProtoReflect.Descriptor instead.
func (*ProtoExecutionProfileListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{189}
}

func (x *ProtoExecutionProfileListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoExecutionProfileListRes_PayloadType
}

func (x *ProtoExecutionProfileListRes) GetExecutionProfile() []*ProtoExecutionProfile {
	if x != nil {
		return x.ExecutionProfile
	}
	return nil
}

// Request to create/update/delete Protection Profiles. Profile is a set of settings which is applied within specific Groups
type ProtoCrudProtectionProfileReq struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	PayloadType       *ProtoCSPayloadType     `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=385" json:"payloadType,omitempty"`
	Operation         *ProtoCrudOperation     `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	ProtectionProfile *ProtoProtectionProfile `protobuf:"bytes,3,req,name=protectionProfile" json:"protectionProfile,omitempty"`          // Execution Profile entity
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for ProtoCrudProtectionProfileReq fields.
const (
	Default_ProtoCrudProtectionProfileReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_PROTECTION_PROFILE_REQ
)

func (x *ProtoCrudProtectionProfileReq) Reset() {
	*x = ProtoCrudProtectionProfileReq{}
	mi := &file_CSMessages_External_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudProtectionProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudProtectionProfileReq) ProtoMessage() {}

func (x *ProtoCrudProtectionProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudProtectionProfileReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudProtectionProfileReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{190}
}

func (x *ProtoCrudProtectionProfileReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudProtectionProfileReq_PayloadType
}

func (x *ProtoCrudProtectionProfileReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudProtectionProfileReq) GetProtectionProfile() *ProtoProtectionProfile {
	if x != nil {
		return x.ProtectionProfile
	}
	return nil
}

// Response for ProtoCrudProtectionProfileReq
type ProtoCrudProtectionProfileRes struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PayloadType         *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=386" json:"payloadType,omitempty"`
	Operation           *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	ProtectionProfileId *int64                 `protobuf:"varint,3,req,name=protectionProfileId" json:"protectionProfileId,omitempty"`     // Execution Profile ID
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for ProtoCrudProtectionProfileRes fields.
const (
	Default_ProtoCrudProtectionProfileRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_PROTECTION_PROFILE_RES
)

func (x *ProtoCrudProtectionProfileRes) Reset() {
	*x = ProtoCrudProtectionProfileRes{}
	mi := &file_CSMessages_External_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudProtectionProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudProtectionProfileRes) ProtoMessage() {}

func (x *ProtoCrudProtectionProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudProtectionProfileRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudProtectionProfileRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{191}
}

func (x *ProtoCrudProtectionProfileRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudProtectionProfileRes_PayloadType
}

func (x *ProtoCrudProtectionProfileRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudProtectionProfileRes) GetProtectionProfileId() int64 {
	if x != nil && x.ProtectionProfileId != nil {
		return *x.ProtectionProfileId
	}
	return 0
}

// Event that is sent when Protection Profile updated/created/deleted
type ProtoProtectionProfileChangedEvent struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	PayloadType       *ProtoCSPayloadType     `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=387" json:"payloadType,omitempty"`
	Operation         *ProtoCrudOperation     `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	ProtectionProfile *ProtoProtectionProfile `protobuf:"bytes,3,req,name=protectionProfile" json:"protectionProfile,omitempty"`          // Protection Profile entity
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for ProtoProtectionProfileChangedEvent fields.
const (
	Default_ProtoProtectionProfileChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_PROTECTION_PROFILE_CHANGED_EVENT
)

func (x *ProtoProtectionProfileChangedEvent) Reset() {
	*x = ProtoProtectionProfileChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoProtectionProfileChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoProtectionProfileChangedEvent) ProtoMessage() {}

func (x *ProtoProtectionProfileChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoProtectionProfileChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoProtectionProfileChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{192}
}

func (x *ProtoProtectionProfileChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoProtectionProfileChangedEvent_PayloadType
}

func (x *ProtoProtectionProfileChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoProtectionProfileChangedEvent) GetProtectionProfile() *ProtoProtectionProfile {
	if x != nil {
		return x.ProtectionProfile
	}
	return nil
}

// Request to get list of Protection Profiles
type ProtoProtectionProfileListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=388" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoProtectionProfileListReq fields.
const (
	Default_ProtoProtectionProfileListReq_PayloadType = ProtoCSPayloadType_PROTO_PROTECTION_PROFILE_LIST_REQ
)

func (x *ProtoProtectionProfileListReq) Reset() {
	*x = ProtoProtectionProfileListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoProtectionProfileListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoProtectionProfileListReq) ProtoMessage() {}

func (x *ProtoProtectionProfileListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoProtectionProfileListReq.ProtoReflect.Descriptor instead.
func (*ProtoProtectionProfileListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{193}
}

func (x *ProtoProtectionProfileListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoProtectionProfileListReq_PayloadType
}

// Response for ProtoProtectionProfileListReq
type ProtoProtectionProfileListRes struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	PayloadType       *ProtoCSPayloadType       `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=389" json:"payloadType,omitempty"`
	ProtectionProfile []*ProtoProtectionProfile `protobuf:"bytes,2,rep,name=protectionProfile" json:"protectionProfile,omitempty"` // Protection Profile entities
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for ProtoProtectionProfileListRes fields.
const (
	Default_ProtoProtectionProfileListRes_PayloadType = ProtoCSPayloadType_PROTO_PROTECTION_PROFILE_LIST_RES
)

func (x *ProtoProtectionProfileListRes) Reset() {
	*x = ProtoProtectionProfileListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoProtectionProfileListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoProtectionProfileListRes) ProtoMessage() {}

func (x *ProtoProtectionProfileListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoProtectionProfileListRes.ProtoReflect.Descriptor instead.
func (*ProtoProtectionProfileListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{194}
}

func (x *ProtoProtectionProfileListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoProtectionProfileListRes_PayloadType
}

func (x *ProtoProtectionProfileListRes) GetProtectionProfile() []*ProtoProtectionProfile {
	if x != nil {
		return x.ProtectionProfile
	}
	return nil
}

// Request to create/update/delete Swap Free (Administrative Fee) Profiles which can be used instead of Swap Profile. Profile is a set of settings which is applied within specific Groups
type ProtoCrudSwapFreeProfileReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PayloadType     *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=390" json:"payloadType,omitempty"`
	Operation       *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	SwapFreeProfile *ProtoSwapFreeProfile  `protobuf:"bytes,3,req,name=swapFreeProfile" json:"swapFreeProfile,omitempty"`              // Swap Free Profile entity
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for ProtoCrudSwapFreeProfileReq fields.
const (
	Default_ProtoCrudSwapFreeProfileReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_SWAP_FREE_PROFILE_REQ
)

func (x *ProtoCrudSwapFreeProfileReq) Reset() {
	*x = ProtoCrudSwapFreeProfileReq{}
	mi := &file_CSMessages_External_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudSwapFreeProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudSwapFreeProfileReq) ProtoMessage() {}

func (x *ProtoCrudSwapFreeProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudSwapFreeProfileReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudSwapFreeProfileReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{195}
}

func (x *ProtoCrudSwapFreeProfileReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudSwapFreeProfileReq_PayloadType
}

func (x *ProtoCrudSwapFreeProfileReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudSwapFreeProfileReq) GetSwapFreeProfile() *ProtoSwapFreeProfile {
	if x != nil {
		return x.SwapFreeProfile
	}
	return nil
}

// Response for ProtoCrudSwapFreeProfileReq
type ProtoCrudSwapFreeProfileRes struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PayloadType       *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=391" json:"payloadType,omitempty"`
	Operation         *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	SwapFreeProfileId *int64                 `protobuf:"varint,3,req,name=swapFreeProfileId" json:"swapFreeProfileId,omitempty"`         // Swap Free Profile ID
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for ProtoCrudSwapFreeProfileRes fields.
const (
	Default_ProtoCrudSwapFreeProfileRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_SWAP_FREE_PROFILE_RES
)

func (x *ProtoCrudSwapFreeProfileRes) Reset() {
	*x = ProtoCrudSwapFreeProfileRes{}
	mi := &file_CSMessages_External_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudSwapFreeProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudSwapFreeProfileRes) ProtoMessage() {}

func (x *ProtoCrudSwapFreeProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudSwapFreeProfileRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudSwapFreeProfileRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{196}
}

func (x *ProtoCrudSwapFreeProfileRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudSwapFreeProfileRes_PayloadType
}

func (x *ProtoCrudSwapFreeProfileRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudSwapFreeProfileRes) GetSwapFreeProfileId() int64 {
	if x != nil && x.SwapFreeProfileId != nil {
		return *x.SwapFreeProfileId
	}
	return 0
}

// Event that is sent when Swap Free (Administrative Fee) Profile updated/created/deleted
type ProtoSwapFreeProfileChangedEvent struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PayloadType     *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=392" json:"payloadType,omitempty"`
	Operation       *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	SwapFreeProfile *ProtoSwapFreeProfile  `protobuf:"bytes,3,req,name=swapFreeProfile" json:"swapFreeProfile,omitempty"`              // Swap Free Profile entity
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for ProtoSwapFreeProfileChangedEvent fields.
const (
	Default_ProtoSwapFreeProfileChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_SWAP_FREE_PROFILE_CHANGED_EVENT
)

func (x *ProtoSwapFreeProfileChangedEvent) Reset() {
	*x = ProtoSwapFreeProfileChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSwapFreeProfileChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSwapFreeProfileChangedEvent) ProtoMessage() {}

func (x *ProtoSwapFreeProfileChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSwapFreeProfileChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoSwapFreeProfileChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{197}
}

func (x *ProtoSwapFreeProfileChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSwapFreeProfileChangedEvent_PayloadType
}

func (x *ProtoSwapFreeProfileChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoSwapFreeProfileChangedEvent) GetSwapFreeProfile() *ProtoSwapFreeProfile {
	if x != nil {
		return x.SwapFreeProfile
	}
	return nil
}

// Request to get list of Swap Free Profiles
type ProtoSwapFreeProfileListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=393" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoSwapFreeProfileListReq fields.
const (
	Default_ProtoSwapFreeProfileListReq_PayloadType = ProtoCSPayloadType_PROTO_SWAP_FREE_PROFILE_LIST_REQ
)

func (x *ProtoSwapFreeProfileListReq) Reset() {
	*x = ProtoSwapFreeProfileListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSwapFreeProfileListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSwapFreeProfileListReq) ProtoMessage() {}

func (x *ProtoSwapFreeProfileListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSwapFreeProfileListReq.ProtoReflect.Descriptor instead.
func (*ProtoSwapFreeProfileListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{198}
}

func (x *ProtoSwapFreeProfileListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSwapFreeProfileListReq_PayloadType
}

// Response for ProtoSwapFreeProfileListReq
type ProtoSwapFreeProfileListRes struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	PayloadType     *ProtoCSPayloadType     `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=394" json:"payloadType,omitempty"`
	SwapFreeProfile []*ProtoSwapFreeProfile `protobuf:"bytes,2,rep,name=swapFreeProfile" json:"swapFreeProfile,omitempty"` // Swap Free Profile entities
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for ProtoSwapFreeProfileListRes fields.
const (
	Default_ProtoSwapFreeProfileListRes_PayloadType = ProtoCSPayloadType_PROTO_SWAP_FREE_PROFILE_LIST_RES
)

func (x *ProtoSwapFreeProfileListRes) Reset() {
	*x = ProtoSwapFreeProfileListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSwapFreeProfileListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSwapFreeProfileListRes) ProtoMessage() {}

func (x *ProtoSwapFreeProfileListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSwapFreeProfileListRes.ProtoReflect.Descriptor instead.
func (*ProtoSwapFreeProfileListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{199}
}

func (x *ProtoSwapFreeProfileListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSwapFreeProfileListRes_PayloadType
}

func (x *ProtoSwapFreeProfileListRes) GetSwapFreeProfile() []*ProtoSwapFreeProfile {
	if x != nil {
		return x.SwapFreeProfile
	}
	return nil
}

// Request to get create/update/delete Holiday. Holiday is a date when trading is stopped
type ProtoCrudHolidayReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=395" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	Holiday       *ProtoHoliday          `protobuf:"bytes,3,req,name=holiday" json:"holiday,omitempty"`                              // Holiday entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudHolidayReq fields.
const (
	Default_ProtoCrudHolidayReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_HOLIDAY_REQ
)

func (x *ProtoCrudHolidayReq) Reset() {
	*x = ProtoCrudHolidayReq{}
	mi := &file_CSMessages_External_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudHolidayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudHolidayReq) ProtoMessage() {}

func (x *ProtoCrudHolidayReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudHolidayReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudHolidayReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{200}
}

func (x *ProtoCrudHolidayReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudHolidayReq_PayloadType
}

func (x *ProtoCrudHolidayReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudHolidayReq) GetHoliday() *ProtoHoliday {
	if x != nil {
		return x.Holiday
	}
	return nil
}

// Response for ProtoCrudHolidayReq
type ProtoCrudHolidayRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=396" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	HolidayId     *int64                 `protobuf:"varint,3,req,name=holidayId" json:"holidayId,omitempty"`                         // Holiday ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCrudHolidayRes fields.
const (
	Default_ProtoCrudHolidayRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_HOLIDAY_RES
)

func (x *ProtoCrudHolidayRes) Reset() {
	*x = ProtoCrudHolidayRes{}
	mi := &file_CSMessages_External_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudHolidayRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudHolidayRes) ProtoMessage() {}

func (x *ProtoCrudHolidayRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudHolidayRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudHolidayRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{201}
}

func (x *ProtoCrudHolidayRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudHolidayRes_PayloadType
}

func (x *ProtoCrudHolidayRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudHolidayRes) GetHolidayId() int64 {
	if x != nil && x.HolidayId != nil {
		return *x.HolidayId
	}
	return 0
}

// Event that is sent when Holiday is updated/created/deleted
type ProtoHolidayChangedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=397" json:"payloadType,omitempty"`
	Operation     *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	Holiday       *ProtoHoliday          `protobuf:"bytes,3,req,name=holiday" json:"holiday,omitempty"`                              // Holiday entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoHolidayChangedEvent fields.
const (
	Default_ProtoHolidayChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_HOLIDAY_CHANGED_EVENT
)

func (x *ProtoHolidayChangedEvent) Reset() {
	*x = ProtoHolidayChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoHolidayChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHolidayChangedEvent) ProtoMessage() {}

func (x *ProtoHolidayChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHolidayChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoHolidayChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{202}
}

func (x *ProtoHolidayChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoHolidayChangedEvent_PayloadType
}

func (x *ProtoHolidayChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoHolidayChangedEvent) GetHoliday() *ProtoHoliday {
	if x != nil {
		return x.Holiday
	}
	return nil
}

// Request to get list Holidays
type ProtoHolidayListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=398" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoHolidayListReq fields.
const (
	Default_ProtoHolidayListReq_PayloadType = ProtoCSPayloadType_PROTO_HOLIDAY_LIST_REQ
)

func (x *ProtoHolidayListReq) Reset() {
	*x = ProtoHolidayListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoHolidayListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHolidayListReq) ProtoMessage() {}

func (x *ProtoHolidayListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHolidayListReq.ProtoReflect.Descriptor instead.
func (*ProtoHolidayListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{203}
}

func (x *ProtoHolidayListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoHolidayListReq_PayloadType
}

// Response for ProtoHolidayListReq
type ProtoHolidayListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=399" json:"payloadType,omitempty"`
	Holiday       []*ProtoHoliday        `protobuf:"bytes,2,rep,name=holiday" json:"holiday,omitempty"` // Holiday entities
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoHolidayListRes fields.
const (
	Default_ProtoHolidayListRes_PayloadType = ProtoCSPayloadType_PROTO_HOLIDAY_LIST_RES
)

func (x *ProtoHolidayListRes) Reset() {
	*x = ProtoHolidayListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoHolidayListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHolidayListRes) ProtoMessage() {}

func (x *ProtoHolidayListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHolidayListRes.ProtoReflect.Descriptor instead.
func (*ProtoHolidayListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{204}
}

func (x *ProtoHolidayListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoHolidayListRes_PayloadType
}

func (x *ProtoHolidayListRes) GetHoliday() []*ProtoHoliday {
	if x != nil {
		return x.Holiday
	}
	return nil
}

// Request to get create/update/delete Holiday Profile. Profile is a set of settings which is applied within specific Groups
type ProtoCrudHolidayProfileReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PayloadType    *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=400" json:"payloadType,omitempty"`
	Operation      *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	HolidayProfile *ProtoHolidayProfile   `protobuf:"bytes,3,req,name=holidayProfile" json:"holidayProfile,omitempty"`                // Holiday Profile entity
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for ProtoCrudHolidayProfileReq fields.
const (
	Default_ProtoCrudHolidayProfileReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_HOLIDAY_PROFILE_REQ
)

func (x *ProtoCrudHolidayProfileReq) Reset() {
	*x = ProtoCrudHolidayProfileReq{}
	mi := &file_CSMessages_External_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudHolidayProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudHolidayProfileReq) ProtoMessage() {}

func (x *ProtoCrudHolidayProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudHolidayProfileReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudHolidayProfileReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{205}
}

func (x *ProtoCrudHolidayProfileReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudHolidayProfileReq_PayloadType
}

func (x *ProtoCrudHolidayProfileReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudHolidayProfileReq) GetHolidayProfile() *ProtoHolidayProfile {
	if x != nil {
		return x.HolidayProfile
	}
	return nil
}

// Response for ProtoCrudHolidayProfileReq
type ProtoCrudHolidayProfileRes struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PayloadType      *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=401" json:"payloadType,omitempty"`
	Operation        *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	HolidayProfileId *int64                 `protobuf:"varint,3,req,name=holidayProfileId" json:"holidayProfileId,omitempty"`           // Holiday Profile id
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for ProtoCrudHolidayProfileRes fields.
const (
	Default_ProtoCrudHolidayProfileRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_HOLIDAY_PROFILE_RES
)

func (x *ProtoCrudHolidayProfileRes) Reset() {
	*x = ProtoCrudHolidayProfileRes{}
	mi := &file_CSMessages_External_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudHolidayProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudHolidayProfileRes) ProtoMessage() {}

func (x *ProtoCrudHolidayProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudHolidayProfileRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudHolidayProfileRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{206}
}

func (x *ProtoCrudHolidayProfileRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudHolidayProfileRes_PayloadType
}

func (x *ProtoCrudHolidayProfileRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudHolidayProfileRes) GetHolidayProfileId() int64 {
	if x != nil && x.HolidayProfileId != nil {
		return *x.HolidayProfileId
	}
	return 0
}

// Event that is sent when Holiday Profile is updated/created/deleted
type ProtoHolidayProfileChangedEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PayloadType    *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=402" json:"payloadType,omitempty"`
	Operation      *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete operation
	HolidayProfile *ProtoHolidayProfile   `protobuf:"bytes,3,req,name=holidayProfile" json:"holidayProfile,omitempty"`                // Holiday Profile entity
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for ProtoHolidayProfileChangedEvent fields.
const (
	Default_ProtoHolidayProfileChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_HOLIDAY_PROFILE_CHANGED_EVENT
)

func (x *ProtoHolidayProfileChangedEvent) Reset() {
	*x = ProtoHolidayProfileChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoHolidayProfileChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHolidayProfileChangedEvent) ProtoMessage() {}

func (x *ProtoHolidayProfileChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHolidayProfileChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoHolidayProfileChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{207}
}

func (x *ProtoHolidayProfileChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoHolidayProfileChangedEvent_PayloadType
}

func (x *ProtoHolidayProfileChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoHolidayProfileChangedEvent) GetHolidayProfile() *ProtoHolidayProfile {
	if x != nil {
		return x.HolidayProfile
	}
	return nil
}

// Request to get list Holiday Profiles
type ProtoHolidayProfileListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=447" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoHolidayProfileListReq fields.
const (
	Default_ProtoHolidayProfileListReq_PayloadType = ProtoCSPayloadType_PROTO_HOLIDAY_PROFILE_LIST_REQ
)

func (x *ProtoHolidayProfileListReq) Reset() {
	*x = ProtoHolidayProfileListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoHolidayProfileListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHolidayProfileListReq) ProtoMessage() {}

func (x *ProtoHolidayProfileListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHolidayProfileListReq.ProtoReflect.Descriptor instead.
func (*ProtoHolidayProfileListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{208}
}

func (x *ProtoHolidayProfileListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoHolidayProfileListReq_PayloadType
}

// Response for ProtoHolidayProfileListReq
type ProtoHolidayProfileListRes struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PayloadType    *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=448" json:"payloadType,omitempty"`
	HolidayProfile []*ProtoHolidayProfile `protobuf:"bytes,2,rep,name=holidayProfile" json:"holidayProfile,omitempty"` // Holiday Profile entities
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for ProtoHolidayProfileListRes fields.
const (
	Default_ProtoHolidayProfileListRes_PayloadType = ProtoCSPayloadType_PROTO_HOLIDAY_PROFILE_LIST_RES
)

func (x *ProtoHolidayProfileListRes) Reset() {
	*x = ProtoHolidayProfileListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoHolidayProfileListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHolidayProfileListRes) ProtoMessage() {}

func (x *ProtoHolidayProfileListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHolidayProfileListRes.ProtoReflect.Descriptor instead.
func (*ProtoHolidayProfileListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{209}
}

func (x *ProtoHolidayProfileListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoHolidayProfileListRes_PayloadType
}

func (x *ProtoHolidayProfileListRes) GetHolidayProfile() []*ProtoHolidayProfile {
	if x != nil {
		return x.HolidayProfile
	}
	return nil
}

// Request to get list liquidity Feeds connected to Symbols
type ProtoLiquidityFeedSymbolListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=489" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoLiquidityFeedSymbolListReq fields.
const (
	Default_ProtoLiquidityFeedSymbolListReq_PayloadType = ProtoCSPayloadType_PROTO_LIQUIDITY_FEED_SYMBOL_LIST_REQ
)

func (x *ProtoLiquidityFeedSymbolListReq) Reset() {
	*x = ProtoLiquidityFeedSymbolListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLiquidityFeedSymbolListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLiquidityFeedSymbolListReq) ProtoMessage() {}

func (x *ProtoLiquidityFeedSymbolListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLiquidityFeedSymbolListReq.ProtoReflect.Descriptor instead.
func (*ProtoLiquidityFeedSymbolListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{210}
}

func (x *ProtoLiquidityFeedSymbolListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoLiquidityFeedSymbolListReq_PayloadType
}

// Response for ProtoLiquidityFeedSymbolListReq
type ProtoLiquidityFeedSymbolListRes struct {
	state               protoimpl.MessageState      `protogen:"open.v1"`
	PayloadType         *ProtoCSPayloadType         `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=490" json:"payloadType,omitempty"`
	LiquidityFeedSymbol []*ProtoLiquidityFeedSymbol `protobuf:"bytes,2,rep,name=liquidityFeedSymbol" json:"liquidityFeedSymbol,omitempty"` // Liquidity Feeds for Symbols
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for ProtoLiquidityFeedSymbolListRes fields.
const (
	Default_ProtoLiquidityFeedSymbolListRes_PayloadType = ProtoCSPayloadType_PROTO_LIQUIDITY_FEED_SYMBOL_LIST_RES
)

func (x *ProtoLiquidityFeedSymbolListRes) Reset() {
	*x = ProtoLiquidityFeedSymbolListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLiquidityFeedSymbolListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLiquidityFeedSymbolListRes) ProtoMessage() {}

func (x *ProtoLiquidityFeedSymbolListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLiquidityFeedSymbolListRes.ProtoReflect.Descriptor instead.
func (*ProtoLiquidityFeedSymbolListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{211}
}

func (x *ProtoLiquidityFeedSymbolListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoLiquidityFeedSymbolListRes_PayloadType
}

func (x *ProtoLiquidityFeedSymbolListRes) GetLiquidityFeedSymbol() []*ProtoLiquidityFeedSymbol {
	if x != nil {
		return x.LiquidityFeedSymbol
	}
	return nil
}

// Request to create Symbol
type ProtoCreateSymbolReq struct {
	state                             protoimpl.MessageState `protogen:"open.v1"`
	PayloadType                       *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=571" json:"payloadType,omitempty"`
	Name                              *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                                             // Symbol name
	Digits                            *int32                 `protobuf:"varint,3,req,name=digits" json:"digits,omitempty"`                                                        // Number of digits after comma in the price
	PipPosition                       *int32                 `protobuf:"varint,4,req,name=pipPosition" json:"pipPosition,omitempty"`                                              // Specifies digit which is used for determining pip Position
	Description                       *string                `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`                                               // Description for the Symbol
	MeasurementUnits                  *string                `protobuf:"bytes,6,opt,name=measurementUnits" json:"measurementUnits,omitempty"`                                     // OZ (ounces), BBL (barrels), BTU (British thermal units), etc.
	TradingMode                       *ProtoTradingMode      `protobuf:"varint,7,req,name=tradingMode,enum=ProtoTradingMode" json:"tradingMode,omitempty"`                        // Specified trading mode for the Symbol that limits scope of trading operations Default: TRADING_MODE_ENABLED
	LotSize                           *int64                 `protobuf:"varint,8,req,name=lotSize" json:"lotSize,omitempty"`                                                      // Amount of units of the base Asset in one lot
	SymbolCategoryId                  *int64                 `protobuf:"varint,9,req,name=symbolCategoryId" json:"symbolCategoryId,omitempty"`                                    // ID of the Symbol Category where Symbol is located
	BaseAssetId                       *int64                 `protobuf:"varint,10,req,name=baseAssetId" json:"baseAssetId,omitempty"`                                             // ID of the base Asset
	QuoteAssetId                      *int64                 `protobuf:"varint,11,req,name=quoteAssetId" json:"quoteAssetId,omitempty"`                                           // ID of the quote Asset
	DefaultVolumeProfileId            *int64                 `protobuf:"varint,12,req,name=defaultVolumeProfileId" json:"defaultVolumeProfileId,omitempty"`                       // Default Volume Profile for Symbol
	DefaultCommissionProfileId        *int64                 `protobuf:"varint,13,req,name=defaultCommissionProfileId" json:"defaultCommissionProfileId,omitempty"`               // Default Commission Profile for Symbol
	DefaultExecutionProfileId         *int64                 `protobuf:"varint,14,req,name=defaultExecutionProfileId" json:"defaultExecutionProfileId,omitempty"`                 // Default Execution Profile for Symbol
	DefaultLeverageId                 *int64                 `protobuf:"varint,15,req,name=defaultLeverageId" json:"defaultLeverageId,omitempty"`                                 // Default Leverage Profile for Symbol
	DefaultProtectionProfileId        *int64                 `protobuf:"varint,16,req,name=defaultProtectionProfileId" json:"defaultProtectionProfileId,omitempty"`               // Default Protection Profile for Symbol
	DefaultSwapFreeProfileId          *int64                 `protobuf:"varint,17,req,name=defaultSwapFreeProfileId" json:"defaultSwapFreeProfileId,omitempty"`                   // Default Swap Free Profile profile for Symbol
	DefaultGSLScheduleId              *int64                 `protobuf:"varint,18,req,name=defaultGSLScheduleId" json:"defaultGSLScheduleId,omitempty"`                           // Default GSL Schedule Profile for Symbol
	ScheduleProfileId                 *int64                 `protobuf:"varint,19,req,name=scheduleProfileId" json:"scheduleProfileId,omitempty"`                                 // Default Trading Schedule Profile for Symbol
	PriceLiquidityFeedId              *uint32                `protobuf:"varint,20,req,name=priceLiquidityFeedId" json:"priceLiquidityFeedId,omitempty"`                           // Default Price Liquidity Feed for Symbol
	TradeLiquidityFeedId              *uint32                `protobuf:"varint,21,req,name=tradeLiquidityFeedId" json:"tradeLiquidityFeedId,omitempty"`                           // Default Trade Liquidity Feed for Symbol
	HolidayProfileId                  *int64                 `protobuf:"varint,22,req,name=holidayProfileId" json:"holidayProfileId,omitempty"`                                   // Holiday Profile for Symbol
	FuturesSettings                   *ProtoFuturesSettings  `protobuf:"bytes,23,opt,name=futuresSettings" json:"futuresSettings,omitempty"`                                      // Futures settings for Symbol
	DefaultTradeNotificationProfileId *int64                 `protobuf:"varint,24,req,name=defaultTradeNotificationProfileId" json:"defaultTradeNotificationProfileId,omitempty"` // Default trade Notification Profile for Symbol
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

// Default values for ProtoCreateSymbolReq fields.
const (
	Default_ProtoCreateSymbolReq_PayloadType = ProtoCSPayloadType_PROTO_CREATE_SYMBOL_REQ
)

func (x *ProtoCreateSymbolReq) Reset() {
	*x = ProtoCreateSymbolReq{}
	mi := &file_CSMessages_External_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCreateSymbolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCreateSymbolReq) ProtoMessage() {}

func (x *ProtoCreateSymbolReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCreateSymbolReq.ProtoReflect.Descriptor instead.
func (*ProtoCreateSymbolReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{212}
}

func (x *ProtoCreateSymbolReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCreateSymbolReq_PayloadType
}

func (x *ProtoCreateSymbolReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoCreateSymbolReq) GetDigits() int32 {
	if x != nil && x.Digits != nil {
		return *x.Digits
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetPipPosition() int32 {
	if x != nil && x.PipPosition != nil {
		return *x.PipPosition
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoCreateSymbolReq) GetMeasurementUnits() string {
	if x != nil && x.MeasurementUnits != nil {
		return *x.MeasurementUnits
	}
	return ""
}

func (x *ProtoCreateSymbolReq) GetTradingMode() ProtoTradingMode {
	if x != nil && x.TradingMode != nil {
		return *x.TradingMode
	}
	return ProtoTradingMode_ENABLED
}

func (x *ProtoCreateSymbolReq) GetLotSize() int64 {
	if x != nil && x.LotSize != nil {
		return *x.LotSize
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetSymbolCategoryId() int64 {
	if x != nil && x.SymbolCategoryId != nil {
		return *x.SymbolCategoryId
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetBaseAssetId() int64 {
	if x != nil && x.BaseAssetId != nil {
		return *x.BaseAssetId
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetQuoteAssetId() int64 {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetDefaultVolumeProfileId() int64 {
	if x != nil && x.DefaultVolumeProfileId != nil {
		return *x.DefaultVolumeProfileId
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetDefaultCommissionProfileId() int64 {
	if x != nil && x.DefaultCommissionProfileId != nil {
		return *x.DefaultCommissionProfileId
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetDefaultExecutionProfileId() int64 {
	if x != nil && x.DefaultExecutionProfileId != nil {
		return *x.DefaultExecutionProfileId
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetDefaultLeverageId() int64 {
	if x != nil && x.DefaultLeverageId != nil {
		return *x.DefaultLeverageId
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetDefaultProtectionProfileId() int64 {
	if x != nil && x.DefaultProtectionProfileId != nil {
		return *x.DefaultProtectionProfileId
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetDefaultSwapFreeProfileId() int64 {
	if x != nil && x.DefaultSwapFreeProfileId != nil {
		return *x.DefaultSwapFreeProfileId
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetDefaultGSLScheduleId() int64 {
	if x != nil && x.DefaultGSLScheduleId != nil {
		return *x.DefaultGSLScheduleId
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetScheduleProfileId() int64 {
	if x != nil && x.ScheduleProfileId != nil {
		return *x.ScheduleProfileId
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetPriceLiquidityFeedId() uint32 {
	if x != nil && x.PriceLiquidityFeedId != nil {
		return *x.PriceLiquidityFeedId
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetTradeLiquidityFeedId() uint32 {
	if x != nil && x.TradeLiquidityFeedId != nil {
		return *x.TradeLiquidityFeedId
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetHolidayProfileId() int64 {
	if x != nil && x.HolidayProfileId != nil {
		return *x.HolidayProfileId
	}
	return 0
}

func (x *ProtoCreateSymbolReq) GetFuturesSettings() *ProtoFuturesSettings {
	if x != nil {
		return x.FuturesSettings
	}
	return nil
}

func (x *ProtoCreateSymbolReq) GetDefaultTradeNotificationProfileId() int64 {
	if x != nil && x.DefaultTradeNotificationProfileId != nil {
		return *x.DefaultTradeNotificationProfileId
	}
	return 0
}

// Response for ProtoCreateSymbolReq
type ProtoCreateSymbolRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=572" json:"payloadType,omitempty"`
	SymbolId      *int64                 `protobuf:"varint,2,req,name=symbolId" json:"symbolId,omitempty"` // The unique identifier of the Symbol in specific server environment within cTrader platform
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoCreateSymbolRes fields.
const (
	Default_ProtoCreateSymbolRes_PayloadType = ProtoCSPayloadType_PROTO_CREATE_SYMBOL_RES
)

func (x *ProtoCreateSymbolRes) Reset() {
	*x = ProtoCreateSymbolRes{}
	mi := &file_CSMessages_External_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCreateSymbolRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCreateSymbolRes) ProtoMessage() {}

func (x *ProtoCreateSymbolRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCreateSymbolRes.ProtoReflect.Descriptor instead.
func (*ProtoCreateSymbolRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{213}
}

func (x *ProtoCreateSymbolRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCreateSymbolRes_PayloadType
}

func (x *ProtoCreateSymbolRes) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

// Event that is sent when Symbol becomes archived
type ProtoSymbolArchivedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=575" json:"payloadType,omitempty"`
	SymbolId      *int64                 `protobuf:"varint,2,req,name=symbolId" json:"symbolId,omitempty"` // The unique identifier of the Symbol in specific server environment within cTrader platform
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoSymbolArchivedEvent fields.
const (
	Default_ProtoSymbolArchivedEvent_PayloadType = ProtoCSPayloadType_PROTO_SYMBOL_ARCHIVED_EVENT
)

func (x *ProtoSymbolArchivedEvent) Reset() {
	*x = ProtoSymbolArchivedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSymbolArchivedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSymbolArchivedEvent) ProtoMessage() {}

func (x *ProtoSymbolArchivedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSymbolArchivedEvent.ProtoReflect.Descriptor instead.
func (*ProtoSymbolArchivedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{214}
}

func (x *ProtoSymbolArchivedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSymbolArchivedEvent_PayloadType
}

func (x *ProtoSymbolArchivedEvent) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

// Event that is sent when Symbol becomes restored (from archived status back to active)
type ProtoSymbolRestoredEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=580" json:"payloadType,omitempty"`
	Symbol        *ProtoManagerSymbol    `protobuf:"bytes,2,req,name=symbol" json:"symbol,omitempty"` // Symbol entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoSymbolRestoredEvent fields.
const (
	Default_ProtoSymbolRestoredEvent_PayloadType = ProtoCSPayloadType_PROTO_SYMBOL_RESTORED_EVENT
)

func (x *ProtoSymbolRestoredEvent) Reset() {
	*x = ProtoSymbolRestoredEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSymbolRestoredEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSymbolRestoredEvent) ProtoMessage() {}

func (x *ProtoSymbolRestoredEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSymbolRestoredEvent.ProtoReflect.Descriptor instead.
func (*ProtoSymbolRestoredEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{215}
}

func (x *ProtoSymbolRestoredEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSymbolRestoredEvent_PayloadType
}

func (x *ProtoSymbolRestoredEvent) GetSymbol() *ProtoManagerSymbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

// Request to get list Swap Profiles (with limited number of fields)
type ProtoLightSwapAndDividendProfileListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=493" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoLightSwapAndDividendProfileListReq fields.
const (
	Default_ProtoLightSwapAndDividendProfileListReq_PayloadType = ProtoCSPayloadType_PROTO_LIGHT_SWAP_AND_DIVIDEND_PROFILE_LIST_REQ
)

func (x *ProtoLightSwapAndDividendProfileListReq) Reset() {
	*x = ProtoLightSwapAndDividendProfileListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLightSwapAndDividendProfileListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLightSwapAndDividendProfileListReq) ProtoMessage() {}

func (x *ProtoLightSwapAndDividendProfileListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLightSwapAndDividendProfileListReq.ProtoReflect.Descriptor instead.
func (*ProtoLightSwapAndDividendProfileListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{216}
}

func (x *ProtoLightSwapAndDividendProfileListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoLightSwapAndDividendProfileListReq_PayloadType
}

// Response for ProtoLightSwapAndDividendProfileListReq
type ProtoLightSwapAndDividendProfileListRes struct {
	state                  protoimpl.MessageState              `protogen:"open.v1"`
	PayloadType            *ProtoCSPayloadType                 `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=494" json:"payloadType,omitempty"`
	SwapAndDividendProfile []*ProtoLightSwapAndDividendProfile `protobuf:"bytes,2,rep,name=swapAndDividendProfile" json:"swapAndDividendProfile,omitempty"` // Swap And Dividend Profile entities (with limited number of fields)
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for ProtoLightSwapAndDividendProfileListRes fields.
const (
	Default_ProtoLightSwapAndDividendProfileListRes_PayloadType = ProtoCSPayloadType_PROTO_LIGHT_SWAP_AND_DIVIDEND_PROFILE_LIST_RES
)

func (x *ProtoLightSwapAndDividendProfileListRes) Reset() {
	*x = ProtoLightSwapAndDividendProfileListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLightSwapAndDividendProfileListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLightSwapAndDividendProfileListRes) ProtoMessage() {}

func (x *ProtoLightSwapAndDividendProfileListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLightSwapAndDividendProfileListRes.ProtoReflect.Descriptor instead.
func (*ProtoLightSwapAndDividendProfileListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{217}
}

func (x *ProtoLightSwapAndDividendProfileListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoLightSwapAndDividendProfileListRes_PayloadType
}

func (x *ProtoLightSwapAndDividendProfileListRes) GetSwapAndDividendProfile() []*ProtoLightSwapAndDividendProfile {
	if x != nil {
		return x.SwapAndDividendProfile
	}
	return nil
}

// Request to get Swap and Dividend Profile by id
type ProtoSwapAndDividendProfileByIdReq struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	PayloadType              *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=495" json:"payloadType,omitempty"`
	SwapAndDividendProfileId *int64                 `protobuf:"varint,2,req,name=swapAndDividendProfileId" json:"swapAndDividendProfileId,omitempty"` // Swap And Dividend Profile ID
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for ProtoSwapAndDividendProfileByIdReq fields.
const (
	Default_ProtoSwapAndDividendProfileByIdReq_PayloadType = ProtoCSPayloadType_PROTO_SWAP_AND_DIVIDEND_PROFILE_BY_ID_REQ
)

func (x *ProtoSwapAndDividendProfileByIdReq) Reset() {
	*x = ProtoSwapAndDividendProfileByIdReq{}
	mi := &file_CSMessages_External_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSwapAndDividendProfileByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSwapAndDividendProfileByIdReq) ProtoMessage() {}

func (x *ProtoSwapAndDividendProfileByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSwapAndDividendProfileByIdReq.ProtoReflect.Descriptor instead.
func (*ProtoSwapAndDividendProfileByIdReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{218}
}

func (x *ProtoSwapAndDividendProfileByIdReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSwapAndDividendProfileByIdReq_PayloadType
}

func (x *ProtoSwapAndDividendProfileByIdReq) GetSwapAndDividendProfileId() int64 {
	if x != nil && x.SwapAndDividendProfileId != nil {
		return *x.SwapAndDividendProfileId
	}
	return 0
}

// Response for ProtoSwapAndDividendProfileByIdReq
type ProtoSwapAndDividendProfileByIdRes struct {
	state                  protoimpl.MessageState       `protogen:"open.v1"`
	PayloadType            *ProtoCSPayloadType          `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=496" json:"payloadType,omitempty"`
	SwapAndDividendProfile *ProtoSwapAndDividendProfile `protobuf:"bytes,2,req,name=swapAndDividendProfile" json:"swapAndDividendProfile,omitempty"` // Swap And Dividend Profile entity
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for ProtoSwapAndDividendProfileByIdRes fields.
const (
	Default_ProtoSwapAndDividendProfileByIdRes_PayloadType = ProtoCSPayloadType_PROTO_SWAP_AND_DIVIDEND_PROFILE_BY_ID_RES
)

func (x *ProtoSwapAndDividendProfileByIdRes) Reset() {
	*x = ProtoSwapAndDividendProfileByIdRes{}
	mi := &file_CSMessages_External_proto_msgTypes[219]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSwapAndDividendProfileByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSwapAndDividendProfileByIdRes) ProtoMessage() {}

func (x *ProtoSwapAndDividendProfileByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[219]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSwapAndDividendProfileByIdRes.ProtoReflect.Descriptor instead.
func (*ProtoSwapAndDividendProfileByIdRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{219}
}

func (x *ProtoSwapAndDividendProfileByIdRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSwapAndDividendProfileByIdRes_PayloadType
}

func (x *ProtoSwapAndDividendProfileByIdRes) GetSwapAndDividendProfile() *ProtoSwapAndDividendProfile {
	if x != nil {
		return x.SwapAndDividendProfile
	}
	return nil
}

// Request to get Manager by id
type ProtoManagerByIdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=226" json:"payloadType,omitempty"`
	ManagerId     *int64                 `protobuf:"varint,2,req,name=managerId" json:"managerId,omitempty"` // ID of the Manager
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerByIdReq fields.
const (
	Default_ProtoManagerByIdReq_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_BY_ID_REQ
)

func (x *ProtoManagerByIdReq) Reset() {
	*x = ProtoManagerByIdReq{}
	mi := &file_CSMessages_External_proto_msgTypes[220]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerByIdReq) ProtoMessage() {}

func (x *ProtoManagerByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[220]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerByIdReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerByIdReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{220}
}

func (x *ProtoManagerByIdReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerByIdReq_PayloadType
}

func (x *ProtoManagerByIdReq) GetManagerId() int64 {
	if x != nil && x.ManagerId != nil {
		return *x.ManagerId
	}
	return 0
}

// Response for ProtoManagerByIdReq
type ProtoManagerByIdRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=227" json:"payloadType,omitempty"`
	Manager       *ProtoManager          `protobuf:"bytes,2,req,name=manager" json:"manager,omitempty"` // Manager entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerByIdRes fields.
const (
	Default_ProtoManagerByIdRes_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_BY_ID_RES
)

func (x *ProtoManagerByIdRes) Reset() {
	*x = ProtoManagerByIdRes{}
	mi := &file_CSMessages_External_proto_msgTypes[221]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerByIdRes) ProtoMessage() {}

func (x *ProtoManagerByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[221]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerByIdRes.ProtoReflect.Descriptor instead.
func (*ProtoManagerByIdRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{221}
}

func (x *ProtoManagerByIdRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerByIdRes_PayloadType
}

func (x *ProtoManagerByIdRes) GetManager() *ProtoManager {
	if x != nil {
		return x.Manager
	}
	return nil
}

// Request to create/update/delete trade Notification Profile. Profile is a set of settings which is applied within specific Groups
type ProtoCrudTradeNotificationProfileReq struct {
	state                    protoimpl.MessageState         `protogen:"open.v1"`
	PayloadType              *ProtoCSPayloadType            `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=581" json:"payloadType,omitempty"`
	Operation                *ProtoCrudOperation            `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"`      // Create/update/delete operation
	TradeNotificationProfile *ProtoTradeNotificationProfile `protobuf:"bytes,3,req,name=tradeNotificationProfile" json:"tradeNotificationProfile,omitempty"` // Trade Notification Profile entity
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for ProtoCrudTradeNotificationProfileReq fields.
const (
	Default_ProtoCrudTradeNotificationProfileReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_REQ
)

func (x *ProtoCrudTradeNotificationProfileReq) Reset() {
	*x = ProtoCrudTradeNotificationProfileReq{}
	mi := &file_CSMessages_External_proto_msgTypes[222]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudTradeNotificationProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudTradeNotificationProfileReq) ProtoMessage() {}

func (x *ProtoCrudTradeNotificationProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[222]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudTradeNotificationProfileReq.ProtoReflect.Descriptor instead.
func (*ProtoCrudTradeNotificationProfileReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{222}
}

func (x *ProtoCrudTradeNotificationProfileReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudTradeNotificationProfileReq_PayloadType
}

func (x *ProtoCrudTradeNotificationProfileReq) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudTradeNotificationProfileReq) GetTradeNotificationProfile() *ProtoTradeNotificationProfile {
	if x != nil {
		return x.TradeNotificationProfile
	}
	return nil
}

// Response for ProtoCrudTradeNotificationProfileReq
type ProtoCrudTradeNotificationProfileRes struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	PayloadType                *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=582" json:"payloadType,omitempty"`
	Operation                  *ProtoCrudOperation    `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"`           // Create/update/delete operation
	TradeNotificationProfileId *int64                 `protobuf:"varint,3,req,name=tradeNotificationProfileId" json:"tradeNotificationProfileId,omitempty"` // Trade Notification Profile ID
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

// Default values for ProtoCrudTradeNotificationProfileRes fields.
const (
	Default_ProtoCrudTradeNotificationProfileRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_RES
)

func (x *ProtoCrudTradeNotificationProfileRes) Reset() {
	*x = ProtoCrudTradeNotificationProfileRes{}
	mi := &file_CSMessages_External_proto_msgTypes[223]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCrudTradeNotificationProfileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCrudTradeNotificationProfileRes) ProtoMessage() {}

func (x *ProtoCrudTradeNotificationProfileRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[223]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCrudTradeNotificationProfileRes.ProtoReflect.Descriptor instead.
func (*ProtoCrudTradeNotificationProfileRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{223}
}

func (x *ProtoCrudTradeNotificationProfileRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoCrudTradeNotificationProfileRes_PayloadType
}

func (x *ProtoCrudTradeNotificationProfileRes) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoCrudTradeNotificationProfileRes) GetTradeNotificationProfileId() int64 {
	if x != nil && x.TradeNotificationProfileId != nil {
		return *x.TradeNotificationProfileId
	}
	return 0
}

// Event that is sent when trade Notification Profile is created/update/deleted
type ProtoTradeNotificationProfileChangedEvent struct {
	state                    protoimpl.MessageState         `protogen:"open.v1"`
	PayloadType              *ProtoCSPayloadType            `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=583" json:"payloadType,omitempty"`
	Operation                *ProtoCrudOperation            `protobuf:"varint,2,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"`      // Create/update/delete operation
	TradeNotificationProfile *ProtoTradeNotificationProfile `protobuf:"bytes,3,req,name=tradeNotificationProfile" json:"tradeNotificationProfile,omitempty"` // Trade Notification Profile entity
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for ProtoTradeNotificationProfileChangedEvent fields.
const (
	Default_ProtoTradeNotificationProfileChangedEvent_PayloadType = ProtoCSPayloadType_PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_CHANGED_EVENT
)

func (x *ProtoTradeNotificationProfileChangedEvent) Reset() {
	*x = ProtoTradeNotificationProfileChangedEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[224]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTradeNotificationProfileChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTradeNotificationProfileChangedEvent) ProtoMessage() {}

func (x *ProtoTradeNotificationProfileChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[224]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTradeNotificationProfileChangedEvent.ProtoReflect.Descriptor instead.
func (*ProtoTradeNotificationProfileChangedEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{224}
}

func (x *ProtoTradeNotificationProfileChangedEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoTradeNotificationProfileChangedEvent_PayloadType
}

func (x *ProtoTradeNotificationProfileChangedEvent) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoTradeNotificationProfileChangedEvent) GetTradeNotificationProfile() *ProtoTradeNotificationProfile {
	if x != nil {
		return x.TradeNotificationProfile
	}
	return nil
}

// Request to get list of trade Notification Profiles
type ProtoTradeNotificationProfileListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=584" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoTradeNotificationProfileListReq fields.
const (
	Default_ProtoTradeNotificationProfileListReq_PayloadType = ProtoCSPayloadType_PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_LIST_REQ
)

func (x *ProtoTradeNotificationProfileListReq) Reset() {
	*x = ProtoTradeNotificationProfileListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[225]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTradeNotificationProfileListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTradeNotificationProfileListReq) ProtoMessage() {}

func (x *ProtoTradeNotificationProfileListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[225]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTradeNotificationProfileListReq.ProtoReflect.Descriptor instead.
func (*ProtoTradeNotificationProfileListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{225}
}

func (x *ProtoTradeNotificationProfileListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoTradeNotificationProfileListReq_PayloadType
}

// Response for ProtoTradeNotificationProfileListReq
type ProtoTradeNotificationProfileListRes struct {
	state                    protoimpl.MessageState           `protogen:"open.v1"`
	PayloadType              *ProtoCSPayloadType              `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=585" json:"payloadType,omitempty"`
	TradeNotificationProfile []*ProtoTradeNotificationProfile `protobuf:"bytes,2,rep,name=tradeNotificationProfile" json:"tradeNotificationProfile,omitempty"` // Trade Notification Profile entities
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for ProtoTradeNotificationProfileListRes fields.
const (
	Default_ProtoTradeNotificationProfileListRes_PayloadType = ProtoCSPayloadType_PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_LIST_RES
)

func (x *ProtoTradeNotificationProfileListRes) Reset() {
	*x = ProtoTradeNotificationProfileListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[226]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTradeNotificationProfileListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTradeNotificationProfileListRes) ProtoMessage() {}

func (x *ProtoTradeNotificationProfileListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[226]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTradeNotificationProfileListRes.ProtoReflect.Descriptor instead.
func (*ProtoTradeNotificationProfileListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{226}
}

func (x *ProtoTradeNotificationProfileListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoTradeNotificationProfileListRes_PayloadType
}

func (x *ProtoTradeNotificationProfileListRes) GetTradeNotificationProfile() []*ProtoTradeNotificationProfile {
	if x != nil {
		return x.TradeNotificationProfile
	}
	return nil
}

// Request to get list of Traders (with limited number of fields), filtered by registrationTimestamp
type ProtoManagerLightTraderListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=228" json:"payloadType,omitempty"`
	FromTimestamp *int64                 `protobuf:"varint,2,req,name=fromTimestamp" json:"fromTimestamp,omitempty"` // UNIX timestamp in milliseconds from which the search starts
	ToTimestamp   *int64                 `protobuf:"varint,3,req,name=toTimestamp" json:"toTimestamp,omitempty"`     // UNIX timestamp in milliseconds where to stop searching
	GroupId       *int64                 `protobuf:"varint,4,opt,name=groupId" json:"groupId,omitempty"`             // ID of the Traders Group
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerLightTraderListReq fields.
const (
	Default_ProtoManagerLightTraderListReq_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_LIGHT_TRADER_LIST_REQ
)

func (x *ProtoManagerLightTraderListReq) Reset() {
	*x = ProtoManagerLightTraderListReq{}
	mi := &file_CSMessages_External_proto_msgTypes[227]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerLightTraderListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerLightTraderListReq) ProtoMessage() {}

func (x *ProtoManagerLightTraderListReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[227]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerLightTraderListReq.ProtoReflect.Descriptor instead.
func (*ProtoManagerLightTraderListReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{227}
}

func (x *ProtoManagerLightTraderListReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerLightTraderListReq_PayloadType
}

func (x *ProtoManagerLightTraderListReq) GetFromTimestamp() int64 {
	if x != nil && x.FromTimestamp != nil {
		return *x.FromTimestamp
	}
	return 0
}

func (x *ProtoManagerLightTraderListReq) GetToTimestamp() int64 {
	if x != nil && x.ToTimestamp != nil {
		return *x.ToTimestamp
	}
	return 0
}

func (x *ProtoManagerLightTraderListReq) GetGroupId() int64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

// Response for ProtoManagerLightTraderListReq
type ProtoManagerLightTraderListRes struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType        `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=229" json:"payloadType,omitempty"`
	Trader        []*ProtoManagerLightTrader `protobuf:"bytes,2,rep,name=trader" json:"trader,omitempty"`    // Trader entities ordered by registrationTimestamp (newest first)
	HasMore       *bool                      `protobuf:"varint,3,req,name=hasMore" json:"hasMore,omitempty"` // If TRUE then the number of entities by filter is larger than internal chunk size, the response contains the number of entities that is equal to chunk size
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoManagerLightTraderListRes fields.
const (
	Default_ProtoManagerLightTraderListRes_PayloadType = ProtoCSPayloadType_PROTO_MANAGER_LIGHT_TRADER_LIST_RES
)

func (x *ProtoManagerLightTraderListRes) Reset() {
	*x = ProtoManagerLightTraderListRes{}
	mi := &file_CSMessages_External_proto_msgTypes[228]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerLightTraderListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerLightTraderListRes) ProtoMessage() {}

func (x *ProtoManagerLightTraderListRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[228]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerLightTraderListRes.ProtoReflect.Descriptor instead.
func (*ProtoManagerLightTraderListRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{228}
}

func (x *ProtoManagerLightTraderListRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoManagerLightTraderListRes_PayloadType
}

func (x *ProtoManagerLightTraderListRes) GetTrader() []*ProtoManagerLightTrader {
	if x != nil {
		return x.Trader
	}
	return nil
}

func (x *ProtoManagerLightTraderListRes) GetHasMore() bool {
	if x != nil && x.HasMore != nil {
		return *x.HasMore
	}
	return false
}

// Request to subscribe to quotes. Subscriber starts receiving ProtoSpotEvents
type ProtoSubscribeSpotQuotesReq struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	PayloadType              *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=601" json:"payloadType,omitempty"`
	SymbolId                 []int64                `protobuf:"varint,3,rep,name=symbolId" json:"symbolId,omitempty"`                                 // The unique identifier of the Symbol in specific server environment within cTrader platform
	SubscribeToSpotTimestamp *bool                  `protobuf:"varint,5,opt,name=subscribeToSpotTimestamp" json:"subscribeToSpotTimestamp,omitempty"` // If TRUE then ProtoSpotEvent will contain timestamp
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for ProtoSubscribeSpotQuotesReq fields.
const (
	Default_ProtoSubscribeSpotQuotesReq_PayloadType = ProtoCSPayloadType_PROTO_SUBSCRIBE_SPOT_QUOTES_REQ
)

func (x *ProtoSubscribeSpotQuotesReq) Reset() {
	*x = ProtoSubscribeSpotQuotesReq{}
	mi := &file_CSMessages_External_proto_msgTypes[229]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSubscribeSpotQuotesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSubscribeSpotQuotesReq) ProtoMessage() {}

func (x *ProtoSubscribeSpotQuotesReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[229]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSubscribeSpotQuotesReq.ProtoReflect.Descriptor instead.
func (*ProtoSubscribeSpotQuotesReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{229}
}

func (x *ProtoSubscribeSpotQuotesReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSubscribeSpotQuotesReq_PayloadType
}

func (x *ProtoSubscribeSpotQuotesReq) GetSymbolId() []int64 {
	if x != nil {
		return x.SymbolId
	}
	return nil
}

func (x *ProtoSubscribeSpotQuotesReq) GetSubscribeToSpotTimestamp() bool {
	if x != nil && x.SubscribeToSpotTimestamp != nil {
		return *x.SubscribeToSpotTimestamp
	}
	return false
}

// Response for ProtoSubscribeSpotQuotesReq
type ProtoSubscribeSpotQuotesRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=602" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoSubscribeSpotQuotesRes fields.
const (
	Default_ProtoSubscribeSpotQuotesRes_PayloadType = ProtoCSPayloadType_PROTO_SUBSCRIBE_SPOT_QUOTES_RES
)

func (x *ProtoSubscribeSpotQuotesRes) Reset() {
	*x = ProtoSubscribeSpotQuotesRes{}
	mi := &file_CSMessages_External_proto_msgTypes[230]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSubscribeSpotQuotesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSubscribeSpotQuotesRes) ProtoMessage() {}

func (x *ProtoSubscribeSpotQuotesRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[230]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSubscribeSpotQuotesRes.ProtoReflect.Descriptor instead.
func (*ProtoSubscribeSpotQuotesRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{230}
}

func (x *ProtoSubscribeSpotQuotesRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSubscribeSpotQuotesRes_PayloadType
}

// Request to stop subscription to quotes. Subscriber stops receiving ProtoSpotEvents
type ProtoUnsubscribeSpotQuotesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=608" json:"payloadType,omitempty"`
	SymbolId      []int64                `protobuf:"varint,3,rep,name=symbolId" json:"symbolId,omitempty"` // The unique identifier of the Symbol in specific server environment within cTrader platform
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoUnsubscribeSpotQuotesReq fields.
const (
	Default_ProtoUnsubscribeSpotQuotesReq_PayloadType = ProtoCSPayloadType_PROTO_UNSUBSCRIBE_SPOT_QUOTES_REQ
)

func (x *ProtoUnsubscribeSpotQuotesReq) Reset() {
	*x = ProtoUnsubscribeSpotQuotesReq{}
	mi := &file_CSMessages_External_proto_msgTypes[231]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoUnsubscribeSpotQuotesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoUnsubscribeSpotQuotesReq) ProtoMessage() {}

func (x *ProtoUnsubscribeSpotQuotesReq) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[231]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoUnsubscribeSpotQuotesReq.ProtoReflect.Descriptor instead.
func (*ProtoUnsubscribeSpotQuotesReq) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{231}
}

func (x *ProtoUnsubscribeSpotQuotesReq) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoUnsubscribeSpotQuotesReq_PayloadType
}

func (x *ProtoUnsubscribeSpotQuotesReq) GetSymbolId() []int64 {
	if x != nil {
		return x.SymbolId
	}
	return nil
}

// Response for ProtoUnsubscribeSpotQuotesReq
type ProtoUnsubscribeSpotQuotesRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=609" json:"payloadType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoUnsubscribeSpotQuotesRes fields.
const (
	Default_ProtoUnsubscribeSpotQuotesRes_PayloadType = ProtoCSPayloadType_PROTO_UNSUBSCRIBE_SPOT_QUOTES_RES
)

func (x *ProtoUnsubscribeSpotQuotesRes) Reset() {
	*x = ProtoUnsubscribeSpotQuotesRes{}
	mi := &file_CSMessages_External_proto_msgTypes[232]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoUnsubscribeSpotQuotesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoUnsubscribeSpotQuotesRes) ProtoMessage() {}

func (x *ProtoUnsubscribeSpotQuotesRes) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[232]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoUnsubscribeSpotQuotesRes.ProtoReflect.Descriptor instead.
func (*ProtoUnsubscribeSpotQuotesRes) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{232}
}

func (x *ProtoUnsubscribeSpotQuotesRes) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoUnsubscribeSpotQuotesRes_PayloadType
}

// Event that is sent when a new spot event is generated on the server side
// Requires subscription on the spot events, see ProtoSubscribeSpotQuotesReq
// First event, received after subscription will contain latest spot prices even if market is closed
type ProtoSpotEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   *ProtoCSPayloadType    `protobuf:"varint,1,opt,name=payloadType,enum=ProtoCSPayloadType,def=3" json:"payloadType,omitempty"`
	SymbolId      *int64                 `protobuf:"varint,2,req,name=symbolId" json:"symbolId,omitempty"`         // The unique identifier of the Symbol in specific server environment within cTrader platform
	Bid           *uint64                `protobuf:"varint,3,opt,name=bid" json:"bid,omitempty"`                   // Bid price. Specified in 1/100_000 of unit of a price (e.g. 1.23 -> 1_23000)
	Ask           *uint64                `protobuf:"varint,4,opt,name=ask" json:"ask,omitempty"`                   // Ask price. Specified in 1/100_000 of unit of a price (e.g. 1.23 -> 1_23000)
	High          *uint64                `protobuf:"varint,5,opt,name=high" json:"high,omitempty"`                 // Highest current session price. Specified in 1/100_000 of unit of a price (e.g. 1.23 -> 1_23000)
	Low           *uint64                `protobuf:"varint,6,opt,name=low" json:"low,omitempty"`                   // Lowest current session price. Specified in 1/100_000 of unit of a price (e.g. 1.23 -> 1_23000)
	SessionClose  *uint64                `protobuf:"varint,7,opt,name=sessionClose" json:"sessionClose,omitempty"` // Last session close. Specified in 1/100_000 of unit of a price (e.g. 1.23 -> 1_23000)
	Timestamp     *int64                 `protobuf:"varint,9,opt,name=timestamp" json:"timestamp,omitempty"`       // UNIX timestamp in milliseconds for spot
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProtoSpotEvent fields.
const (
	Default_ProtoSpotEvent_PayloadType = ProtoCSPayloadType_PROTO_SPOT_EVENT
)

func (x *ProtoSpotEvent) Reset() {
	*x = ProtoSpotEvent{}
	mi := &file_CSMessages_External_proto_msgTypes[233]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSpotEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSpotEvent) ProtoMessage() {}

func (x *ProtoSpotEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[233]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSpotEvent.ProtoReflect.Descriptor instead.
func (*ProtoSpotEvent) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{233}
}

func (x *ProtoSpotEvent) GetPayloadType() ProtoCSPayloadType {
	if x != nil && x.PayloadType != nil {
		return *x.PayloadType
	}
	return Default_ProtoSpotEvent_PayloadType
}

func (x *ProtoSpotEvent) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoSpotEvent) GetBid() uint64 {
	if x != nil && x.Bid != nil {
		return *x.Bid
	}
	return 0
}

func (x *ProtoSpotEvent) GetAsk() uint64 {
	if x != nil && x.Ask != nil {
		return *x.Ask
	}
	return 0
}

func (x *ProtoSpotEvent) GetHigh() uint64 {
	if x != nil && x.High != nil {
		return *x.High
	}
	return 0
}

func (x *ProtoSpotEvent) GetLow() uint64 {
	if x != nil && x.Low != nil {
		return *x.Low
	}
	return 0
}

func (x *ProtoSpotEvent) GetSessionClose() uint64 {
	if x != nil && x.SessionClose != nil {
		return *x.SessionClose
	}
	return 0
}

func (x *ProtoSpotEvent) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SymbolId         *int64                 `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`                           // The unique identifier of the Symbol in specific server environment within cTrader platform
	BidMarkup        *int32                 `protobuf:"varint,2,opt,name=bidMarkup" json:"bidMarkup,omitempty"`                         // Bid markup in pipettes
	AskMarkup        *int32                 `protobuf:"varint,3,opt,name=askMarkup" json:"askMarkup,omitempty"`                         // Ask markup in pipettes
	Operation        *ProtoCrudOperation    `protobuf:"varint,4,req,name=operation,enum=ProtoCrudOperation" json:"operation,omitempty"` // Create/update/delete of setting for specific symbol
	MarkupIsRelative *bool                  `protobuf:"varint,5,opt,name=markupIsRelative" json:"markupIsRelative,omitempty"`           // If TRUE then markup is - bidMarkup/1000 %
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol) Reset() {
	*x = ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol{}
	mi := &file_CSMessages_External_proto_msgTypes[234]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol) ProtoMessage() {}

func (x *ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_CSMessages_External_proto_msgTypes[234]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol.ProtoReflect.Descriptor instead.
func (*ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol) Descriptor() ([]byte, []int) {
	return file_CSMessages_External_proto_rawDescGZIP(), []int{81, 0}
}

func (x *ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol) GetBidMarkup() int32 {
	if x != nil && x.BidMarkup != nil {
		return *x.BidMarkup
	}
	return 0
}

func (x *ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol) GetAskMarkup() int32 {
	if x != nil && x.AskMarkup != nil {
		return *x.AskMarkup
	}
	return 0
}

func (x *ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol) GetOperation() ProtoCrudOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ProtoCrudOperation_PROTO_CREATE
}

func (x *ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol) GetMarkupIsRelative() bool {
	if x != nil && x.MarkupIsRelative != nil {
		return *x.MarkupIsRelative
	}
	return false
}

var File_CSMessages_External_proto protoreflect.FileDescriptor

var file_CSMessages_External_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x43, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x43, 0x53, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x48,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x16, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52,
	0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22, 0x9d, 0x01,
	0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01,
	0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x57,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22, 0x93, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcb, 0x01,
	0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x1b,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xbb, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x21, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22, 0x97, 0x01,
	0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12,
	0x58, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x95, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd2, 0x04, 0x0a, 0x13,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x65,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x44, 0x65, 0x61, 0x6c, 0x52, 0x04, 0x64, 0x65, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x14, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x14,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x55, 0x73, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x55,
	0x73, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x42, 0x69, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x69, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x22, 0xd7, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x22, 0x62, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x86,
	0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x17, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f,
	0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x14, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x17, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c,
	0x52, 0x04, 0x64, 0x65, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc5, 0x01, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x5b, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x24, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c,
	0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x47,
	0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7f, 0x0a, 0x20, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x5b, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x24, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52,
	0x45, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x1f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x5a,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x52, 0x45, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x22, 0x7d, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x23, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52,
	0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xa9, 0x01, 0x0a, 0x28, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x5d, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x26, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45,
	0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49,
	0x43, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0a, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x28,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x26, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x43,
	0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6b, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x51, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x9a, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4c, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x68,
	0x69, 0x64, 0x65, 0x49, 0x62, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x69, 0x64, 0x65, 0x49, 0x62, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x53,
	0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x68,
	0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0x71, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x19, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x3c, 0x0a, 0x0e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x64, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x4d, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8d,
	0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0xca,
	0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc8, 0x01, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x17,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x68,
	0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x53, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1c, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x72, 0x6f,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc8, 0x01, 0x0a,
	0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07,
	0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x55, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xea, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x55, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1e, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0xd3,
	0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x53, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x42, 0x4f, 0x4e,
	0x55, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xf5, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x53, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1c, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x14, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x14, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0xa6, 0x01, 0x0a,
	0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x55, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x50,
	0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1e,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x65,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x6a, 0x0a, 0x16, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x50, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x19, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x19, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22,
	0x60, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x14,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x14, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x6d, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x0b,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x71, 0x0a, 0x19, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9a,
	0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49,
	0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x04, 0x66, 0x65, 0x65, 0x64, 0x22, 0x9c, 0x03, 0x0a, 0x17,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x65, 0x61, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52,
	0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x31, 0x0a, 0x10, 0x63, 0x6c, 0x6f,
	0x73, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x6c, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x73,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x6c, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x18,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x77, 0x69, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x65, 0x61, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x65,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x44, 0x65, 0x61, 0x6c, 0x52, 0x04, 0x64, 0x65, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61,
	0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73,
	0x4d, 0x6f, 0x72, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x23, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x65, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x61, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x2a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x42, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc2, 0x01, 0x0a, 0x23, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x65, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x12,
	0x61, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x2a, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x04, 0x64, 0x65,
	0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0xf3, 0x01, 0x0a,
	0x24, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x63, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x2c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xc8, 0x01, 0x0a, 0x24, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x2c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x5f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x42, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0x75, 0x0a,
	0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x65, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x59,
	0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x08,
	0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x65, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x22,
	0x6d, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x53, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x47, 0x53, 0x4c, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9c,
	0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x53, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x47, 0x53, 0x4c, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x53, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xbb, 0x01,
	0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xc2, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72,
	0x75, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55,
	0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x4b,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x43, 0x52, 0x55, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0xd0, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x14, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72,
	0x75, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x4d, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52,
	0x55, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x07,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x72, 0x75, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12,
	0x4d, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xb6, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x14, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x45,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x43, 0x52, 0x55, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x1f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x5b, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x24, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52,
	0x55, 0x44, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45,
	0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x13,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x13, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xe7, 0x01, 0x0a, 0x1f, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x46, 0x65, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x5b, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x24, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43,
	0x52, 0x55, 0x44, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45,
	0x45, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x15, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x15, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x49, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x22, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75,
	0x64, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x5f, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x28, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44,
	0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45,
	0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54,
	0x0a, 0x16, 0x73, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x16, 0x73, 0x77,
	0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x22, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72,
	0x75, 0x64, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x28, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55,
	0x44, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44,
	0x45, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x18, 0x73, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x18, 0x73, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xf5, 0x02, 0x0a, 0x15,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x18, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e,
	0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x65, 0x77, 0x57, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x77,
	0x57, 0x61, 0x79, 0x22, 0xb0, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12, 0x4f, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x18, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x77, 0x0a, 0x1c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x97, 0x01,
	0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x22, 0x97, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x12,
	0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x82, 0x04, 0x0a, 0x19,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x1a, 0xd5, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x4d, 0x61, 0x72, 0x6b,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x69, 0x64, 0x4d, 0x61, 0x72,
	0x6b, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x75,
	0x70, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x49, 0x73,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x49, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x22, 0x97, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x12, 0x54,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x1b, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c,
	0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44,
	0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x08,
	0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x65, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x44,
	0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75,
	0x64, 0x47, 0x53, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x52, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x47, 0x53, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72,
	0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x47, 0x53, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x72, 0x75, 0x64, 0x47, 0x53, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x47, 0x53, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xc0, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x19, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xdb, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x22, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x31,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xca, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x52,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8,
	0x01, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x23, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xdf, 0x01, 0x0a, 0x1c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x0b, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe5, 0x01, 0x0a, 0x20,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x65, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x5b, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x24, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x65,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x53, 0x4c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x47, 0x53, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x53, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x97, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x22, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x16, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x19,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x02, 0x0a,
	0x24, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x29, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x13, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x02, 0x0a, 0x27, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x2d, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x49,
	0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x16, 0x73, 0x77, 0x61,
	0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x16, 0x73, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52,
	0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x22,
	0x7b, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x64, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x16, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x27, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x6b, 0x0a, 0x16, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x53, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1c, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xac, 0x01, 0x0a,
	0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x16,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61,
	0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49,
	0x64, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x52,
	0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x04, 0x64, 0x65, 0x61, 0x6c, 0x22,
	0xe6, 0x01, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x5d, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x26, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x72, 0x6f,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x21, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x5d,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x26, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73,
	0x4d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d,
	0x6f, 0x72, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x51, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x53, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x9c, 0x03, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x12, 0x51,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53,
	0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x04, 0x64, 0x65, 0x61,
	0x6c, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x1e, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x61, 0x6b, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x1e, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x61, 0x6b, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x77, 0x61, 0x70, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x15,
	0x73, 0x77, 0x61, 0x70, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x95, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x56, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x53, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe2, 0x02, 0x0a, 0x1b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x4c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x4c, 0x49, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x6c, 0x0a, 0x1e, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x61, 0x6b,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x1e, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x51, 0x0a, 0x15, 0x73, 0x77, 0x61, 0x70, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x15, 0x73, 0x77, 0x61,
	0x70, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfc,
	0x09, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e,
	0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x69, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x3a, 0x10, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x62, 0x61,
	0x73, 0x65, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4c,
	0x6f, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x65, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x05, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x55, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a,
	0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xdc, 0x07,
	0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x6d,
	0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x54, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x3a,
	0x10, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61,
	0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2a,
	0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x65,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x05, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x55, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73,
	0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x05,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xa9, 0x01, 0x0a,
	0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x55, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf4, 0x03, 0x0a, 0x1c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61,
	0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x70,
	0x4c, 0x6f, 0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x3a, 0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22,
	0xcd, 0x02, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x22,
	0xfc, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad,
	0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x18, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52,
	0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc0,
	0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x19, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0xd9, 0x02, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x55, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1e, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x57, 0x61, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x57, 0x61, 0x79, 0x12, 0x2f, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x3a, 0x07, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xb7, 0x01,
	0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x4e,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x55, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa9, 0x01, 0x0a,
	0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x1f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x57, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x1f,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x46,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12,
	0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x22, 0x6c, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x51,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xa6, 0x03, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x12, 0x51, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44,
	0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x13, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x47, 0x61, 0x70, 0x54, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x69, 0x6e,
	0x47, 0x61, 0x70, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x6d, 0x61, 0x78, 0x47, 0x61, 0x70, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x47, 0x61, 0x70, 0x54, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x11,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x57, 0x0a, 0x17, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x44, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x17, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x03, 0x0a, 0x1d, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x12, 0x58, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x47,
	0x61, 0x70, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x47, 0x61, 0x70, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x47, 0x61, 0x70, 0x54, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78,
	0x47, 0x61, 0x70, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x57, 0x0a, 0x17, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44,
	0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x79, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x21, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb9, 0x03, 0x0a, 0x20,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x5b, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x24, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x47, 0x61, 0x70, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x47, 0x61, 0x70,
	0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x47, 0x61, 0x70, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x47, 0x61, 0x70, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x57,
	0x0a, 0x17, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x51, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65,
	0x61, 0x6c, 0x52, 0x04, 0x64, 0x65, 0x61, 0x6c, 0x22, 0xd3, 0x07, 0x0a, 0x17, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6c,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x18, 0x0d, 0x20, 0x02, 0x28, 0x08, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x57, 0x41,
	0x50, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x56, 0x57, 0x41, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x11,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x15, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x18, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x19, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70,
	0x4f, 0x75, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x4f,
	0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50,
	0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x1c, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x85,
	0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65,
	0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x52, 0x45,
	0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06,
	0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65,
	0x73, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x43,
	0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x64,
	0x65, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x55, 0x6e, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x61,
	0x6c, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x55, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73,
	0x12, 0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x55, 0x4e,
	0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x55, 0x6e, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44,
	0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c,
	0x49, 0x64, 0x22, 0x6d, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x52, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xab, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x53,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x6f, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65,
	0x61, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x9f, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x44, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x54,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x71, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x44, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x27, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x65, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x2e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x49, 0x5a, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xe1, 0x01, 0x0a,
	0x27, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4d, 0x61, 0x78, 0x41, 0x75, 0x74,
	0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x2e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0x8f, 0x02, 0x0a, 0x2c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x78, 0x41, 0x75, 0x74,
	0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x6f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x38, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61,
	0x78, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x27, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x78, 0x41,
	0x75, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x6a,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x33, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x43, 0x52, 0x55, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x27, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x33, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x49, 0x5a, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x78, 0x41, 0x75,
	0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0xce, 0x0a, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x4e,
	0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c,
	0x45, 0x52, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x3a, 0x10, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61,
	0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x56, 0x57, 0x41, 0x50, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x57, 0x41, 0x50, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x74,
	0x6f, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a,
	0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x55, 0x0a, 0x15, 0x73, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x3a, 0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c,
	0x6f, 0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x70,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0xca, 0x07, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x41, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x53, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44,
	0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x10, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x3a, 0x10, 0x47, 0x4f,
	0x4f, 0x44, 0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x6b,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x05, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x55, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a,
	0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xd3, 0x01,
	0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x54, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x41,
	0x4c, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x10, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xe6, 0x03, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x4d, 0x45, 0x4e,
	0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x75, 0x61,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65,
	0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73,
	0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x05,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xc7, 0x02, 0x0a,
	0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56,
	0x57, 0x41, 0x50, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x56, 0x57, 0x41, 0x50, 0x22, 0xda, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x22,
	0xee, 0x01, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x23, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3c, 0x0a, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa9, 0x01, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x23,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0xe9, 0x01, 0x0a,
	0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x55, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x57, 0x41,
	0x50, 0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x56, 0x57, 0x41, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xf0, 0x03, 0x0a, 0x19, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x57, 0x41, 0x50, 0x18, 0x06, 0x20, 0x02, 0x28, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x57, 0x41, 0x50, 0x12, 0x28, 0x0a,
	0x0f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x57, 0x61, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x57, 0x61, 0x79, 0x22, 0xfb, 0x02, 0x0a, 0x1e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x59,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x22, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x65, 0x77, 0x57, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e,
	0x65, 0x77, 0x57, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x22, 0xc7, 0x01, 0x0a, 0x1e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x22, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67,
	0x69, 0x74, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0xd6, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x20, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x24, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x75,
	0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a,
	0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xf3,
	0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x58, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x21, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x22, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x26, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x79, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xc0, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x21, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x11,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0d, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x72, 0x75, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x22, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0x71, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72,
	0x75, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x42, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x72, 0x75, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x12,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x25, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x10, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x10, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x77, 0x0a,
	0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x57, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x42, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x1d, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52,
	0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x22,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x26, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x79, 0x0a, 0x1d, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x58, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x1b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x53, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f,
	0x53, 0x57, 0x41, 0x50, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x72, 0x75, 0x64, 0x53, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x53, 0x57, 0x41,
	0x50, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x11, 0x73,
	0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0xf4, 0x01, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x46, 0x72,
	0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x25, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x46, 0x52, 0x45, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72,
	0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72,
	0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x76, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x53, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x46, 0x52, 0x45,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xb7, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x57, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x77, 0x61, 0x70,
	0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72,
	0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x16, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x5f,
	0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x22, 0xb5, 0x01, 0x0a,
	0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x16,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44,
	0x41, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72,
	0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x49, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x68, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x22, 0x64, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41,
	0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x4d, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x07, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x07,
	0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x22, 0xe4, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x72, 0x75, 0x64, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x55, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x48, 0x4f, 0x4c,
	0x49, 0x44, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x0e, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e,
	0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xd2,
	0x01, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x55, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43,
	0x52, 0x55, 0x44, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x10, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72,
	0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0e, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x73, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x55, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1e, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x1a, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3c, 0x0a, 0x0e, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x68,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x7e, 0x0a,
	0x1f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x5b, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x24, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x44,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xcb, 0x01,
	0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x46, 0x65, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x5b, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x24, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45,
	0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b,
	0x0a, 0x13, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x13, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xa8, 0x09, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x17,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x33, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x18, 0x09, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x03, 0x52, 0x1a, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x03, 0x52, 0x19, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x02, 0x28, 0x03, 0x52, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x11, 0x20, 0x02, 0x28, 0x03, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x53, 0x4c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x12, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x53, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x14, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18,
	0x15, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x68,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x16, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x66, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x21, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x18, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x21, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x12,
	0x4e, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52,
	0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x18,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x90, 0x01, 0x0a, 0x27, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x65, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x2e, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x27, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x2e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x57, 0x41,
	0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x16,
	0x73, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x16, 0x73, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x22, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x60,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x29, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x53, 0x57, 0x41, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x18, 0x73, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x18, 0x73, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a,
	0x22, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x29, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x49,
	0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x16, 0x73, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61,
	0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x16, 0x73, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x13,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x17, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x22, 0x97, 0x02, 0x0a, 0x24, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x60, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x29, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55,
	0x44, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5a, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x18, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xfb, 0x01, 0x0a,
	0x24, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x29, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x1a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xa6, 0x02, 0x0a, 0x29, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x33, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x72, 0x75, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x18, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x24, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x65, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x2e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52,
	0x55, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x24, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x2e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52,
	0x55, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x18, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0xde, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x23, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0xc8, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x23, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x1b,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x70,
	0x6f, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x56, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54,
	0x45, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12,
	0x3a, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x70,
	0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x70,
	0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x75, 0x0a, 0x1b, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x70, 0x6f,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45,
	0x53, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x21,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42,
	0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x53, 0x5f, 0x52, 0x45,
	0x51, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x1d, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x70,
	0x6f, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x55, 0x4e, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x51, 0x55,
	0x4f, 0x54, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53,
	0x70, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x10, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x62, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x61, 0x73,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6c, 0x2f, 0x63, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
})

var (
	file_CSMessages_External_proto_rawDescOnce sync.Once
	file_CSMessages_External_proto_rawDescData []byte
)

func file_CSMessages_External_proto_rawDescGZIP() []byte {
	file_CSMessages_External_proto_rawDescOnce.Do(func() {
		file_CSMessages_External_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_CSMessages_External_proto_rawDesc), len(file_CSMessages_External_proto_rawDesc)))
	})
	return file_CSMessages_External_proto_rawDescData
}

var file_CSMessages_External_proto_msgTypes = make([]protoimpl.MessageInfo, 235)
var file_CSMessages_External_proto_goTypes = []any{
	(*ProtoHelloEvent)(nil),                                        // 0: ProtoHelloEvent
	(*ProtoManagerAuthReq)(nil),                                    // 1: ProtoManagerAuthReq
	(*ProtoManagerAuthRes)(nil),                                    // 2: ProtoManagerAuthRes
	(*ProtoChangeTraderPasswordReq)(nil),                           // 3: ProtoChangeTraderPasswordReq
	(*ProtoChangeTraderPasswordRes)(nil),                           // 4: ProtoChangeTraderPasswordRes
	(*ProtoCheckTraderPasswordReq)(nil),                            // 5: ProtoCheckTraderPasswordReq
	(*ProtoCheckTraderPasswordRes)(nil),                            // 6: ProtoCheckTraderPasswordRes
	(*ProtoChangeManagerPasswordReq)(nil),                          // 7: ProtoChangeManagerPasswordReq
	(*ProtoChangeManagerPasswordRes)(nil),                          // 8: ProtoChangeManagerPasswordRes
	(*ProtoCheckManagerPasswordReq)(nil),                           // 9: ProtoCheckManagerPasswordReq
	(*ProtoCheckManagerPasswordRes)(nil),                           // 10: ProtoCheckManagerPasswordRes
	(*ProtoExecutionEvent)(nil),                                    // 11: ProtoExecutionEvent
	(*ProtoMarginChangedEvent)(nil),                                // 12: ProtoMarginChangedEvent
	(*ProtoServerTimeReq)(nil),                                     // 13: ProtoServerTimeReq
	(*ProtoServerTimeRes)(nil),                                     // 14: ProtoServerTimeRes
	(*ProtoOrderDetailsReq)(nil),                                   // 15: ProtoOrderDetailsReq
	(*ProtoOrderDetailsRes)(nil),                                   // 16: ProtoOrderDetailsRes
	(*ProtoRecalculateAccountMarginReq)(nil),                       // 17: ProtoRecalculateAccountMarginReq
	(*ProtoRecalculateAccountMarginRes)(nil),                       // 18: ProtoRecalculateAccountMarginRes
	(*ProtoRecalculateSymbolMarginReq)(nil),                        // 19: ProtoRecalculateSymbolMarginReq
	(*ProtoRecalculateSymbolMarginRes)(nil),                        // 20: ProtoRecalculateSymbolMarginRes
	(*ProtoRecalculateDynamicLeverageMarginReq)(nil),               // 21: ProtoRecalculateDynamicLeverageMarginReq
	(*ProtoRecalculateDynamicLeverageMarginRes)(nil),               // 22: ProtoRecalculateDynamicLeverageMarginRes
	(*ProtoLightGroupListReq)(nil),                                 // 23: ProtoLightGroupListReq
	(*ProtoLightGroupListRes)(nil),                                 // 24: ProtoLightGroupListRes
	(*ProtoTraderListReq)(nil),                                     // 25: ProtoTraderListReq
	(*ProtoTraderListRes)(nil),                                     // 26: ProtoTraderListRes
	(*ProtoManagerSymbolListReq)(nil),                              // 27: ProtoManagerSymbolListReq
	(*ProtoManagerSymbolListRes)(nil),                              // 28: ProtoManagerSymbolListRes
	(*ProtoManagerListReq)(nil),                                    // 29: ProtoManagerListReq
	(*ProtoManagerListRes)(nil),                                    // 30: ProtoManagerListRes
	(*ProtoPositionListReq)(nil),                                   // 31: ProtoPositionListReq
	(*ProtoPositionListRes)(nil),                                   // 32: ProtoPositionListRes
	(*ProtoPendingOrderListReq)(nil),                               // 33: ProtoPendingOrderListReq
	(*ProtoPendingOrderListRes)(nil),                               // 34: ProtoPendingOrderListRes
	(*ProtoBalanceHistoryListReq)(nil),                             // 35: ProtoBalanceHistoryListReq
	(*ProtoBalanceHistoryListRes)(nil),                             // 36: ProtoBalanceHistoryListRes
	(*ProtoBonusHistoryListReq)(nil),                               // 37: ProtoBonusHistoryListReq
	(*ProtoBonusHistoryListRes)(nil),                               // 38: ProtoBonusHistoryListRes
	(*ProtoExposureSymbolListReq)(nil),                             // 39: ProtoExposureSymbolListReq
	(*ProtoExposureSymbolListRes)(nil),                             // 40: ProtoExposureSymbolListRes
	(*ProtoServerSettingsReq)(nil),                                 // 41: ProtoServerSettingsReq
	(*ProtoServerSettingsRes)(nil),                                 // 42: ProtoServerSettingsRes
	(*ProtoAssetListReq)(nil),                                      // 43: ProtoAssetListReq
	(*ProtoAssetListRes)(nil),                                      // 44: ProtoAssetListRes
	(*ProtoPriceStreamListReq)(nil),                                // 45: ProtoPriceStreamListReq
	(*ProtoPriceStreamListRes)(nil),                                // 46: ProtoPriceStreamListRes
	(*ProtoLiquidityFeedListReq)(nil),                              // 47: ProtoLiquidityFeedListReq
	(*ProtoLiquidityFeedListRes)(nil),                              // 48: ProtoLiquidityFeedListRes
	(*ProtoManagerDealListReq)(nil),                                // 49: ProtoManagerDealListReq
	(*ProtoManagerDealListRes)(nil),                                // 50: ProtoManagerDealListRes
	(*ProtoManagerDealListByPositionIdReq)(nil),                    // 51: ProtoManagerDealListByPositionIdReq
	(*ProtoManagerDealListByPositionIdRes)(nil),                    // 52: ProtoManagerDealListByPositionIdRes
	(*ProtoManagerOrderListByPositionIdReq)(nil),                   // 53: ProtoManagerOrderListByPositionIdReq
	(*ProtoManagerOrderListByPositionIdRes)(nil),                   // 54: ProtoManagerOrderListByPositionIdRes
	(*ProtoDynamicLeverageListReq)(nil),                            // 55: ProtoDynamicLeverageListReq
	(*ProtoDynamicLeverageListRes)(nil),                            // 56: ProtoDynamicLeverageListRes
	(*ProtoGSLScheduleListReq)(nil),                                // 57: ProtoGSLScheduleListReq
	(*ProtoGSLScheduleListRes)(nil),                                // 58: ProtoGSLScheduleListRes
	(*ProtoCrudTraderReq)(nil),                                     // 59: ProtoCrudTraderReq
	(*ProtoCrudTraderRes)(nil),                                     // 60: ProtoCrudTraderRes
	(*ProtoCrudSymbolReq)(nil),                                     // 61: ProtoCrudSymbolReq
	(*ProtoCrudSymbolRes)(nil),                                     // 62: ProtoCrudSymbolRes
	(*ProtoCrudGroupReq)(nil),                                      // 63: ProtoCrudGroupReq
	(*ProtoCrudGroupRes)(nil),                                      // 64: ProtoCrudGroupRes
	(*ProtoCrudManagerReq)(nil),                                    // 65: ProtoCrudManagerReq
	(*ProtoCrudManagerRes)(nil),                                    // 66: ProtoCrudManagerRes
	(*ProtoCrudAssetReq)(nil),                                      // 67: ProtoCrudAssetReq
	(*ProtoCrudAssetRes)(nil),                                      // 68: ProtoCrudAssetRes
	(*ProtoCrudLiquidityFeedSymbolReq)(nil),                        // 69: ProtoCrudLiquidityFeedSymbolReq
	(*ProtoCrudLiquidityFeedSymbolRes)(nil),                        // 70: ProtoCrudLiquidityFeedSymbolRes
	(*ProtoCrudSwapAndDividendProfileReq)(nil),                     // 71: ProtoCrudSwapAndDividendProfileReq
	(*ProtoCrudSwapAndDividendProfileRes)(nil),                     // 72: ProtoCrudSwapAndDividendProfileRes
	(*ProtoChangeBalanceReq)(nil),                                  // 73: ProtoChangeBalanceReq
	(*ProtoChangeBalanceRes)(nil),                                  // 74: ProtoChangeBalanceRes
	(*ProtoUpdateServerSettingsReq)(nil),                           // 75: ProtoUpdateServerSettingsReq
	(*ProtoUpdateServerSettingsRes)(nil),                           // 76: ProtoUpdateServerSettingsRes
	(*ProtoCreatePriceStreamReq)(nil),                              // 77: ProtoCreatePriceStreamReq
	(*ProtoCreatePriceStreamRes)(nil),                              // 78: ProtoCreatePriceStreamRes
	(*ProtoDeletePriceStreamReq)(nil),                              // 79: ProtoDeletePriceStreamReq
	(*ProtoDeletePriceStreamRes)(nil),                              // 80: ProtoDeletePriceStreamRes
	(*ProtoUpdatePriceStreamReq)(nil),                              // 81: ProtoUpdatePriceStreamReq
	(*ProtoUpdatePriceStreamRes)(nil),                              // 82: ProtoUpdatePriceStreamRes
	(*ProtoCrudDynamicLeverageReq)(nil),                            // 83: ProtoCrudDynamicLeverageReq
	(*ProtoCrudDynamicLeverageRes)(nil),                            // 84: ProtoCrudDynamicLeverageRes
	(*ProtoCrudGSLScheduleReq)(nil),                                // 85: ProtoCrudGSLScheduleReq
	(*ProtoCrudGSLScheduleRes)(nil),                                // 86: ProtoCrudGSLScheduleRes
	(*ProtoTraderChangedEvent)(nil),                                // 87: ProtoTraderChangedEvent
	(*ProtoGroupChangedEvent)(nil),                                 // 88: ProtoGroupChangedEvent
	(*ProtoManagerSymbolChangedEvent)(nil),                         // 89: ProtoManagerSymbolChangedEvent
	(*ProtoManagerChangedEvent)(nil),                               // 90: ProtoManagerChangedEvent
	(*ProtoServerSettingsChangedEvent)(nil),                        // 91: ProtoServerSettingsChangedEvent
	(*ProtoPriceStreamChangedEvent)(nil),                           // 92: ProtoPriceStreamChangedEvent
	(*ProtoDynamicLeverageChangedEvent)(nil),                       // 93: ProtoDynamicLeverageChangedEvent
	(*ProtoGSLScheduleChangedEvent)(nil),                           // 94: ProtoGSLScheduleChangedEvent
	(*ProtoTraderPermissionLoseEvent)(nil),                         // 95: ProtoTraderPermissionLoseEvent
	(*ProtoAssetChangedEvent)(nil),                                 // 96: ProtoAssetChangedEvent
	(*ProtoLiquidityFeedSymbolChangedEvent)(nil),                   // 97: ProtoLiquidityFeedSymbolChangedEvent
	(*ProtoSwapAndDividendProfileChangedEvent)(nil),                // 98: ProtoSwapAndDividendProfileChangedEvent
	(*ProtoTraderByIdReq)(nil),                                     // 99: ProtoTraderByIdReq
	(*ProtoTraderByIdRes)(nil),                                     // 100: ProtoTraderByIdRes
	(*ProtoGroupByIdReq)(nil),                                      // 101: ProtoGroupByIdReq
	(*ProtoGroupByIdRes)(nil),                                      // 102: ProtoGroupByIdRes
	(*ProtoCountryListReq)(nil),                                    // 103: ProtoCountryListReq
	(*ProtoCountryListRes)(nil),                                    // 104: ProtoCountryListRes
	(*ProtoAssetClassListReq)(nil),                                 // 105: ProtoAssetClassListReq
	(*ProtoAssetClassListRes)(nil),                                 // 106: ProtoAssetClassListRes
	(*ProtoOrderManagerListReq)(nil),                               // 107: ProtoOrderManagerListReq
	(*ProtoOrderManagerListRes)(nil),                               // 108: ProtoOrderManagerListRes
	(*ProtoManagerGetDealReq)(nil),                                 // 109: ProtoManagerGetDealReq
	(*ProtoManagerGetDealRes)(nil),                                 // 110: ProtoManagerGetDealRes
	(*ProtoManagerClosedPositionListReq)(nil),                      // 111: ProtoManagerClosedPositionListReq
	(*ProtoManagerClosedPositionListRes)(nil),                      // 112: ProtoManagerClosedPositionListRes
	(*ProtoPositionDetailsReq)(nil),                                // 113: ProtoPositionDetailsReq
	(*ProtoPositionDetailsRes)(nil),                                // 114: ProtoPositionDetailsRes
	(*ProtoPositionDetailsLiteReq)(nil),                            // 115: ProtoPositionDetailsLiteReq
	(*ProtoPositionDetailsLiteRes)(nil),                            // 116: ProtoPositionDetailsLiteRes
	(*ProtoManagerNewOrderReq)(nil),                                // 117: ProtoManagerNewOrderReq
	(*ProtoManagerAmendOrderReq)(nil),                              // 118: ProtoManagerAmendOrderReq
	(*ProtoManagerCancelOrderReq)(nil),                             // 119: ProtoManagerCancelOrderReq
	(*ProtoManagerAmendPositionReq)(nil),                           // 120: ProtoManagerAmendPositionReq
	(*ProtoManagerClosePositionReq)(nil),                           // 121: ProtoManagerClosePositionReq
	(*ProtoOrderErrorEvent)(nil),                                   // 122: ProtoOrderErrorEvent
	(*ProtoTraderLogonEvent)(nil),                                  // 123: ProtoTraderLogonEvent
	(*ProtoTraderLogoutEvent)(nil),                                 // 124: ProtoTraderLogoutEvent
	(*ProtoManagerChangeBonusReq)(nil),                             // 125: ProtoManagerChangeBonusReq
	(*ProtoManagerChangeBonusRes)(nil),                             // 126: ProtoManagerChangeBonusRes
	(*ProtoSymbolCategoryListReq)(nil),                             // 127: ProtoSymbolCategoryListReq
	(*ProtoSymbolCategoryListRes)(nil),                             // 128: ProtoSymbolCategoryListRes
	(*ProtoGetSymbolsForConversionReq)(nil),                        // 129: ProtoGetSymbolsForConversionReq
	(*ProtoGetSymbolsForConversionRes)(nil),                        // 130: ProtoGetSymbolsForConversionRes
	(*ProtoDealingSettingsReq)(nil),                                // 131: ProtoDealingSettingsReq
	(*ProtoDealingSettingsRes)(nil),                                // 132: ProtoDealingSettingsRes
	(*ProtoUpdateDealingSettingsReq)(nil),                          // 133: ProtoUpdateDealingSettingsReq
	(*ProtoUpdateDealingSettingsRes)(nil),                          // 134: ProtoUpdateDealingSettingsRes
	(*ProtoDealingSettingsUpdatedEvent)(nil),                       // 135: ProtoDealingSettingsUpdatedEvent
	(*ProtoManualDealListReq)(nil),                                 // 136: ProtoManualDealListReq
	(*ProtoManualDealListRes)(nil),                                 // 137: ProtoManualDealListRes
	(*ProtoNewManualDealEvent)(nil),                                // 138: ProtoNewManualDealEvent
	(*ProtoManualDealClaimReq)(nil),                                // 139: ProtoManualDealClaimReq
	(*ProtoManualDealClaimRes)(nil),                                // 140: ProtoManualDealClaimRes
	(*ProtoManualDealClaimedEvent)(nil),                            // 141: ProtoManualDealClaimedEvent
	(*ProtoManualDealUnclaimReq)(nil),                              // 142: ProtoManualDealUnclaimReq
	(*ProtoManualDealUnclaimRes)(nil),                              // 143: ProtoManualDealUnclaimRes
	(*ProtoManualDealUnclaimedEvent)(nil),                          // 144: ProtoManualDealUnclaimedEvent
	(*ProtoManualDealResetReq)(nil),                                // 145: ProtoManualDealResetReq
	(*ProtoManualDealResetRes)(nil),                                // 146: ProtoManualDealResetRes
	(*ProtoManualDealRejectReq)(nil),                               // 147: ProtoManualDealRejectReq
	(*ProtoManualDealRejectRes)(nil),                               // 148: ProtoManualDealRejectRes
	(*ProtoManualDealExecuteReq)(nil),                              // 149: ProtoManualDealExecuteReq
	(*ProtoManualDealExecuteRes)(nil),                              // 150: ProtoManualDealExecuteRes
	(*ProtoManualDealProcessedEvent)(nil),                          // 151: ProtoManualDealProcessedEvent
	(*ProtoCrudMaxAutoExecutionSizeProfileReq)(nil),                // 152: ProtoCrudMaxAutoExecutionSizeProfileReq
	(*ProtoCrudMaxAutoExecutionSizeProfileRes)(nil),                // 153: ProtoCrudMaxAutoExecutionSizeProfileRes
	(*ProtoMaxAutoExecutionSizeProfileChangedEvent)(nil),           // 154: ProtoMaxAutoExecutionSizeProfileChangedEvent
	(*ProtoMaxAutoExecutionSizeProfileListReq)(nil),                // 155: ProtoMaxAutoExecutionSizeProfileListReq
	(*ProtoMaxAutoExecutionSizeProfileListRes)(nil),                // 156: ProtoMaxAutoExecutionSizeProfileListRes
	(*ProtoDealerNewOrderReq)(nil),                                 // 157: ProtoDealerNewOrderReq
	(*ProtoDealerAmendOrderReq)(nil),                               // 158: ProtoDealerAmendOrderReq
	(*ProtoDealerCancelOrderReq)(nil),                              // 159: ProtoDealerCancelOrderReq
	(*ProtoDealerAmendPositionReq)(nil),                            // 160: ProtoDealerAmendPositionReq
	(*ProtoDealerClosePositionReq)(nil),                            // 161: ProtoDealerClosePositionReq
	(*ProtoAssetClassChangedEvent)(nil),                            // 162: ProtoAssetClassChangedEvent
	(*ProtoAssetClassDeletedEvent)(nil),                            // 163: ProtoAssetClassDeletedEvent
	(*ProtoSymbolCategoryChangedEvent)(nil),                        // 164: ProtoSymbolCategoryChangedEvent
	(*ProtoSymbolCategoryDeletedEvent)(nil),                        // 165: ProtoSymbolCategoryDeletedEvent
	(*ProtoForceClosePositionReq)(nil),                             // 166: ProtoForceClosePositionReq
	(*ProtoForceOpenPositionReq)(nil),                              // 167: ProtoForceOpenPositionReq
	(*ProtoManagerBalanceTransferReq)(nil),                         // 168: ProtoManagerBalanceTransferReq
	(*ProtoManagerBalanceTransferRes)(nil),                         // 169: ProtoManagerBalanceTransferRes
	(*ProtoCrudScheduleProfileReq)(nil),                            // 170: ProtoCrudScheduleProfileReq
	(*ProtoCrudScheduleProfileRes)(nil),                            // 171: ProtoCrudScheduleProfileRes
	(*ProtoScheduleProfileChangedEvent)(nil),                       // 172: ProtoScheduleProfileChangedEvent
	(*ProtoScheduleProfileListReq)(nil),                            // 173: ProtoScheduleProfileListReq
	(*ProtoScheduleProfileListRes)(nil),                            // 174: ProtoScheduleProfileListRes
	(*ProtoCrudCommissionProfileReq)(nil),                          // 175: ProtoCrudCommissionProfileReq
	(*ProtoCrudCommissionProfileRes)(nil),                          // 176: ProtoCrudCommissionProfileRes
	(*ProtoCommissionProfileChangedEvent)(nil),                     // 177: ProtoCommissionProfileChangedEvent
	(*ProtoCommissionProfileListReq)(nil),                          // 178: ProtoCommissionProfileListReq
	(*ProtoCommissionProfileListRes)(nil),                          // 179: ProtoCommissionProfileListRes
	(*ProtoCrudVolumeProfileReq)(nil),                              // 180: ProtoCrudVolumeProfileReq
	(*ProtoCrudVolumeProfileRes)(nil),                              // 181: ProtoCrudVolumeProfileRes
	(*ProtoVolumeProfileChangedEvent)(nil),                         // 182: ProtoVolumeProfileChangedEvent
	(*ProtoVolumeProfileListReq)(nil),                              // 183: ProtoVolumeProfileListReq
	(*ProtoVolumeProfileListRes)(nil),                              // 184: ProtoVolumeProfileListRes
	(*ProtoCrudExecutionProfileReq)(nil),                           // 185: ProtoCrudExecutionProfileReq
	(*ProtoCrudExecutionProfileRes)(nil),                           // 186: ProtoCrudExecutionProfileRes
	(*ProtoExecutionProfileChangedEvent)(nil),                      // 187: ProtoExecutionProfileChangedEvent
	(*ProtoExecutionProfileListReq)(nil),                           // 188: ProtoExecutionProfileListReq
	(*ProtoExecutionProfileListRes)(nil),                           // 189: ProtoExecutionProfileListRes
	(*ProtoCrudProtectionProfileReq)(nil),                          // 190: ProtoCrudProtectionProfileReq
	(*ProtoCrudProtectionProfileRes)(nil),                          // 191: ProtoCrudProtectionProfileRes
	(*ProtoProtectionProfileChangedEvent)(nil),                     // 192: ProtoProtectionProfileChangedEvent
	(*ProtoProtectionProfileListReq)(nil),                          // 193: ProtoProtectionProfileListReq
	(*ProtoProtectionProfileListRes)(nil),                          // 194: ProtoProtectionProfileListRes
	(*ProtoCrudSwapFreeProfileReq)(nil),                            // 195: ProtoCrudSwapFreeProfileReq
	(*ProtoCrudSwapFreeProfileRes)(nil),                            // 196: ProtoCrudSwapFreeProfileRes
	(*ProtoSwapFreeProfileChangedEvent)(nil),                       // 197: ProtoSwapFreeProfileChangedEvent
	(*ProtoSwapFreeProfileListReq)(nil),                            // 198: ProtoSwapFreeProfileListReq
	(*ProtoSwapFreeProfileListRes)(nil),                            // 199: ProtoSwapFreeProfileListRes
	(*ProtoCrudHolidayReq)(nil),                                    // 200: ProtoCrudHolidayReq
	(*ProtoCrudHolidayRes)(nil),                                    // 201: ProtoCrudHolidayRes
	(*ProtoHolidayChangedEvent)(nil),                               // 202: ProtoHolidayChangedEvent
	(*ProtoHolidayListReq)(nil),                                    // 203: ProtoHolidayListReq
	(*ProtoHolidayListRes)(nil),                                    // 204: ProtoHolidayListRes
	(*ProtoCrudHolidayProfileReq)(nil),                             // 205: ProtoCrudHolidayProfileReq
	(*ProtoCrudHolidayProfileRes)(nil),                             // 206: ProtoCrudHolidayProfileRes
	(*ProtoHolidayProfileChangedEvent)(nil),                        // 207: ProtoHolidayProfileChangedEvent
	(*ProtoHolidayProfileListReq)(nil),                             // 208: ProtoHolidayProfileListReq
	(*ProtoHolidayProfileListRes)(nil),                             // 209: ProtoHolidayProfileListRes
	(*ProtoLiquidityFeedSymbolListReq)(nil),                        // 210: ProtoLiquidityFeedSymbolListReq
	(*ProtoLiquidityFeedSymbolListRes)(nil),                        // 211: ProtoLiquidityFeedSymbolListRes
	(*ProtoCreateSymbolReq)(nil),                                   // 212: ProtoCreateSymbolReq
	(*ProtoCreateSymbolRes)(nil),                                   // 213: ProtoCreateSymbolRes
	(*ProtoSymbolArchivedEvent)(nil),                               // 214: ProtoSymbolArchivedEvent
	(*ProtoSymbolRestoredEvent)(nil),                               // 215: ProtoSymbolRestoredEvent
	(*ProtoLightSwapAndDividendProfileListReq)(nil),                // 216: ProtoLightSwapAndDividendProfileListReq
	(*ProtoLightSwapAndDividendProfileListRes)(nil),                // 217: ProtoLightSwapAndDividendProfileListRes
	(*ProtoSwapAndDividendProfileByIdReq)(nil),                     // 218: ProtoSwapAndDividendProfileByIdReq
	(*ProtoSwapAndDividendProfileByIdRes)(nil),                     // 219: ProtoSwapAndDividendProfileByIdRes
	(*ProtoManagerByIdReq)(nil),                                    // 220: ProtoManagerByIdReq
	(*ProtoManagerByIdRes)(nil),                                    // 221: ProtoManagerByIdRes
	(*ProtoCrudTradeNotificationProfileReq)(nil),                   // 222: ProtoCrudTradeNotificationProfileReq
	(*ProtoCrudTradeNotificationProfileRes)(nil),                   // 223: ProtoCrudTradeNotificationProfileRes
	(*ProtoTradeNotificationProfileChangedEvent)(nil),              // 224: ProtoTradeNotificationProfileChangedEvent
	(*ProtoTradeNotificationProfileListReq)(nil),                   // 225: ProtoTradeNotificationProfileListReq
	(*ProtoTradeNotificationProfileListRes)(nil),                   // 226: ProtoTradeNotificationProfileListRes
	(*ProtoManagerLightTraderListReq)(nil),                         // 227: ProtoManagerLightTraderListReq
	(*ProtoManagerLightTraderListRes)(nil),                         // 228: ProtoManagerLightTraderListRes
	(*ProtoSubscribeSpotQuotesReq)(nil),                            // 229: ProtoSubscribeSpotQuotesReq
	(*ProtoSubscribeSpotQuotesRes)(nil),                            // 230: ProtoSubscribeSpotQuotesRes
	(*ProtoUnsubscribeSpotQuotesReq)(nil),                          // 231: ProtoUnsubscribeSpotQuotesReq
	(*ProtoUnsubscribeSpotQuotesRes)(nil),                          // 232: ProtoUnsubscribeSpotQuotesRes
	(*ProtoSpotEvent)(nil),                                         // 233: ProtoSpotEvent
	(*ProtoUpdatePriceStreamReq_ProtoUpdatePriceStreamSymbol)(nil), // 234: ProtoUpdatePriceStreamReq.ProtoUpdatePriceStreamSymbol
	(ProtoCSPayloadType)(0),                                        // 235: ProtoCSPayloadType
	(ProtoManagerPermission)(0),                                    // 236: ProtoManagerPermission
	(ProtoExecutionType)(0),                                        // 237: ProtoExecutionType
	(*ProtoPosition)(nil),                                          // 238: ProtoPosition
	(*ProtoOrder)(nil),                                             // 239: ProtoOrder
	(*ProtoDepositWithdraw)(nil),                                   // 240: ProtoDepositWithdraw
	(*ProtoDeal)(nil),                                              // 241: ProtoDeal
	(*ProtoBonusDepositWithdraw)(nil),                              // 242: ProtoBonusDepositWithdraw
	(*ProtoOrderAction)(nil),                                       // 243: ProtoOrderAction
	(*ProtoLightGroup)(nil),                                        // 244: ProtoLightGroup
	(*ProtoTrader)(nil),                                            // 245: ProtoTrader
	(*ProtoManagerSymbol)(nil),                                     // 246: ProtoManagerSymbol
	(*ProtoArchivedSymbol)(nil),                                    // 247: ProtoArchivedSymbol
	(*ProtoManager)(nil),                                           // 248: ProtoManager
	(ProtoBookRequestType)(0),                                      // 249: ProtoBookRequestType
	(*ProtoExposureSymbolRecord)(nil),                              // 250: ProtoExposureSymbolRecord
	(*ProtoServerSetting)(nil),                                     // 251: ProtoServerSetting
	(*ProtoAsset)(nil),                                             // 252: ProtoAsset
	(*ProtoPriceStream)(nil),                                       // 253: ProtoPriceStream
	(*ProtoLiquidityFeed)(nil),                                     // 254: ProtoLiquidityFeed
	(*ProtoDynamicLeverage)(nil),                                   // 255: ProtoDynamicLeverage
	(*ProtoGSLSchedule)(nil),                                       // 256: ProtoGSLSchedule
	(ProtoCrudOperation)(0),                                        // 257: ProtoCrudOperation
	(*ProtoGroup)(nil),                                             // 258: ProtoGroup
	(*ProtoLiquidityFeedSymbol)(nil),                               // 259: ProtoLiquidityFeedSymbol
	(*ProtoSwapAndDividendProfile)(nil),                            // 260: ProtoSwapAndDividendProfile
	(ProtoChangeBalanceType)(0),                                    // 261: ProtoChangeBalanceType
	(*ProtoCountry)(nil),                                           // 262: ProtoCountry
	(*ProtoAssetClass)(nil),                                        // 263: ProtoAssetClass
	(*ProtoStopLossTakeProfitChangeRecord)(nil),                    // 264: ProtoStopLossTakeProfitChangeRecord
	(*ProtoSwapCalculationRecord)(nil),                             // 265: ProtoSwapCalculationRecord
	(ProtoOrderType)(0),                                            // 266: ProtoOrderType
	(ProtoTradeSide)(0),                                            // 267: ProtoTradeSide
	(ProtoTimeInForce)(0),                                          // 268: ProtoTimeInForce
	(ProtoOrderTriggerMethod)(0),                                   // 269: ProtoOrderTriggerMethod
	(*ProtoTraderSessionInfo)(nil),                                 // 270: ProtoTraderSessionInfo
	(ProtoChangeBonusType)(0),                                      // 271: ProtoChangeBonusType
	(ProtoBonusOwner)(0),                                           // 272: ProtoBonusOwner
	(*ProtoSymbolCategory)(nil),                                    // 273: ProtoSymbolCategory
	(*ProtoLightSymbol)(nil),                                       // 274: ProtoLightSymbol
	(*ProtoDealingSymbol)(nil),                                     // 275: ProtoDealingSymbol
	(ProtoManualDealTimeoutAction)(0),                              // 276: ProtoManualDealTimeoutAction
	(*ProtoManualDeal)(nil),                                        // 277: ProtoManualDeal
	(ProtoBookType)(0),                                             // 278: ProtoBookType
	(ProtoManualDealReason)(0),                                     // 279: ProtoManualDealReason
	(*ProtoMaxAutoExecutionSizeProfile)(nil),                       // 280: ProtoMaxAutoExecutionSizeProfile
	(*ProtoScheduleProfile)(nil),                                   // 281: ProtoScheduleProfile
	(*ProtoCommissionProfile)(nil),                                 // 282: ProtoCommissionProfile
	(*ProtoVolumeProfile)(nil),                                     // 283: ProtoVolumeProfile
	(*ProtoExecutionProfile)(nil),                                  // 284: ProtoExecutionProfile
	(*ProtoProtectionProfile)(nil),                                 // 285: ProtoProtectionProfile
	(*ProtoSwapFreeProfile)(nil),                                   // 286: ProtoSwapFreeProfile
	(*ProtoHoliday)(nil),                                           // 287: ProtoHoliday
	(*ProtoHolidayProfile)(nil),                                    // 288: ProtoHolidayProfile
	(ProtoTradingMode)(0),                                          // 289: ProtoTradingMode
	(*ProtoFuturesSettings)(nil),                                   // 290: ProtoFuturesSettings
	(*ProtoLightSwapAndDividendProfile)(nil),                       // 291: ProtoLightSwapAndDividendProfile
	(*ProtoTradeNotificationProfile)(nil),                          // 292: ProtoTradeNotificationProfile
	(*ProtoManagerLightTrader)(nil),                                // 293: ProtoManagerLightTrader
}
var file_CSMessages_External_proto_depIdxs = []int32{
	235, // 0: ProtoHelloEvent.payloadType:type_name -> ProtoCSPayloadType
	235, // 1: ProtoManagerAuthReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 2: ProtoManagerAuthRes.payloadType:type_name -> ProtoCSPayloadType
	236, // 3: ProtoManagerAuthRes.permission:type_name -> ProtoManagerPermission
	235, // 4: ProtoChangeTraderPasswordReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 5: ProtoChangeTraderPasswordRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 6: ProtoCheckTraderPasswordReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 7: ProtoCheckTraderPasswordRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 8: ProtoChangeManagerPasswordReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 9: ProtoChangeManagerPasswordRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 10: ProtoCheckManagerPasswordReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 11: ProtoCheckManagerPasswordRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 12: ProtoExecutionEvent.payloadType:type_name -> ProtoCSPayloadType
	237, // 13: ProtoExecutionEvent.executionType:type_name -> ProtoExecutionType
	238, // 14: ProtoExecutionEvent.position:type_name -> ProtoPosition
	239, // 15: ProtoExecutionEvent.order:type_name -> ProtoOrder
	240, // 16: ProtoExecutionEvent.depositWithdraw:type_name -> ProtoDepositWithdraw
	241, // 17: ProtoExecutionEvent.deal:type_name -> ProtoDeal
	242, // 18: ProtoExecutionEvent.bonusDepositWithdraw:type_name -> ProtoBonusDepositWithdraw
	235, // 19: ProtoMarginChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	235, // 20: ProtoServerTimeReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 21: ProtoServerTimeRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 22: ProtoOrderDetailsReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 23: ProtoOrderDetailsRes.payloadType:type_name -> ProtoCSPayloadType
	239, // 24: ProtoOrderDetailsRes.orderSnapshot:type_name -> ProtoOrder
	241, // 25: ProtoOrderDetailsRes.deal:type_name -> ProtoDeal
	243, // 26: ProtoOrderDetailsRes.action:type_name -> ProtoOrderAction
	235, // 27: ProtoRecalculateAccountMarginReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 28: ProtoRecalculateAccountMarginRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 29: ProtoRecalculateSymbolMarginReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 30: ProtoRecalculateSymbolMarginRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 31: ProtoRecalculateDynamicLeverageMarginReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 32: ProtoRecalculateDynamicLeverageMarginRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 33: ProtoLightGroupListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 34: ProtoLightGroupListRes.payloadType:type_name -> ProtoCSPayloadType
	244, // 35: ProtoLightGroupListRes.lightGroup:type_name -> ProtoLightGroup
	235, // 36: ProtoTraderListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 37: ProtoTraderListRes.payloadType:type_name -> ProtoCSPayloadType
	245, // 38: ProtoTraderListRes.trader:type_name -> ProtoTrader
	235, // 39: ProtoManagerSymbolListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 40: ProtoManagerSymbolListRes.payloadType:type_name -> ProtoCSPayloadType
	246, // 41: ProtoManagerSymbolListRes.symbol:type_name -> ProtoManagerSymbol
	247, // 42: ProtoManagerSymbolListRes.archivedSymbol:type_name -> ProtoArchivedSymbol
	235, // 43: ProtoManagerListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 44: ProtoManagerListRes.payloadType:type_name -> ProtoCSPayloadType
	248, // 45: ProtoManagerListRes.manager:type_name -> ProtoManager
	235, // 46: ProtoPositionListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 47: ProtoPositionListRes.payloadType:type_name -> ProtoCSPayloadType
	238, // 48: ProtoPositionListRes.position:type_name -> ProtoPosition
	235, // 49: ProtoPendingOrderListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 50: ProtoPendingOrderListRes.payloadType:type_name -> ProtoCSPayloadType
	239, // 51: ProtoPendingOrderListRes.order:type_name -> ProtoOrder
	235, // 52: ProtoBalanceHistoryListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 53: ProtoBalanceHistoryListRes.payloadType:type_name -> ProtoCSPayloadType
	240, // 54: ProtoBalanceHistoryListRes.depositWithdraw:type_name -> ProtoDepositWithdraw
	235, // 55: ProtoBonusHistoryListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 56: ProtoBonusHistoryListRes.payloadType:type_name -> ProtoCSPayloadType
	242, // 57: ProtoBonusHistoryListRes.bonusDepositWithdraw:type_name -> ProtoBonusDepositWithdraw
	235, // 58: ProtoExposureSymbolListReq.payloadType:type_name -> ProtoCSPayloadType
	249, // 59: ProtoExposureSymbolListReq.bookType:type_name -> ProtoBookRequestType
	235, // 60: ProtoExposureSymbolListRes.payloadType:type_name -> ProtoCSPayloadType
	250, // 61: ProtoExposureSymbolListRes.exposureSymbolRecord:type_name -> ProtoExposureSymbolRecord
	235, // 62: ProtoServerSettingsReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 63: ProtoServerSettingsRes.payloadType:type_name -> ProtoCSPayloadType
	251, // 64: ProtoServerSettingsRes.serverSetting:type_name -> ProtoServerSetting
	235, // 65: ProtoAssetListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 66: ProtoAssetListRes.payloadType:type_name -> ProtoCSPayloadType
	252, // 67: ProtoAssetListRes.asset:type_name -> ProtoAsset
	235, // 68: ProtoPriceStreamListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 69: ProtoPriceStreamListRes.payloadType:type_name -> ProtoCSPayloadType
	253, // 70: ProtoPriceStreamListRes.priceStream:type_name -> ProtoPriceStream
	235, // 71: ProtoLiquidityFeedListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 72: ProtoLiquidityFeedListRes.payloadType:type_name -> ProtoCSPayloadType
	254, // 73: ProtoLiquidityFeedListRes.feed:type_name -> ProtoLiquidityFeed
	235, // 74: ProtoManagerDealListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 75: ProtoManagerDealListRes.payloadType:type_name -> ProtoCSPayloadType
	241, // 76: ProtoManagerDealListRes.deal:type_name -> ProtoDeal
	235, // 77: ProtoManagerDealListByPositionIdReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 78: ProtoManagerDealListByPositionIdRes.payloadType:type_name -> ProtoCSPayloadType
	241, // 79: ProtoManagerDealListByPositionIdRes.deal:type_name -> ProtoDeal
	235, // 80: ProtoManagerOrderListByPositionIdReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 81: ProtoManagerOrderListByPositionIdRes.payloadType:type_name -> ProtoCSPayloadType
	239, // 82: ProtoManagerOrderListByPositionIdRes.order:type_name -> ProtoOrder
	235, // 83: ProtoDynamicLeverageListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 84: ProtoDynamicLeverageListRes.payloadType:type_name -> ProtoCSPayloadType
	255, // 85: ProtoDynamicLeverageListRes.leverage:type_name -> ProtoDynamicLeverage
	235, // 86: ProtoGSLScheduleListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 87: ProtoGSLScheduleListRes.payloadType:type_name -> ProtoCSPayloadType
	256, // 88: ProtoGSLScheduleListRes.schedule:type_name -> ProtoGSLSchedule
	235, // 89: ProtoCrudTraderReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 90: ProtoCrudTraderReq.operation:type_name -> ProtoCrudOperation
	245, // 91: ProtoCrudTraderReq.trader:type_name -> ProtoTrader
	235, // 92: ProtoCrudTraderRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 93: ProtoCrudTraderRes.operation:type_name -> ProtoCrudOperation
	235, // 94: ProtoCrudSymbolReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 95: ProtoCrudSymbolReq.operation:type_name -> ProtoCrudOperation
	246, // 96: ProtoCrudSymbolReq.symbol:type_name -> ProtoManagerSymbol
	235, // 97: ProtoCrudSymbolRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 98: ProtoCrudSymbolRes.operation:type_name -> ProtoCrudOperation
	235, // 99: ProtoCrudGroupReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 100: ProtoCrudGroupReq.operation:type_name -> ProtoCrudOperation
	258, // 101: ProtoCrudGroupReq.group:type_name -> ProtoGroup
	235, // 102: ProtoCrudGroupRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 103: ProtoCrudGroupRes.operation:type_name -> ProtoCrudOperation
	258, // 104: ProtoCrudGroupRes.group:type_name -> ProtoGroup
	235, // 105: ProtoCrudManagerReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 106: ProtoCrudManagerReq.operation:type_name -> ProtoCrudOperation
	248, // 107: ProtoCrudManagerReq.manager:type_name -> ProtoManager
	235, // 108: ProtoCrudManagerRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 109: ProtoCrudManagerRes.operation:type_name -> ProtoCrudOperation
	235, // 110: ProtoCrudAssetReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 111: ProtoCrudAssetReq.operation:type_name -> ProtoCrudOperation
	252, // 112: ProtoCrudAssetReq.asset:type_name -> ProtoAsset
	235, // 113: ProtoCrudAssetRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 114: ProtoCrudAssetRes.operation:type_name -> ProtoCrudOperation
	235, // 115: ProtoCrudLiquidityFeedSymbolReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 116: ProtoCrudLiquidityFeedSymbolReq.operation:type_name -> ProtoCrudOperation
	259, // 117: ProtoCrudLiquidityFeedSymbolReq.liquidityFeedSymbol:type_name -> ProtoLiquidityFeedSymbol
	235, // 118: ProtoCrudLiquidityFeedSymbolRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 119: ProtoCrudLiquidityFeedSymbolRes.operation:type_name -> ProtoCrudOperation
	235, // 120: ProtoCrudSwapAndDividendProfileReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 121: ProtoCrudSwapAndDividendProfileReq.operation:type_name -> ProtoCrudOperation
	260, // 122: ProtoCrudSwapAndDividendProfileReq.swapAndDividendProfile:type_name -> ProtoSwapAndDividendProfile
	235, // 123: ProtoCrudSwapAndDividendProfileRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 124: ProtoCrudSwapAndDividendProfileRes.operation:type_name -> ProtoCrudOperation
	235, // 125: ProtoChangeBalanceReq.payloadType:type_name -> ProtoCSPayloadType
	261, // 126: ProtoChangeBalanceReq.type:type_name -> ProtoChangeBalanceType
	235, // 127: ProtoChangeBalanceRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 128: ProtoUpdateServerSettingsReq.payloadType:type_name -> ProtoCSPayloadType
	251, // 129: ProtoUpdateServerSettingsReq.serverSetting:type_name -> ProtoServerSetting
	235, // 130: ProtoUpdateServerSettingsRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 131: ProtoCreatePriceStreamReq.payloadType:type_name -> ProtoCSPayloadType
	253, // 132: ProtoCreatePriceStreamReq.priceStream:type_name -> ProtoPriceStream
	235, // 133: ProtoCreatePriceStreamRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 134: ProtoDeletePriceStreamReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 135: ProtoDeletePriceStreamRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 136: ProtoUpdatePriceStreamReq.payloadType:type_name -> ProtoCSPayloadType
	234, // 137: ProtoUpdatePriceStreamReq.updateSymbol:type_name -> ProtoUpdatePriceStreamReq.ProtoUpdatePriceStreamSymbol
	235, // 138: ProtoUpdatePriceStreamRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 139: ProtoCrudDynamicLeverageReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 140: ProtoCrudDynamicLeverageReq.operation:type_name -> ProtoCrudOperation
	255, // 141: ProtoCrudDynamicLeverageReq.leverage:type_name -> ProtoDynamicLeverage
	235, // 142: ProtoCrudDynamicLeverageRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 143: ProtoCrudDynamicLeverageRes.operation:type_name -> ProtoCrudOperation
	235, // 144: ProtoCrudGSLScheduleReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 145: ProtoCrudGSLScheduleReq.operation:type_name -> ProtoCrudOperation
	256, // 146: ProtoCrudGSLScheduleReq.schedule:type_name -> ProtoGSLSchedule
	235, // 147: ProtoCrudGSLScheduleRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 148: ProtoCrudGSLScheduleRes.operation:type_name -> ProtoCrudOperation
	235, // 149: ProtoTraderChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	245, // 150: ProtoTraderChangedEvent.trader:type_name -> ProtoTrader
	257, // 151: ProtoTraderChangedEvent.operation:type_name -> ProtoCrudOperation
	235, // 152: ProtoGroupChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	258, // 153: ProtoGroupChangedEvent.group:type_name -> ProtoGroup
	257, // 154: ProtoGroupChangedEvent.operation:type_name -> ProtoCrudOperation
	235, // 155: ProtoManagerSymbolChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	246, // 156: ProtoManagerSymbolChangedEvent.symbol:type_name -> ProtoManagerSymbol
	257, // 157: ProtoManagerSymbolChangedEvent.operation:type_name -> ProtoCrudOperation
	235, // 158: ProtoManagerChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	248, // 159: ProtoManagerChangedEvent.manager:type_name -> ProtoManager
	257, // 160: ProtoManagerChangedEvent.operation:type_name -> ProtoCrudOperation
	235, // 161: ProtoServerSettingsChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	251, // 162: ProtoServerSettingsChangedEvent.serverSetting:type_name -> ProtoServerSetting
	235, // 163: ProtoPriceStreamChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	253, // 164: ProtoPriceStreamChangedEvent.priceStream:type_name -> ProtoPriceStream
	257, // 165: ProtoPriceStreamChangedEvent.operation:type_name -> ProtoCrudOperation
	235, // 166: ProtoDynamicLeverageChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	255, // 167: ProtoDynamicLeverageChangedEvent.leverage:type_name -> ProtoDynamicLeverage
	257, // 168: ProtoDynamicLeverageChangedEvent.operation:type_name -> ProtoCrudOperation
	235, // 169: ProtoGSLScheduleChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	256, // 170: ProtoGSLScheduleChangedEvent.schedule:type_name -> ProtoGSLSchedule
	257, // 171: ProtoGSLScheduleChangedEvent.operation:type_name -> ProtoCrudOperation
	235, // 172: ProtoTraderPermissionLoseEvent.payloadType:type_name -> ProtoCSPayloadType
	235, // 173: ProtoAssetChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	252, // 174: ProtoAssetChangedEvent.asset:type_name -> ProtoAsset
	257, // 175: ProtoAssetChangedEvent.operation:type_name -> ProtoCrudOperation
	235, // 176: ProtoLiquidityFeedSymbolChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	259, // 177: ProtoLiquidityFeedSymbolChangedEvent.liquidityFeedSymbol:type_name -> ProtoLiquidityFeedSymbol
	257, // 178: ProtoLiquidityFeedSymbolChangedEvent.operation:type_name -> ProtoCrudOperation
	235, // 179: ProtoSwapAndDividendProfileChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	260, // 180: ProtoSwapAndDividendProfileChangedEvent.swapAndDividendProfile:type_name -> ProtoSwapAndDividendProfile
	257, // 181: ProtoSwapAndDividendProfileChangedEvent.operation:type_name -> ProtoCrudOperation
	235, // 182: ProtoTraderByIdReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 183: ProtoTraderByIdRes.payloadType:type_name -> ProtoCSPayloadType
	245, // 184: ProtoTraderByIdRes.trader:type_name -> ProtoTrader
	235, // 185: ProtoGroupByIdReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 186: ProtoGroupByIdRes.payloadType:type_name -> ProtoCSPayloadType
	258, // 187: ProtoGroupByIdRes.group:type_name -> ProtoGroup
	235, // 188: ProtoCountryListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 189: ProtoCountryListRes.payloadType:type_name -> ProtoCSPayloadType
	262, // 190: ProtoCountryListRes.country:type_name -> ProtoCountry
	235, // 191: ProtoAssetClassListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 192: ProtoAssetClassListRes.payloadType:type_name -> ProtoCSPayloadType
	263, // 193: ProtoAssetClassListRes.assetClass:type_name -> ProtoAssetClass
	235, // 194: ProtoOrderManagerListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 195: ProtoOrderManagerListRes.payloadType:type_name -> ProtoCSPayloadType
	239, // 196: ProtoOrderManagerListRes.order:type_name -> ProtoOrder
	235, // 197: ProtoManagerGetDealReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 198: ProtoManagerGetDealRes.payloadType:type_name -> ProtoCSPayloadType
	241, // 199: ProtoManagerGetDealRes.deal:type_name -> ProtoDeal
	235, // 200: ProtoManagerClosedPositionListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 201: ProtoManagerClosedPositionListRes.payloadType:type_name -> ProtoCSPayloadType
	238, // 202: ProtoManagerClosedPositionListRes.position:type_name -> ProtoPosition
	235, // 203: ProtoPositionDetailsReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 204: ProtoPositionDetailsRes.payloadType:type_name -> ProtoCSPayloadType
	241, // 205: ProtoPositionDetailsRes.deal:type_name -> ProtoDeal
	239, // 206: ProtoPositionDetailsRes.order:type_name -> ProtoOrder
	264, // 207: ProtoPositionDetailsRes.stopLossTakeProfitChangeRecord:type_name -> ProtoStopLossTakeProfitChangeRecord
	265, // 208: ProtoPositionDetailsRes.swapCalculationRecord:type_name -> ProtoSwapCalculationRecord
	238, // 209: ProtoPositionDetailsRes.position:type_name -> ProtoPosition
	235, // 210: ProtoPositionDetailsLiteReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 211: ProtoPositionDetailsLiteRes.payloadType:type_name -> ProtoCSPayloadType
	264, // 212: ProtoPositionDetailsLiteRes.stopLossTakeProfitChangeRecord:type_name -> ProtoStopLossTakeProfitChangeRecord
	265, // 213: ProtoPositionDetailsLiteRes.swapCalculationRecord:type_name -> ProtoSwapCalculationRecord
	238, // 214: ProtoPositionDetailsLiteRes.position:type_name -> ProtoPosition
	235, // 215: ProtoManagerNewOrderReq.payloadType:type_name -> ProtoCSPayloadType
	266, // 216: ProtoManagerNewOrderReq.orderType:type_name -> ProtoOrderType
	267, // 217: ProtoManagerNewOrderReq.tradeSide:type_name -> ProtoTradeSide
	268, // 218: ProtoManagerNewOrderReq.timeInForce:type_name -> ProtoTimeInForce
	269, // 219: ProtoManagerNewOrderReq.stopTriggerMethod:type_name -> ProtoOrderTriggerMethod
	269, // 220: ProtoManagerNewOrderReq.stopLossTriggerMethod:type_name -> ProtoOrderTriggerMethod
	235, // 221: ProtoManagerAmendOrderReq.payloadType:type_name -> ProtoCSPayloadType
	268, // 222: ProtoManagerAmendOrderReq.timeInForce:type_name -> ProtoTimeInForce
	269, // 223: ProtoManagerAmendOrderReq.stopTriggerMethod:type_name -> ProtoOrderTriggerMethod
	269, // 224: ProtoManagerAmendOrderReq.stopLossTriggerMethod:type_name -> ProtoOrderTriggerMethod
	235, // 225: ProtoManagerCancelOrderReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 226: ProtoManagerAmendPositionReq.payloadType:type_name -> ProtoCSPayloadType
	269, // 227: ProtoManagerAmendPositionReq.stopLossTriggerMethod:type_name -> ProtoOrderTriggerMethod
	235, // 228: ProtoManagerClosePositionReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 229: ProtoOrderErrorEvent.payloadType:type_name -> ProtoCSPayloadType
	235, // 230: ProtoTraderLogonEvent.payloadType:type_name -> ProtoCSPayloadType
	270, // 231: ProtoTraderLogonEvent.tradeSessionInfo:type_name -> ProtoTraderSessionInfo
	235, // 232: ProtoTraderLogoutEvent.payloadType:type_name -> ProtoCSPayloadType
	235, // 233: ProtoManagerChangeBonusReq.payloadType:type_name -> ProtoCSPayloadType
	271, // 234: ProtoManagerChangeBonusReq.type:type_name -> ProtoChangeBonusType
	272, // 235: ProtoManagerChangeBonusReq.owner:type_name -> ProtoBonusOwner
	235, // 236: ProtoManagerChangeBonusRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 237: ProtoSymbolCategoryListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 238: ProtoSymbolCategoryListRes.payloadType:type_name -> ProtoCSPayloadType
	273, // 239: ProtoSymbolCategoryListRes.categories:type_name -> ProtoSymbolCategory
	235, // 240: ProtoGetSymbolsForConversionReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 241: ProtoGetSymbolsForConversionRes.payloadType:type_name -> ProtoCSPayloadType
	274, // 242: ProtoGetSymbolsForConversionRes.symbol:type_name -> ProtoLightSymbol
	235, // 243: ProtoDealingSettingsReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 244: ProtoDealingSettingsRes.payloadType:type_name -> ProtoCSPayloadType
	275, // 245: ProtoDealingSettingsRes.symbol:type_name -> ProtoDealingSymbol
	276, // 246: ProtoDealingSettingsRes.manualDealTimeoutAction:type_name -> ProtoManualDealTimeoutAction
	235, // 247: ProtoUpdateDealingSettingsReq.payloadType:type_name -> ProtoCSPayloadType
	275, // 248: ProtoUpdateDealingSettingsReq.symbol:type_name -> ProtoDealingSymbol
	276, // 249: ProtoUpdateDealingSettingsReq.manualDealTimeoutAction:type_name -> ProtoManualDealTimeoutAction
	235, // 250: ProtoUpdateDealingSettingsRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 251: ProtoDealingSettingsUpdatedEvent.payloadType:type_name -> ProtoCSPayloadType
	275, // 252: ProtoDealingSettingsUpdatedEvent.symbol:type_name -> ProtoDealingSymbol
	276, // 253: ProtoDealingSettingsUpdatedEvent.manualDealTimeoutAction:type_name -> ProtoManualDealTimeoutAction
	235, // 254: ProtoManualDealListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 255: ProtoManualDealListRes.payloadType:type_name -> ProtoCSPayloadType
	277, // 256: ProtoManualDealListRes.deal:type_name -> ProtoManualDeal
	235, // 257: ProtoNewManualDealEvent.payloadType:type_name -> ProtoCSPayloadType
	266, // 258: ProtoNewManualDealEvent.orderType:type_name -> ProtoOrderType
	267, // 259: ProtoNewManualDealEvent.tradeSide:type_name -> ProtoTradeSide
	278, // 260: ProtoNewManualDealEvent.bookType:type_name -> ProtoBookType
	279, // 261: ProtoNewManualDealEvent.reason:type_name -> ProtoManualDealReason
	235, // 262: ProtoManualDealClaimReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 263: ProtoManualDealClaimRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 264: ProtoManualDealClaimedEvent.payloadType:type_name -> ProtoCSPayloadType
	235, // 265: ProtoManualDealUnclaimReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 266: ProtoManualDealUnclaimRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 267: ProtoManualDealUnclaimedEvent.payloadType:type_name -> ProtoCSPayloadType
	235, // 268: ProtoManualDealResetReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 269: ProtoManualDealResetRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 270: ProtoManualDealRejectReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 271: ProtoManualDealRejectRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 272: ProtoManualDealExecuteReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 273: ProtoManualDealExecuteRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 274: ProtoManualDealProcessedEvent.payloadType:type_name -> ProtoCSPayloadType
	235, // 275: ProtoCrudMaxAutoExecutionSizeProfileReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 276: ProtoCrudMaxAutoExecutionSizeProfileReq.operation:type_name -> ProtoCrudOperation
	280, // 277: ProtoCrudMaxAutoExecutionSizeProfileReq.profile:type_name -> ProtoMaxAutoExecutionSizeProfile
	235, // 278: ProtoCrudMaxAutoExecutionSizeProfileRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 279: ProtoCrudMaxAutoExecutionSizeProfileRes.operation:type_name -> ProtoCrudOperation
	235, // 280: ProtoMaxAutoExecutionSizeProfileChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	257, // 281: ProtoMaxAutoExecutionSizeProfileChangedEvent.operation:type_name -> ProtoCrudOperation
	280, // 282: ProtoMaxAutoExecutionSizeProfileChangedEvent.profile:type_name -> ProtoMaxAutoExecutionSizeProfile
	235, // 283: ProtoMaxAutoExecutionSizeProfileListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 284: ProtoMaxAutoExecutionSizeProfileListRes.payloadType:type_name -> ProtoCSPayloadType
	280, // 285: ProtoMaxAutoExecutionSizeProfileListRes.profile:type_name -> ProtoMaxAutoExecutionSizeProfile
	235, // 286: ProtoDealerNewOrderReq.payloadType:type_name -> ProtoCSPayloadType
	266, // 287: ProtoDealerNewOrderReq.orderType:type_name -> ProtoOrderType
	267, // 288: ProtoDealerNewOrderReq.tradeSide:type_name -> ProtoTradeSide
	268, // 289: ProtoDealerNewOrderReq.timeInForce:type_name -> ProtoTimeInForce
	269, // 290: ProtoDealerNewOrderReq.stopTriggerMethod:type_name -> ProtoOrderTriggerMethod
	269, // 291: ProtoDealerNewOrderReq.stopLossTriggerMethod:type_name -> ProtoOrderTriggerMethod
	235, // 292: ProtoDealerAmendOrderReq.payloadType:type_name -> ProtoCSPayloadType
	268, // 293: ProtoDealerAmendOrderReq.timeInForce:type_name -> ProtoTimeInForce
	269, // 294: ProtoDealerAmendOrderReq.stopTriggerMethod:type_name -> ProtoOrderTriggerMethod
	269, // 295: ProtoDealerAmendOrderReq.stopLossTriggerMethod:type_name -> ProtoOrderTriggerMethod
	235, // 296: ProtoDealerCancelOrderReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 297: ProtoDealerAmendPositionReq.payloadType:type_name -> ProtoCSPayloadType
	269, // 298: ProtoDealerAmendPositionReq.stopLossTriggerMethod:type_name -> ProtoOrderTriggerMethod
	235, // 299: ProtoDealerClosePositionReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 300: ProtoAssetClassChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	263, // 301: ProtoAssetClassChangedEvent.assetClass:type_name -> ProtoAssetClass
	257, // 302: ProtoAssetClassChangedEvent.operation:type_name -> ProtoCrudOperation
	235, // 303: ProtoAssetClassDeletedEvent.payloadType:type_name -> ProtoCSPayloadType
	235, // 304: ProtoSymbolCategoryChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	273, // 305: ProtoSymbolCategoryChangedEvent.symbolCategory:type_name -> ProtoSymbolCategory
	257, // 306: ProtoSymbolCategoryChangedEvent.operation:type_name -> ProtoCrudOperation
	235, // 307: ProtoSymbolCategoryDeletedEvent.payloadType:type_name -> ProtoCSPayloadType
	235, // 308: ProtoForceClosePositionReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 309: ProtoForceOpenPositionReq.payloadType:type_name -> ProtoCSPayloadType
	267, // 310: ProtoForceOpenPositionReq.tradeSide:type_name -> ProtoTradeSide
	235, // 311: ProtoManagerBalanceTransferReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 312: ProtoManagerBalanceTransferRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 313: ProtoCrudScheduleProfileReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 314: ProtoCrudScheduleProfileReq.operation:type_name -> ProtoCrudOperation
	281, // 315: ProtoCrudScheduleProfileReq.scheduleProfile:type_name -> ProtoScheduleProfile
	235, // 316: ProtoCrudScheduleProfileRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 317: ProtoCrudScheduleProfileRes.operation:type_name -> ProtoCrudOperation
	235, // 318: ProtoScheduleProfileChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	257, // 319: ProtoScheduleProfileChangedEvent.operation:type_name -> ProtoCrudOperation
	281, // 320: ProtoScheduleProfileChangedEvent.scheduleProfile:type_name -> ProtoScheduleProfile
	235, // 321: ProtoScheduleProfileListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 322: ProtoScheduleProfileListRes.payloadType:type_name -> ProtoCSPayloadType
	281, // 323: ProtoScheduleProfileListRes.scheduleProfile:type_name -> ProtoScheduleProfile
	235, // 324: ProtoCrudCommissionProfileReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 325: ProtoCrudCommissionProfileReq.operation:type_name -> ProtoCrudOperation
	282, // 326: ProtoCrudCommissionProfileReq.commissionProfile:type_name -> ProtoCommissionProfile
	235, // 327: ProtoCrudCommissionProfileRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 328: ProtoCrudCommissionProfileRes.operation:type_name -> ProtoCrudOperation
	235, // 329: ProtoCommissionProfileChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	257, // 330: ProtoCommissionProfileChangedEvent.operation:type_name -> ProtoCrudOperation
	282, // 331: ProtoCommissionProfileChangedEvent.commissionProfile:type_name -> ProtoCommissionProfile
	235, // 332: ProtoCommissionProfileListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 333: ProtoCommissionProfileListRes.payloadType:type_name -> ProtoCSPayloadType
	282, // 334: ProtoCommissionProfileListRes.commissionProfile:type_name -> ProtoCommissionProfile
	235, // 335: ProtoCrudVolumeProfileReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 336: ProtoCrudVolumeProfileReq.operation:type_name -> ProtoCrudOperation
	283, // 337: ProtoCrudVolumeProfileReq.volumeProfile:type_name -> ProtoVolumeProfile
	235, // 338: ProtoCrudVolumeProfileRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 339: ProtoCrudVolumeProfileRes.operation:type_name -> ProtoCrudOperation
	235, // 340: ProtoVolumeProfileChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	257, // 341: ProtoVolumeProfileChangedEvent.operation:type_name -> ProtoCrudOperation
	283, // 342: ProtoVolumeProfileChangedEvent.volumeProfile:type_name -> ProtoVolumeProfile
	235, // 343: ProtoVolumeProfileListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 344: ProtoVolumeProfileListRes.payloadType:type_name -> ProtoCSPayloadType
	283, // 345: ProtoVolumeProfileListRes.volumeProfile:type_name -> ProtoVolumeProfile
	235, // 346: ProtoCrudExecutionProfileReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 347: ProtoCrudExecutionProfileReq.operation:type_name -> ProtoCrudOperation
	284, // 348: ProtoCrudExecutionProfileReq.executionProfile:type_name -> ProtoExecutionProfile
	235, // 349: ProtoCrudExecutionProfileRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 350: ProtoCrudExecutionProfileRes.operation:type_name -> ProtoCrudOperation
	235, // 351: ProtoExecutionProfileChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	257, // 352: ProtoExecutionProfileChangedEvent.operation:type_name -> ProtoCrudOperation
	284, // 353: ProtoExecutionProfileChangedEvent.executionProfile:type_name -> ProtoExecutionProfile
	235, // 354: ProtoExecutionProfileListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 355: ProtoExecutionProfileListRes.payloadType:type_name -> ProtoCSPayloadType
	284, // 356: ProtoExecutionProfileListRes.executionProfile:type_name -> ProtoExecutionProfile
	235, // 357: ProtoCrudProtectionProfileReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 358: ProtoCrudProtectionProfileReq.operation:type_name -> ProtoCrudOperation
	285, // 359: ProtoCrudProtectionProfileReq.protectionProfile:type_name -> ProtoProtectionProfile
	235, // 360: ProtoCrudProtectionProfileRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 361: ProtoCrudProtectionProfileRes.operation:type_name -> ProtoCrudOperation
	235, // 362: ProtoProtectionProfileChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	257, // 363: ProtoProtectionProfileChangedEvent.operation:type_name -> ProtoCrudOperation
	285, // 364: ProtoProtectionProfileChangedEvent.protectionProfile:type_name -> ProtoProtectionProfile
	235, // 365: ProtoProtectionProfileListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 366: ProtoProtectionProfileListRes.payloadType:type_name -> ProtoCSPayloadType
	285, // 367: ProtoProtectionProfileListRes.protectionProfile:type_name -> ProtoProtectionProfile
	235, // 368: ProtoCrudSwapFreeProfileReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 369: ProtoCrudSwapFreeProfileReq.operation:type_name -> ProtoCrudOperation
	286, // 370: ProtoCrudSwapFreeProfileReq.swapFreeProfile:type_name -> ProtoSwapFreeProfile
	235, // 371: ProtoCrudSwapFreeProfileRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 372: ProtoCrudSwapFreeProfileRes.operation:type_name -> ProtoCrudOperation
	235, // 373: ProtoSwapFreeProfileChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	257, // 374: ProtoSwapFreeProfileChangedEvent.operation:type_name -> ProtoCrudOperation
	286, // 375: ProtoSwapFreeProfileChangedEvent.swapFreeProfile:type_name -> ProtoSwapFreeProfile
	235, // 376: ProtoSwapFreeProfileListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 377: ProtoSwapFreeProfileListRes.payloadType:type_name -> ProtoCSPayloadType
	286, // 378: ProtoSwapFreeProfileListRes.swapFreeProfile:type_name -> ProtoSwapFreeProfile
	235, // 379: ProtoCrudHolidayReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 380: ProtoCrudHolidayReq.operation:type_name -> ProtoCrudOperation
	287, // 381: ProtoCrudHolidayReq.holiday:type_name -> ProtoHoliday
	235, // 382: ProtoCrudHolidayRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 383: ProtoCrudHolidayRes.operation:type_name -> ProtoCrudOperation
	235, // 384: ProtoHolidayChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	257, // 385: ProtoHolidayChangedEvent.operation:type_name -> ProtoCrudOperation
	287, // 386: ProtoHolidayChangedEvent.holiday:type_name -> ProtoHoliday
	235, // 387: ProtoHolidayListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 388: ProtoHolidayListRes.payloadType:type_name -> ProtoCSPayloadType
	287, // 389: ProtoHolidayListRes.holiday:type_name -> ProtoHoliday
	235, // 390: ProtoCrudHolidayProfileReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 391: ProtoCrudHolidayProfileReq.operation:type_name -> ProtoCrudOperation
	288, // 392: ProtoCrudHolidayProfileReq.holidayProfile:type_name -> ProtoHolidayProfile
	235, // 393: ProtoCrudHolidayProfileRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 394: ProtoCrudHolidayProfileRes.operation:type_name -> ProtoCrudOperation
	235, // 395: ProtoHolidayProfileChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	257, // 396: ProtoHolidayProfileChangedEvent.operation:type_name -> ProtoCrudOperation
	288, // 397: ProtoHolidayProfileChangedEvent.holidayProfile:type_name -> ProtoHolidayProfile
	235, // 398: ProtoHolidayProfileListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 399: ProtoHolidayProfileListRes.payloadType:type_name -> ProtoCSPayloadType
	288, // 400: ProtoHolidayProfileListRes.holidayProfile:type_name -> ProtoHolidayProfile
	235, // 401: ProtoLiquidityFeedSymbolListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 402: ProtoLiquidityFeedSymbolListRes.payloadType:type_name -> ProtoCSPayloadType
	259, // 403: ProtoLiquidityFeedSymbolListRes.liquidityFeedSymbol:type_name -> ProtoLiquidityFeedSymbol
	235, // 404: ProtoCreateSymbolReq.payloadType:type_name -> ProtoCSPayloadType
	289, // 405: ProtoCreateSymbolReq.tradingMode:type_name -> ProtoTradingMode
	290, // 406: ProtoCreateSymbolReq.futuresSettings:type_name -> ProtoFuturesSettings
	235, // 407: ProtoCreateSymbolRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 408: ProtoSymbolArchivedEvent.payloadType:type_name -> ProtoCSPayloadType
	235, // 409: ProtoSymbolRestoredEvent.payloadType:type_name -> ProtoCSPayloadType
	246, // 410: ProtoSymbolRestoredEvent.symbol:type_name -> ProtoManagerSymbol
	235, // 411: ProtoLightSwapAndDividendProfileListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 412: ProtoLightSwapAndDividendProfileListRes.payloadType:type_name -> ProtoCSPayloadType
	291, // 413: ProtoLightSwapAndDividendProfileListRes.swapAndDividendProfile:type_name -> ProtoLightSwapAndDividendProfile
	235, // 414: ProtoSwapAndDividendProfileByIdReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 415: ProtoSwapAndDividendProfileByIdRes.payloadType:type_name -> ProtoCSPayloadType
	260, // 416: ProtoSwapAndDividendProfileByIdRes.swapAndDividendProfile:type_name -> ProtoSwapAndDividendProfile
	235, // 417: ProtoManagerByIdReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 418: ProtoManagerByIdRes.payloadType:type_name -> ProtoCSPayloadType
	248, // 419: ProtoManagerByIdRes.manager:type_name -> ProtoManager
	235, // 420: ProtoCrudTradeNotificationProfileReq.payloadType:type_name -> ProtoCSPayloadType
	257, // 421: ProtoCrudTradeNotificationProfileReq.operation:type_name -> ProtoCrudOperation
	292, // 422: ProtoCrudTradeNotificationProfileReq.tradeNotificationProfile:type_name -> ProtoTradeNotificationProfile
	235, // 423: ProtoCrudTradeNotificationProfileRes.payloadType:type_name -> ProtoCSPayloadType
	257, // 424: ProtoCrudTradeNotificationProfileRes.operation:type_name -> ProtoCrudOperation
	235, // 425: ProtoTradeNotificationProfileChangedEvent.payloadType:type_name -> ProtoCSPayloadType
	257, // 426: ProtoTradeNotificationProfileChangedEvent.operation:type_name -> ProtoCrudOperation
	292, // 427: ProtoTradeNotificationProfileChangedEvent.tradeNotificationProfile:type_name -> ProtoTradeNotificationProfile
	235, // 428: ProtoTradeNotificationProfileListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 429: ProtoTradeNotificationProfileListRes.payloadType:type_name -> ProtoCSPayloadType
	292, // 430: ProtoTradeNotificationProfileListRes.tradeNotificationProfile:type_name -> ProtoTradeNotificationProfile
	235, // 431: ProtoManagerLightTraderListReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 432: ProtoManagerLightTraderListRes.payloadType:type_name -> ProtoCSPayloadType
	293, // 433: ProtoManagerLightTraderListRes.trader:type_name -> ProtoManagerLightTrader
	235, // 434: ProtoSubscribeSpotQuotesReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 435: ProtoSubscribeSpotQuotesRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 436: ProtoUnsubscribeSpotQuotesReq.payloadType:type_name -> ProtoCSPayloadType
	235, // 437: ProtoUnsubscribeSpotQuotesRes.payloadType:type_name -> ProtoCSPayloadType
	235, // 438: ProtoSpotEvent.payloadType:type_name -> ProtoCSPayloadType
	257, // 439: ProtoUpdatePriceStreamReq.ProtoUpdatePriceStreamSymbol.operation:type_name -> ProtoCrudOperation
	440, // [440:440] is the sub-list for method output_type
	440, // [440:440] is the sub-list for method input_type
	440, // [440:440] is the sub-list for extension type_name
	440, // [440:440] is the sub-list for extension extendee
	0,   // [0:440] is the sub-list for field type_name
}

func init() { file_CSMessages_External_proto_init() }
func file_CSMessages_External_proto_init() {
	if File_CSMessages_External_proto != nil {
		return
	}
	file_CSModelMessages_External_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_CSMessages_External_proto_rawDesc), len(file_CSMessages_External_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   235,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_CSMessages_External_proto_goTypes,
		DependencyIndexes: file_CSMessages_External_proto_depIdxs,
		MessageInfos:      file_CSMessages_External_proto_msgTypes,
	}.Build()
	File_CSMessages_External_proto = out.File
	file_CSMessages_External_proto_goTypes = nil
	file_CSMessages_External_proto_depIdxs = nil
}
