// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: CSModelMessages_External.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for message types
type ProtoCSPayloadType int32

const (
	ProtoCSPayloadType_PROTO_SPOT_EVENT                                         ProtoCSPayloadType = 3
	ProtoCSPayloadType_PROTO_ORDER_ERROR_EVENT                                  ProtoCSPayloadType = 138
	ProtoCSPayloadType_PROTO_MANAGER_BY_ID_REQ                                  ProtoCSPayloadType = 226
	ProtoCSPayloadType_PROTO_MANAGER_BY_ID_RES                                  ProtoCSPayloadType = 227
	ProtoCSPayloadType_PROTO_MANAGER_LIGHT_TRADER_LIST_REQ                      ProtoCSPayloadType = 228
	ProtoCSPayloadType_PROTO_MANAGER_LIGHT_TRADER_LIST_RES                      ProtoCSPayloadType = 229
	ProtoCSPayloadType_PROTO_EXECUTION_EVENT                                    ProtoCSPayloadType = 300
	ProtoCSPayloadType_PROTO_MANAGER_AUTH_REQ                                   ProtoCSPayloadType = 301
	ProtoCSPayloadType_PROTO_MANAGER_AUTH_RES                                   ProtoCSPayloadType = 302
	ProtoCSPayloadType_PROTO_CHANGE_TRADER_PASSWORD_REQ                         ProtoCSPayloadType = 303
	ProtoCSPayloadType_PROTO_CHANGE_TRADER_PASSWORD_RES                         ProtoCSPayloadType = 304
	ProtoCSPayloadType_PROTO_CHANGE_MANAGER_PASSWORD_REQ                        ProtoCSPayloadType = 305
	ProtoCSPayloadType_PROTO_CHANGE_MANAGER_PASSWORD_RES                        ProtoCSPayloadType = 306
	ProtoCSPayloadType_PROTO_CHECK_TRADER_PASSWORD_REQ                          ProtoCSPayloadType = 307
	ProtoCSPayloadType_PROTO_CHECK_TRADER_PASSWORD_RES                          ProtoCSPayloadType = 308
	ProtoCSPayloadType_PROTO_CHECK_MANAGER_PASSWORD_REQ                         ProtoCSPayloadType = 309
	ProtoCSPayloadType_PROTO_CHECK_MANAGER_PASSWORD_RES                         ProtoCSPayloadType = 310
	ProtoCSPayloadType_PROTO_SERVER_TIME_REQ                                    ProtoCSPayloadType = 313
	ProtoCSPayloadType_PROTO_SERVER_TIME_RES                                    ProtoCSPayloadType = 314
	ProtoCSPayloadType_PROTO_ORDER_DETAILS_REQ                                  ProtoCSPayloadType = 321
	ProtoCSPayloadType_PROTO_ORDER_DETAILS_RES                                  ProtoCSPayloadType = 322
	ProtoCSPayloadType_PROTO_POSITION_MARGIN_CHANGED_EVENT                      ProtoCSPayloadType = 335
	ProtoCSPayloadType_PROTO_RECALCULATE_ACCOUNT_MARGIN_REQ                     ProtoCSPayloadType = 336
	ProtoCSPayloadType_PROTO_RECALCULATE_ACCOUNT_MARGIN_RES                     ProtoCSPayloadType = 337
	ProtoCSPayloadType_PROTO_RECALCULATE_SYMBOL_MARGIN_REQ                      ProtoCSPayloadType = 338
	ProtoCSPayloadType_PROTO_RECALCULATE_SYMBOL_MARGIN_RES                      ProtoCSPayloadType = 339
	ProtoCSPayloadType_PROTO_RECALCULATE_DYNAMIC_LEVERAGE_REQ                   ProtoCSPayloadType = 347
	ProtoCSPayloadType_PROTO_RECALCULATE_DYNAMIC_LEVERAGE_RES                   ProtoCSPayloadType = 348
	ProtoCSPayloadType_PROTO_MANAGER_BALANCE_TRANSFER_REQ                       ProtoCSPayloadType = 355
	ProtoCSPayloadType_PROTO_MANAGER_BALANCE_TRANSFER_RES                       ProtoCSPayloadType = 356
	ProtoCSPayloadType_PROTO_CRUD_SCHEDULE_PROFILE_REQ                          ProtoCSPayloadType = 360
	ProtoCSPayloadType_PROTO_CRUD_SCHEDULE_PROFILE_RES                          ProtoCSPayloadType = 361
	ProtoCSPayloadType_PROTO_SCHEDULE_PROFILE_CHANGED_EVENT                     ProtoCSPayloadType = 362
	ProtoCSPayloadType_PROTO_SCHEDULE_PROFILE_LIST_REQ                          ProtoCSPayloadType = 363
	ProtoCSPayloadType_PROTO_SCHEDULE_PROFILE_LIST_RES                          ProtoCSPayloadType = 364
	ProtoCSPayloadType_PROTO_CRUD_COMMISSION_PROFILE_REQ                        ProtoCSPayloadType = 365
	ProtoCSPayloadType_PROTO_CRUD_COMMISSION_PROFILE_RES                        ProtoCSPayloadType = 366
	ProtoCSPayloadType_PROTO_COMMISSION_PROFILE_CHANGED_EVENT                   ProtoCSPayloadType = 367
	ProtoCSPayloadType_PROTO_COMMISSION_PROFILE_LIST_REQ                        ProtoCSPayloadType = 368
	ProtoCSPayloadType_PROTO_COMMISSION_PROFILE_LIST_RES                        ProtoCSPayloadType = 369
	ProtoCSPayloadType_PROTO_CRUD_VOLUME_PROFILE_REQ                            ProtoCSPayloadType = 375
	ProtoCSPayloadType_PROTO_CRUD_VOLUME_PROFILE_RES                            ProtoCSPayloadType = 376
	ProtoCSPayloadType_PROTO_VOLUME_PROFILE_CHANGED_EVENT                       ProtoCSPayloadType = 377
	ProtoCSPayloadType_PROTO_VOLUME_PROFILE_LIST_REQ                            ProtoCSPayloadType = 378
	ProtoCSPayloadType_PROTO_VOLUME_PROFILE_LIST_RES                            ProtoCSPayloadType = 379
	ProtoCSPayloadType_PROTO_CRUD_EXECUTION_PROFILE_REQ                         ProtoCSPayloadType = 380
	ProtoCSPayloadType_PROTO_CRUD_EXECUTION_PROFILE_RES                         ProtoCSPayloadType = 381
	ProtoCSPayloadType_PROTO_EXECUTION_PROFILE_CHANGED_EVENT                    ProtoCSPayloadType = 382
	ProtoCSPayloadType_PROTO_EXECUTION_PROFILE_LIST_REQ                         ProtoCSPayloadType = 383
	ProtoCSPayloadType_PROTO_EXECUTION_PROFILE_LIST_RES                         ProtoCSPayloadType = 384
	ProtoCSPayloadType_PROTO_CRUD_PROTECTION_PROFILE_REQ                        ProtoCSPayloadType = 385
	ProtoCSPayloadType_PROTO_CRUD_PROTECTION_PROFILE_RES                        ProtoCSPayloadType = 386
	ProtoCSPayloadType_PROTO_PROTECTION_PROFILE_CHANGED_EVENT                   ProtoCSPayloadType = 387
	ProtoCSPayloadType_PROTO_PROTECTION_PROFILE_LIST_REQ                        ProtoCSPayloadType = 388
	ProtoCSPayloadType_PROTO_PROTECTION_PROFILE_LIST_RES                        ProtoCSPayloadType = 389
	ProtoCSPayloadType_PROTO_CRUD_SWAP_FREE_PROFILE_REQ                         ProtoCSPayloadType = 390
	ProtoCSPayloadType_PROTO_CRUD_SWAP_FREE_PROFILE_RES                         ProtoCSPayloadType = 391
	ProtoCSPayloadType_PROTO_SWAP_FREE_PROFILE_CHANGED_EVENT                    ProtoCSPayloadType = 392
	ProtoCSPayloadType_PROTO_SWAP_FREE_PROFILE_LIST_REQ                         ProtoCSPayloadType = 393
	ProtoCSPayloadType_PROTO_SWAP_FREE_PROFILE_LIST_RES                         ProtoCSPayloadType = 394
	ProtoCSPayloadType_PROTO_CRUD_HOLIDAY_REQ                                   ProtoCSPayloadType = 395
	ProtoCSPayloadType_PROTO_CRUD_HOLIDAY_RES                                   ProtoCSPayloadType = 396
	ProtoCSPayloadType_PROTO_HOLIDAY_CHANGED_EVENT                              ProtoCSPayloadType = 397
	ProtoCSPayloadType_PROTO_HOLIDAY_LIST_REQ                                   ProtoCSPayloadType = 398
	ProtoCSPayloadType_PROTO_HOLIDAY_LIST_RES                                   ProtoCSPayloadType = 399
	ProtoCSPayloadType_PROTO_CRUD_HOLIDAY_PROFILE_REQ                           ProtoCSPayloadType = 400
	ProtoCSPayloadType_PROTO_CRUD_HOLIDAY_PROFILE_RES                           ProtoCSPayloadType = 401
	ProtoCSPayloadType_PROTO_HOLIDAY_PROFILE_CHANGED_EVENT                      ProtoCSPayloadType = 402
	ProtoCSPayloadType_PROTO_TRADER_LIST_REQ                                    ProtoCSPayloadType = 403
	ProtoCSPayloadType_PROTO_TRADER_LIST_RES                                    ProtoCSPayloadType = 404
	ProtoCSPayloadType_PROTO_POSITION_LIST_REQ                                  ProtoCSPayloadType = 407
	ProtoCSPayloadType_PROTO_POSITION_LIST_RES                                  ProtoCSPayloadType = 408
	ProtoCSPayloadType_PROTO_PENDING_ORDER_LIST_REQ                             ProtoCSPayloadType = 409
	ProtoCSPayloadType_PROTO_PENDING_ORDER_LIST_RES                             ProtoCSPayloadType = 410
	ProtoCSPayloadType_PROTO_MANAGER_LIST_REQ                                   ProtoCSPayloadType = 411
	ProtoCSPayloadType_PROTO_MANAGER_LIST_RES                                   ProtoCSPayloadType = 412
	ProtoCSPayloadType_PROTO_BALANCE_HISTORY_LIST_REQ                           ProtoCSPayloadType = 417
	ProtoCSPayloadType_PROTO_BALANCE_HISTORY_LIST_RES                           ProtoCSPayloadType = 418
	ProtoCSPayloadType_PROTO_EXPOSURE_SYMBOL_LIST_REQ                           ProtoCSPayloadType = 419
	ProtoCSPayloadType_PROTO_EXPOSURE_SYMBOL_LIST_RES                           ProtoCSPayloadType = 420
	ProtoCSPayloadType_PROTO_SERVER_SETTINGS_REQ                                ProtoCSPayloadType = 423
	ProtoCSPayloadType_PROTO_SERVER_SETTINGS_RES                                ProtoCSPayloadType = 424
	ProtoCSPayloadType_PROTO_PRICE_STREAM_LIST_REQ                              ProtoCSPayloadType = 427
	ProtoCSPayloadType_PROTO_PRICE_STREAM_LIST_RES                              ProtoCSPayloadType = 428
	ProtoCSPayloadType_PROTO_LIQUIDITY_FEED_LIST_REQ                            ProtoCSPayloadType = 429
	ProtoCSPayloadType_PROTO_LIQUIDITY_FEED_LIST_RES                            ProtoCSPayloadType = 430
	ProtoCSPayloadType_PROTO_MANAGER_DEAL_LIST_REQ                              ProtoCSPayloadType = 431
	ProtoCSPayloadType_PROTO_MANAGER_DEAL_LIST_RES                              ProtoCSPayloadType = 432
	ProtoCSPayloadType_PROTO_COUNTRY_LIST_REQ                                   ProtoCSPayloadType = 435
	ProtoCSPayloadType_PROTO_COUNTRY_LIST_RES                                   ProtoCSPayloadType = 436
	ProtoCSPayloadType_PROTO_ASSET_CLASS_LIST_REQ                               ProtoCSPayloadType = 437
	ProtoCSPayloadType_PROTO_ASSET_CLASS_LIST_RES                               ProtoCSPayloadType = 438
	ProtoCSPayloadType_PROTO_ORDER_MANAGER_LIST_REQ                             ProtoCSPayloadType = 443
	ProtoCSPayloadType_PROTO_ORDER_MANAGER_LIST_RES                             ProtoCSPayloadType = 444
	ProtoCSPayloadType_PROTO_HOLIDAY_PROFILE_LIST_REQ                           ProtoCSPayloadType = 447
	ProtoCSPayloadType_PROTO_HOLIDAY_PROFILE_LIST_RES                           ProtoCSPayloadType = 448
	ProtoCSPayloadType_PROTO_MANAGER_DEAL_LIST_BY_POSITION_ID_REQ               ProtoCSPayloadType = 459
	ProtoCSPayloadType_PROTO_MANAGER_DEAL_LIST_BY_POSITION_ID_RES               ProtoCSPayloadType = 460
	ProtoCSPayloadType_PROTO_MANAGER__ORDER_LIST_BY_POSITION_ID_REQ             ProtoCSPayloadType = 461
	ProtoCSPayloadType_PROTO_MANAGER__ORDER_LIST_BY_POSITION_ID_RES             ProtoCSPayloadType = 462
	ProtoCSPayloadType_PROTO_SYMBOL_CATEGORY_LIST_REQ                           ProtoCSPayloadType = 463
	ProtoCSPayloadType_PROTO_SYMBOL_CATEGORY_LIST_RES                           ProtoCSPayloadType = 464
	ProtoCSPayloadType_PROTO_ASSET_LIST_REQ                                     ProtoCSPayloadType = 465
	ProtoCSPayloadType_PROTO_ASSET_LIST_RES                                     ProtoCSPayloadType = 466
	ProtoCSPayloadType_PROTO_MANAGER_SYMBOL_LIST_REQ                            ProtoCSPayloadType = 467
	ProtoCSPayloadType_PROTO_MANAGER_SYMBOL_LIST_RES                            ProtoCSPayloadType = 468
	ProtoCSPayloadType_PROTO_DYNAMIC_LEVERAGE_LIST_REQ                          ProtoCSPayloadType = 469
	ProtoCSPayloadType_PROTO_DYNAMIC_LEVERAGE_LIST_RES                          ProtoCSPayloadType = 470
	ProtoCSPayloadType_PROTO_GSL_SCHEDULE_LIST_REQ                              ProtoCSPayloadType = 471
	ProtoCSPayloadType_PROTO_GSL_SCHEDULE_LIST_RES                              ProtoCSPayloadType = 472
	ProtoCSPayloadType_PROTO_LIGHT_GROUP_LIST_REQ                               ProtoCSPayloadType = 473
	ProtoCSPayloadType_PROTO_LIGHT_GROUP_LIST_RES                               ProtoCSPayloadType = 474
	ProtoCSPayloadType_PROTO_GROUP_BY_ID_REQ                                    ProtoCSPayloadType = 475
	ProtoCSPayloadType_PROTO_GROUP_BY_ID_RES                                    ProtoCSPayloadType = 476
	ProtoCSPayloadType_PROTO_LIQUIDITY_FEED_SYMBOL_LIST_REQ                     ProtoCSPayloadType = 489
	ProtoCSPayloadType_PROTO_LIQUIDITY_FEED_SYMBOL_LIST_RES                     ProtoCSPayloadType = 490
	ProtoCSPayloadType_PROTO_LIGHT_SWAP_AND_DIVIDEND_PROFILE_LIST_REQ           ProtoCSPayloadType = 493
	ProtoCSPayloadType_PROTO_LIGHT_SWAP_AND_DIVIDEND_PROFILE_LIST_RES           ProtoCSPayloadType = 494
	ProtoCSPayloadType_PROTO_SWAP_AND_DIVIDEND_PROFILE_BY_ID_REQ                ProtoCSPayloadType = 495
	ProtoCSPayloadType_PROTO_SWAP_AND_DIVIDEND_PROFILE_BY_ID_RES                ProtoCSPayloadType = 496
	ProtoCSPayloadType_PROTO_CRUD_TRADER_REQ                                    ProtoCSPayloadType = 501
	ProtoCSPayloadType_PROTO_CRUD_TRADER_RES                                    ProtoCSPayloadType = 502
	ProtoCSPayloadType_PROTO_TRADER_CHANGED_EVENT                               ProtoCSPayloadType = 503
	ProtoCSPayloadType_PROTO_CRUD_GROUP_REQ                                     ProtoCSPayloadType = 504
	ProtoCSPayloadType_PROTO_CRUD_GROUP_RES                                     ProtoCSPayloadType = 505
	ProtoCSPayloadType_PROTO_GROUP_CHANGED_EVENT                                ProtoCSPayloadType = 506
	ProtoCSPayloadType_PROTO_CRUD_SYMBOL_REQ                                    ProtoCSPayloadType = 507
	ProtoCSPayloadType_PROTO_CRUD_SYMBOL_RES                                    ProtoCSPayloadType = 508
	ProtoCSPayloadType_PROTO_CRUD_MANAGER_REQ                                   ProtoCSPayloadType = 510
	ProtoCSPayloadType_PROTO_CRUD_MANAGER_RES                                   ProtoCSPayloadType = 511
	ProtoCSPayloadType_PROTO_MANAGER_CHANGED_EVENT                              ProtoCSPayloadType = 512
	ProtoCSPayloadType_PROTO_CRUD_SWAP_AND_DIVIDEND_PROFILE_REQ                 ProtoCSPayloadType = 513
	ProtoCSPayloadType_PROTO_CRUD_SWAP_AND_DIVIDEND_PROFILE_RES                 ProtoCSPayloadType = 514
	ProtoCSPayloadType_PROTO_SWAP_AND_DIVIDEND_PROFILE_CHANGED_EVENT            ProtoCSPayloadType = 515
	ProtoCSPayloadType_PROTO_UPDATE_SERVER_SETTINGS_REQ                         ProtoCSPayloadType = 516
	ProtoCSPayloadType_PROTO_UPDATE_SERVER_SETTINGS_RES                         ProtoCSPayloadType = 517
	ProtoCSPayloadType_PROTO_SERVER_SETTINGS_CHANGED_EVENT                      ProtoCSPayloadType = 518
	ProtoCSPayloadType_PROTO_CHANGE_BALANCE_REQ                                 ProtoCSPayloadType = 519
	ProtoCSPayloadType_PROTO_CHANGE_BALANCE_RES                                 ProtoCSPayloadType = 520
	ProtoCSPayloadType_PROTO_PRICE_STREAM_CREATE_REQ                            ProtoCSPayloadType = 527
	ProtoCSPayloadType_PROTO_PRICE_STREAM_CREATE_RES                            ProtoCSPayloadType = 528
	ProtoCSPayloadType_PROTO_PRICE_STREAM_DELETE_REQ                            ProtoCSPayloadType = 529
	ProtoCSPayloadType_PROTO_PRICE_STREAM_DELETE_RES                            ProtoCSPayloadType = 530
	ProtoCSPayloadType_PROTO_PRICE_STREAM_UPDATE_REQ                            ProtoCSPayloadType = 531
	ProtoCSPayloadType_PROTO_PRICE_STREAM_UPDATE_RES                            ProtoCSPayloadType = 532
	ProtoCSPayloadType_PROTO_PRICE_STREAM_CHANGED_EVENT                         ProtoCSPayloadType = 533
	ProtoCSPayloadType_PROTO_CRUD_ASSET_REQ                                     ProtoCSPayloadType = 538
	ProtoCSPayloadType_PROTO_CRUD_ASSET_RES                                     ProtoCSPayloadType = 539
	ProtoCSPayloadType_PROTO_ASSET_CHANGED_EVENT                                ProtoCSPayloadType = 540
	ProtoCSPayloadType_PROTO_CRUD_LIQUIDITY_FEED_SYMBOL_REQ                     ProtoCSPayloadType = 545
	ProtoCSPayloadType_PROTO_CRUD_LIQUIDITY_FEED_SYMBOL_RES                     ProtoCSPayloadType = 546
	ProtoCSPayloadType_PROTO_LIQUIDITY_FEED_SYMBOL_CHANGED_EVENT                ProtoCSPayloadType = 547
	ProtoCSPayloadType_PROTO_MANAGER_SYMBOL_CHANGED_EVENT                       ProtoCSPayloadType = 558
	ProtoCSPayloadType_PROTO_CRUD_DYNAMIC_LEVERAGE_REQ                          ProtoCSPayloadType = 559
	ProtoCSPayloadType_PROTO_CRUD_DYNAMIC_LEVERAGE_RES                          ProtoCSPayloadType = 560
	ProtoCSPayloadType_PROTO_DYNAMIC_LEVERAGE_CHANGED_EVENT                     ProtoCSPayloadType = 561
	ProtoCSPayloadType_PROTO_TRADER_PERMISSION_LOSE_EVENT                       ProtoCSPayloadType = 562
	ProtoCSPayloadType_PROTO_CRUD_GSL_SCHEDULE_REQ                              ProtoCSPayloadType = 563
	ProtoCSPayloadType_PROTO_CRUD_GSL_SCHEDULE_RES                              ProtoCSPayloadType = 564
	ProtoCSPayloadType_PROTO_GSL_SCHEDULE_CHANGED_EVENT                         ProtoCSPayloadType = 565
	ProtoCSPayloadType_PROTO_CREATE_SYMBOL_REQ                                  ProtoCSPayloadType = 571
	ProtoCSPayloadType_PROTO_CREATE_SYMBOL_RES                                  ProtoCSPayloadType = 572
	ProtoCSPayloadType_PROTO_SYMBOL_ARCHIVED_EVENT                              ProtoCSPayloadType = 575
	ProtoCSPayloadType_PROTO_SYMBOL_RESTORED_EVENT                              ProtoCSPayloadType = 580
	ProtoCSPayloadType_PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_REQ                ProtoCSPayloadType = 581
	ProtoCSPayloadType_PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_RES                ProtoCSPayloadType = 582
	ProtoCSPayloadType_PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_CHANGED_EVENT      ProtoCSPayloadType = 583
	ProtoCSPayloadType_PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_LIST_REQ           ProtoCSPayloadType = 584
	ProtoCSPayloadType_PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_LIST_RES           ProtoCSPayloadType = 585
	ProtoCSPayloadType_PROTO_SUBSCRIBE_SPOT_QUOTES_REQ                          ProtoCSPayloadType = 601
	ProtoCSPayloadType_PROTO_SUBSCRIBE_SPOT_QUOTES_RES                          ProtoCSPayloadType = 602
	ProtoCSPayloadType_PROTO_UNSUBSCRIBE_SPOT_QUOTES_REQ                        ProtoCSPayloadType = 608
	ProtoCSPayloadType_PROTO_UNSUBSCRIBE_SPOT_QUOTES_RES                        ProtoCSPayloadType = 609
	ProtoCSPayloadType_PROTO_TRADER_BY_ID_REQ                                   ProtoCSPayloadType = 703
	ProtoCSPayloadType_PROTO_TRADER_BY_ID_RES                                   ProtoCSPayloadType = 704
	ProtoCSPayloadType_PROTO_MANAGER_GET_DEAL_REQ                               ProtoCSPayloadType = 709
	ProtoCSPayloadType_PROTO_MANAGER_GET_DEAL_RES                               ProtoCSPayloadType = 711
	ProtoCSPayloadType_PROTO_POSITION_DETAILS_REQ                               ProtoCSPayloadType = 717
	ProtoCSPayloadType_PROTO_POSITION_DETAILS_RES                               ProtoCSPayloadType = 718
	ProtoCSPayloadType_PROTO_MANAGER_CLOSED_POSITION_LIST_REQ                   ProtoCSPayloadType = 720
	ProtoCSPayloadType_PROTO_MANAGER_CLOSED_POSITION_LIST_RES                   ProtoCSPayloadType = 721
	ProtoCSPayloadType_PROTO_TRADER_LOGON_EVENT                                 ProtoCSPayloadType = 730
	ProtoCSPayloadType_PROTO_TRADER_LOGOUT_EVENT                                ProtoCSPayloadType = 731
	ProtoCSPayloadType_PROTO_MANAGER_NEW_ORDER_REQ                              ProtoCSPayloadType = 738
	ProtoCSPayloadType_PROTO_MANAGER_AMEND_ORDER_REQ                            ProtoCSPayloadType = 739
	ProtoCSPayloadType_PROTO_MANAGER_CANCEL_ORDER_REQ                           ProtoCSPayloadType = 740
	ProtoCSPayloadType_PROTO_MANAGER_AMEND_POSITION_REQ                         ProtoCSPayloadType = 741
	ProtoCSPayloadType_PROTO_MANAGER_CLOSE_POSITION_REQ                         ProtoCSPayloadType = 742
	ProtoCSPayloadType_PROTO_POSITION_DETAILS_LITE_REQ                          ProtoCSPayloadType = 754
	ProtoCSPayloadType_PROTO_POSITION_DETAILS_LITE_RES                          ProtoCSPayloadType = 755
	ProtoCSPayloadType_PROTO_MANAGER_CHANGE_BONUS_REQ                           ProtoCSPayloadType = 780
	ProtoCSPayloadType_PROTO_MANAGER_CHANGE_BONUS_RES                           ProtoCSPayloadType = 781
	ProtoCSPayloadType_PROTO_BONUS_HISTORY_LIST_REQ                             ProtoCSPayloadType = 786
	ProtoCSPayloadType_PROTO_BONUS_HISTORY_LIST_RES                             ProtoCSPayloadType = 787
	ProtoCSPayloadType_PROTO_DEALING_SETTINGS_REQ                               ProtoCSPayloadType = 816
	ProtoCSPayloadType_PROTO_DEALING_SETTINGS_RES                               ProtoCSPayloadType = 817
	ProtoCSPayloadType_PROTO_UPDATE_DEALING_SETTINGS_REQ                        ProtoCSPayloadType = 818
	ProtoCSPayloadType_PROTO_UPDATE_DEALING_SETTINGS_RES                        ProtoCSPayloadType = 819
	ProtoCSPayloadType_PROTO_NEW_MANUAL_DEAL_EVENT                              ProtoCSPayloadType = 820
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_LIST_REQ                               ProtoCSPayloadType = 821
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_LIST_RES                               ProtoCSPayloadType = 822
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_CLAIM_REQ                              ProtoCSPayloadType = 823
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_CLAIM_RES                              ProtoCSPayloadType = 824
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_CLAIMED_EVENT                          ProtoCSPayloadType = 825
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_UNCLAIM_REQ                            ProtoCSPayloadType = 826
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_UNCLAIM_RES                            ProtoCSPayloadType = 827
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_UNCLAIMED_EVENT                        ProtoCSPayloadType = 828
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_RESET_REQ                              ProtoCSPayloadType = 829
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_RESET_RES                              ProtoCSPayloadType = 830
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_REJECT_REQ                             ProtoCSPayloadType = 831
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_REJECT_RES                             ProtoCSPayloadType = 832
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_EXECUTE_REQ                            ProtoCSPayloadType = 833
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_EXECUTE_RES                            ProtoCSPayloadType = 834
	ProtoCSPayloadType_PROTO_MANUAL_DEAL_PROCESSED_EVENT                        ProtoCSPayloadType = 835
	ProtoCSPayloadType_PROTO_DEALER_NEW_ORDER_REQ                               ProtoCSPayloadType = 836
	ProtoCSPayloadType_PROTO_DEALER_AMEND_ORDER_REQ                             ProtoCSPayloadType = 837
	ProtoCSPayloadType_PROTO_DEALER_CANCEL_ORDER_REQ                            ProtoCSPayloadType = 838
	ProtoCSPayloadType_PROTO_DEALER_AMEND_POSITION_REQ                          ProtoCSPayloadType = 839
	ProtoCSPayloadType_PROTO_DEALER_CLOSE_POSITION_REQ                          ProtoCSPayloadType = 840
	ProtoCSPayloadType_PROTO_DEALING_SETTINGS_UPDATED_EVENT                     ProtoCSPayloadType = 843
	ProtoCSPayloadType_PROTO_ASSET_CLASS_CHANGED_EVENT                          ProtoCSPayloadType = 846
	ProtoCSPayloadType_PROTO_ASSET_CLASS_DELETED_EVENT                          ProtoCSPayloadType = 847
	ProtoCSPayloadType_PROTO_SYMBOL_CATEGORY_CHANGED_EVENT                      ProtoCSPayloadType = 848
	ProtoCSPayloadType_PROTO_SYMBOL_CATEGORY_DELETED_EVENT                      ProtoCSPayloadType = 849
	ProtoCSPayloadType_PROTO_SYMBOLS_FOR_CONVERSION_REQ                         ProtoCSPayloadType = 864
	ProtoCSPayloadType_PROTO_SYMBOLS_FOR_CONVERSION_RES                         ProtoCSPayloadType = 865
	ProtoCSPayloadType_PROTO_FORCE_CLOSE_POSITION_REQ                           ProtoCSPayloadType = 870
	ProtoCSPayloadType_PROTO_FORCE_OPEN_POSITION_REQ                            ProtoCSPayloadType = 871
	ProtoCSPayloadType_PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_REQ           ProtoCSPayloadType = 883
	ProtoCSPayloadType_PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_RES           ProtoCSPayloadType = 884
	ProtoCSPayloadType_PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_CHANGED_EVENT ProtoCSPayloadType = 885
	ProtoCSPayloadType_PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_LIST_REQ      ProtoCSPayloadType = 886
	ProtoCSPayloadType_PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_LIST_RES      ProtoCSPayloadType = 887
	ProtoCSPayloadType_PROTO_HELLO_EVENT                                        ProtoCSPayloadType = 990
)

// Enum value maps for ProtoCSPayloadType.
var (
	ProtoCSPayloadType_name = map[int32]string{
		3:   "PROTO_SPOT_EVENT",
		138: "PROTO_ORDER_ERROR_EVENT",
		226: "PROTO_MANAGER_BY_ID_REQ",
		227: "PROTO_MANAGER_BY_ID_RES",
		228: "PROTO_MANAGER_LIGHT_TRADER_LIST_REQ",
		229: "PROTO_MANAGER_LIGHT_TRADER_LIST_RES",
		300: "PROTO_EXECUTION_EVENT",
		301: "PROTO_MANAGER_AUTH_REQ",
		302: "PROTO_MANAGER_AUTH_RES",
		303: "PROTO_CHANGE_TRADER_PASSWORD_REQ",
		304: "PROTO_CHANGE_TRADER_PASSWORD_RES",
		305: "PROTO_CHANGE_MANAGER_PASSWORD_REQ",
		306: "PROTO_CHANGE_MANAGER_PASSWORD_RES",
		307: "PROTO_CHECK_TRADER_PASSWORD_REQ",
		308: "PROTO_CHECK_TRADER_PASSWORD_RES",
		309: "PROTO_CHECK_MANAGER_PASSWORD_REQ",
		310: "PROTO_CHECK_MANAGER_PASSWORD_RES",
		313: "PROTO_SERVER_TIME_REQ",
		314: "PROTO_SERVER_TIME_RES",
		321: "PROTO_ORDER_DETAILS_REQ",
		322: "PROTO_ORDER_DETAILS_RES",
		335: "PROTO_POSITION_MARGIN_CHANGED_EVENT",
		336: "PROTO_RECALCULATE_ACCOUNT_MARGIN_REQ",
		337: "PROTO_RECALCULATE_ACCOUNT_MARGIN_RES",
		338: "PROTO_RECALCULATE_SYMBOL_MARGIN_REQ",
		339: "PROTO_RECALCULATE_SYMBOL_MARGIN_RES",
		347: "PROTO_RECALCULATE_DYNAMIC_LEVERAGE_REQ",
		348: "PROTO_RECALCULATE_DYNAMIC_LEVERAGE_RES",
		355: "PROTO_MANAGER_BALANCE_TRANSFER_REQ",
		356: "PROTO_MANAGER_BALANCE_TRANSFER_RES",
		360: "PROTO_CRUD_SCHEDULE_PROFILE_REQ",
		361: "PROTO_CRUD_SCHEDULE_PROFILE_RES",
		362: "PROTO_SCHEDULE_PROFILE_CHANGED_EVENT",
		363: "PROTO_SCHEDULE_PROFILE_LIST_REQ",
		364: "PROTO_SCHEDULE_PROFILE_LIST_RES",
		365: "PROTO_CRUD_COMMISSION_PROFILE_REQ",
		366: "PROTO_CRUD_COMMISSION_PROFILE_RES",
		367: "PROTO_COMMISSION_PROFILE_CHANGED_EVENT",
		368: "PROTO_COMMISSION_PROFILE_LIST_REQ",
		369: "PROTO_COMMISSION_PROFILE_LIST_RES",
		375: "PROTO_CRUD_VOLUME_PROFILE_REQ",
		376: "PROTO_CRUD_VOLUME_PROFILE_RES",
		377: "PROTO_VOLUME_PROFILE_CHANGED_EVENT",
		378: "PROTO_VOLUME_PROFILE_LIST_REQ",
		379: "PROTO_VOLUME_PROFILE_LIST_RES",
		380: "PROTO_CRUD_EXECUTION_PROFILE_REQ",
		381: "PROTO_CRUD_EXECUTION_PROFILE_RES",
		382: "PROTO_EXECUTION_PROFILE_CHANGED_EVENT",
		383: "PROTO_EXECUTION_PROFILE_LIST_REQ",
		384: "PROTO_EXECUTION_PROFILE_LIST_RES",
		385: "PROTO_CRUD_PROTECTION_PROFILE_REQ",
		386: "PROTO_CRUD_PROTECTION_PROFILE_RES",
		387: "PROTO_PROTECTION_PROFILE_CHANGED_EVENT",
		388: "PROTO_PROTECTION_PROFILE_LIST_REQ",
		389: "PROTO_PROTECTION_PROFILE_LIST_RES",
		390: "PROTO_CRUD_SWAP_FREE_PROFILE_REQ",
		391: "PROTO_CRUD_SWAP_FREE_PROFILE_RES",
		392: "PROTO_SWAP_FREE_PROFILE_CHANGED_EVENT",
		393: "PROTO_SWAP_FREE_PROFILE_LIST_REQ",
		394: "PROTO_SWAP_FREE_PROFILE_LIST_RES",
		395: "PROTO_CRUD_HOLIDAY_REQ",
		396: "PROTO_CRUD_HOLIDAY_RES",
		397: "PROTO_HOLIDAY_CHANGED_EVENT",
		398: "PROTO_HOLIDAY_LIST_REQ",
		399: "PROTO_HOLIDAY_LIST_RES",
		400: "PROTO_CRUD_HOLIDAY_PROFILE_REQ",
		401: "PROTO_CRUD_HOLIDAY_PROFILE_RES",
		402: "PROTO_HOLIDAY_PROFILE_CHANGED_EVENT",
		403: "PROTO_TRADER_LIST_REQ",
		404: "PROTO_TRADER_LIST_RES",
		407: "PROTO_POSITION_LIST_REQ",
		408: "PROTO_POSITION_LIST_RES",
		409: "PROTO_PENDING_ORDER_LIST_REQ",
		410: "PROTO_PENDING_ORDER_LIST_RES",
		411: "PROTO_MANAGER_LIST_REQ",
		412: "PROTO_MANAGER_LIST_RES",
		417: "PROTO_BALANCE_HISTORY_LIST_REQ",
		418: "PROTO_BALANCE_HISTORY_LIST_RES",
		419: "PROTO_EXPOSURE_SYMBOL_LIST_REQ",
		420: "PROTO_EXPOSURE_SYMBOL_LIST_RES",
		423: "PROTO_SERVER_SETTINGS_REQ",
		424: "PROTO_SERVER_SETTINGS_RES",
		427: "PROTO_PRICE_STREAM_LIST_REQ",
		428: "PROTO_PRICE_STREAM_LIST_RES",
		429: "PROTO_LIQUIDITY_FEED_LIST_REQ",
		430: "PROTO_LIQUIDITY_FEED_LIST_RES",
		431: "PROTO_MANAGER_DEAL_LIST_REQ",
		432: "PROTO_MANAGER_DEAL_LIST_RES",
		435: "PROTO_COUNTRY_LIST_REQ",
		436: "PROTO_COUNTRY_LIST_RES",
		437: "PROTO_ASSET_CLASS_LIST_REQ",
		438: "PROTO_ASSET_CLASS_LIST_RES",
		443: "PROTO_ORDER_MANAGER_LIST_REQ",
		444: "PROTO_ORDER_MANAGER_LIST_RES",
		447: "PROTO_HOLIDAY_PROFILE_LIST_REQ",
		448: "PROTO_HOLIDAY_PROFILE_LIST_RES",
		459: "PROTO_MANAGER_DEAL_LIST_BY_POSITION_ID_REQ",
		460: "PROTO_MANAGER_DEAL_LIST_BY_POSITION_ID_RES",
		461: "PROTO_MANAGER__ORDER_LIST_BY_POSITION_ID_REQ",
		462: "PROTO_MANAGER__ORDER_LIST_BY_POSITION_ID_RES",
		463: "PROTO_SYMBOL_CATEGORY_LIST_REQ",
		464: "PROTO_SYMBOL_CATEGORY_LIST_RES",
		465: "PROTO_ASSET_LIST_REQ",
		466: "PROTO_ASSET_LIST_RES",
		467: "PROTO_MANAGER_SYMBOL_LIST_REQ",
		468: "PROTO_MANAGER_SYMBOL_LIST_RES",
		469: "PROTO_DYNAMIC_LEVERAGE_LIST_REQ",
		470: "PROTO_DYNAMIC_LEVERAGE_LIST_RES",
		471: "PROTO_GSL_SCHEDULE_LIST_REQ",
		472: "PROTO_GSL_SCHEDULE_LIST_RES",
		473: "PROTO_LIGHT_GROUP_LIST_REQ",
		474: "PROTO_LIGHT_GROUP_LIST_RES",
		475: "PROTO_GROUP_BY_ID_REQ",
		476: "PROTO_GROUP_BY_ID_RES",
		489: "PROTO_LIQUIDITY_FEED_SYMBOL_LIST_REQ",
		490: "PROTO_LIQUIDITY_FEED_SYMBOL_LIST_RES",
		493: "PROTO_LIGHT_SWAP_AND_DIVIDEND_PROFILE_LIST_REQ",
		494: "PROTO_LIGHT_SWAP_AND_DIVIDEND_PROFILE_LIST_RES",
		495: "PROTO_SWAP_AND_DIVIDEND_PROFILE_BY_ID_REQ",
		496: "PROTO_SWAP_AND_DIVIDEND_PROFILE_BY_ID_RES",
		501: "PROTO_CRUD_TRADER_REQ",
		502: "PROTO_CRUD_TRADER_RES",
		503: "PROTO_TRADER_CHANGED_EVENT",
		504: "PROTO_CRUD_GROUP_REQ",
		505: "PROTO_CRUD_GROUP_RES",
		506: "PROTO_GROUP_CHANGED_EVENT",
		507: "PROTO_CRUD_SYMBOL_REQ",
		508: "PROTO_CRUD_SYMBOL_RES",
		510: "PROTO_CRUD_MANAGER_REQ",
		511: "PROTO_CRUD_MANAGER_RES",
		512: "PROTO_MANAGER_CHANGED_EVENT",
		513: "PROTO_CRUD_SWAP_AND_DIVIDEND_PROFILE_REQ",
		514: "PROTO_CRUD_SWAP_AND_DIVIDEND_PROFILE_RES",
		515: "PROTO_SWAP_AND_DIVIDEND_PROFILE_CHANGED_EVENT",
		516: "PROTO_UPDATE_SERVER_SETTINGS_REQ",
		517: "PROTO_UPDATE_SERVER_SETTINGS_RES",
		518: "PROTO_SERVER_SETTINGS_CHANGED_EVENT",
		519: "PROTO_CHANGE_BALANCE_REQ",
		520: "PROTO_CHANGE_BALANCE_RES",
		527: "PROTO_PRICE_STREAM_CREATE_REQ",
		528: "PROTO_PRICE_STREAM_CREATE_RES",
		529: "PROTO_PRICE_STREAM_DELETE_REQ",
		530: "PROTO_PRICE_STREAM_DELETE_RES",
		531: "PROTO_PRICE_STREAM_UPDATE_REQ",
		532: "PROTO_PRICE_STREAM_UPDATE_RES",
		533: "PROTO_PRICE_STREAM_CHANGED_EVENT",
		538: "PROTO_CRUD_ASSET_REQ",
		539: "PROTO_CRUD_ASSET_RES",
		540: "PROTO_ASSET_CHANGED_EVENT",
		545: "PROTO_CRUD_LIQUIDITY_FEED_SYMBOL_REQ",
		546: "PROTO_CRUD_LIQUIDITY_FEED_SYMBOL_RES",
		547: "PROTO_LIQUIDITY_FEED_SYMBOL_CHANGED_EVENT",
		558: "PROTO_MANAGER_SYMBOL_CHANGED_EVENT",
		559: "PROTO_CRUD_DYNAMIC_LEVERAGE_REQ",
		560: "PROTO_CRUD_DYNAMIC_LEVERAGE_RES",
		561: "PROTO_DYNAMIC_LEVERAGE_CHANGED_EVENT",
		562: "PROTO_TRADER_PERMISSION_LOSE_EVENT",
		563: "PROTO_CRUD_GSL_SCHEDULE_REQ",
		564: "PROTO_CRUD_GSL_SCHEDULE_RES",
		565: "PROTO_GSL_SCHEDULE_CHANGED_EVENT",
		571: "PROTO_CREATE_SYMBOL_REQ",
		572: "PROTO_CREATE_SYMBOL_RES",
		575: "PROTO_SYMBOL_ARCHIVED_EVENT",
		580: "PROTO_SYMBOL_RESTORED_EVENT",
		581: "PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_REQ",
		582: "PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_RES",
		583: "PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_CHANGED_EVENT",
		584: "PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_LIST_REQ",
		585: "PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_LIST_RES",
		601: "PROTO_SUBSCRIBE_SPOT_QUOTES_REQ",
		602: "PROTO_SUBSCRIBE_SPOT_QUOTES_RES",
		608: "PROTO_UNSUBSCRIBE_SPOT_QUOTES_REQ",
		609: "PROTO_UNSUBSCRIBE_SPOT_QUOTES_RES",
		703: "PROTO_TRADER_BY_ID_REQ",
		704: "PROTO_TRADER_BY_ID_RES",
		709: "PROTO_MANAGER_GET_DEAL_REQ",
		711: "PROTO_MANAGER_GET_DEAL_RES",
		717: "PROTO_POSITION_DETAILS_REQ",
		718: "PROTO_POSITION_DETAILS_RES",
		720: "PROTO_MANAGER_CLOSED_POSITION_LIST_REQ",
		721: "PROTO_MANAGER_CLOSED_POSITION_LIST_RES",
		730: "PROTO_TRADER_LOGON_EVENT",
		731: "PROTO_TRADER_LOGOUT_EVENT",
		738: "PROTO_MANAGER_NEW_ORDER_REQ",
		739: "PROTO_MANAGER_AMEND_ORDER_REQ",
		740: "PROTO_MANAGER_CANCEL_ORDER_REQ",
		741: "PROTO_MANAGER_AMEND_POSITION_REQ",
		742: "PROTO_MANAGER_CLOSE_POSITION_REQ",
		754: "PROTO_POSITION_DETAILS_LITE_REQ",
		755: "PROTO_POSITION_DETAILS_LITE_RES",
		780: "PROTO_MANAGER_CHANGE_BONUS_REQ",
		781: "PROTO_MANAGER_CHANGE_BONUS_RES",
		786: "PROTO_BONUS_HISTORY_LIST_REQ",
		787: "PROTO_BONUS_HISTORY_LIST_RES",
		816: "PROTO_DEALING_SETTINGS_REQ",
		817: "PROTO_DEALING_SETTINGS_RES",
		818: "PROTO_UPDATE_DEALING_SETTINGS_REQ",
		819: "PROTO_UPDATE_DEALING_SETTINGS_RES",
		820: "PROTO_NEW_MANUAL_DEAL_EVENT",
		821: "PROTO_MANUAL_DEAL_LIST_REQ",
		822: "PROTO_MANUAL_DEAL_LIST_RES",
		823: "PROTO_MANUAL_DEAL_CLAIM_REQ",
		824: "PROTO_MANUAL_DEAL_CLAIM_RES",
		825: "PROTO_MANUAL_DEAL_CLAIMED_EVENT",
		826: "PROTO_MANUAL_DEAL_UNCLAIM_REQ",
		827: "PROTO_MANUAL_DEAL_UNCLAIM_RES",
		828: "PROTO_MANUAL_DEAL_UNCLAIMED_EVENT",
		829: "PROTO_MANUAL_DEAL_RESET_REQ",
		830: "PROTO_MANUAL_DEAL_RESET_RES",
		831: "PROTO_MANUAL_DEAL_REJECT_REQ",
		832: "PROTO_MANUAL_DEAL_REJECT_RES",
		833: "PROTO_MANUAL_DEAL_EXECUTE_REQ",
		834: "PROTO_MANUAL_DEAL_EXECUTE_RES",
		835: "PROTO_MANUAL_DEAL_PROCESSED_EVENT",
		836: "PROTO_DEALER_NEW_ORDER_REQ",
		837: "PROTO_DEALER_AMEND_ORDER_REQ",
		838: "PROTO_DEALER_CANCEL_ORDER_REQ",
		839: "PROTO_DEALER_AMEND_POSITION_REQ",
		840: "PROTO_DEALER_CLOSE_POSITION_REQ",
		843: "PROTO_DEALING_SETTINGS_UPDATED_EVENT",
		846: "PROTO_ASSET_CLASS_CHANGED_EVENT",
		847: "PROTO_ASSET_CLASS_DELETED_EVENT",
		848: "PROTO_SYMBOL_CATEGORY_CHANGED_EVENT",
		849: "PROTO_SYMBOL_CATEGORY_DELETED_EVENT",
		864: "PROTO_SYMBOLS_FOR_CONVERSION_REQ",
		865: "PROTO_SYMBOLS_FOR_CONVERSION_RES",
		870: "PROTO_FORCE_CLOSE_POSITION_REQ",
		871: "PROTO_FORCE_OPEN_POSITION_REQ",
		883: "PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_REQ",
		884: "PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_RES",
		885: "PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_CHANGED_EVENT",
		886: "PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_LIST_REQ",
		887: "PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_LIST_RES",
		990: "PROTO_HELLO_EVENT",
	}
	ProtoCSPayloadType_value = map[string]int32{
		"PROTO_SPOT_EVENT":                                         3,
		"PROTO_ORDER_ERROR_EVENT":                                  138,
		"PROTO_MANAGER_BY_ID_REQ":                                  226,
		"PROTO_MANAGER_BY_ID_RES":                                  227,
		"PROTO_MANAGER_LIGHT_TRADER_LIST_REQ":                      228,
		"PROTO_MANAGER_LIGHT_TRADER_LIST_RES":                      229,
		"PROTO_EXECUTION_EVENT":                                    300,
		"PROTO_MANAGER_AUTH_REQ":                                   301,
		"PROTO_MANAGER_AUTH_RES":                                   302,
		"PROTO_CHANGE_TRADER_PASSWORD_REQ":                         303,
		"PROTO_CHANGE_TRADER_PASSWORD_RES":                         304,
		"PROTO_CHANGE_MANAGER_PASSWORD_REQ":                        305,
		"PROTO_CHANGE_MANAGER_PASSWORD_RES":                        306,
		"PROTO_CHECK_TRADER_PASSWORD_REQ":                          307,
		"PROTO_CHECK_TRADER_PASSWORD_RES":                          308,
		"PROTO_CHECK_MANAGER_PASSWORD_REQ":                         309,
		"PROTO_CHECK_MANAGER_PASSWORD_RES":                         310,
		"PROTO_SERVER_TIME_REQ":                                    313,
		"PROTO_SERVER_TIME_RES":                                    314,
		"PROTO_ORDER_DETAILS_REQ":                                  321,
		"PROTO_ORDER_DETAILS_RES":                                  322,
		"PROTO_POSITION_MARGIN_CHANGED_EVENT":                      335,
		"PROTO_RECALCULATE_ACCOUNT_MARGIN_REQ":                     336,
		"PROTO_RECALCULATE_ACCOUNT_MARGIN_RES":                     337,
		"PROTO_RECALCULATE_SYMBOL_MARGIN_REQ":                      338,
		"PROTO_RECALCULATE_SYMBOL_MARGIN_RES":                      339,
		"PROTO_RECALCULATE_DYNAMIC_LEVERAGE_REQ":                   347,
		"PROTO_RECALCULATE_DYNAMIC_LEVERAGE_RES":                   348,
		"PROTO_MANAGER_BALANCE_TRANSFER_REQ":                       355,
		"PROTO_MANAGER_BALANCE_TRANSFER_RES":                       356,
		"PROTO_CRUD_SCHEDULE_PROFILE_REQ":                          360,
		"PROTO_CRUD_SCHEDULE_PROFILE_RES":                          361,
		"PROTO_SCHEDULE_PROFILE_CHANGED_EVENT":                     362,
		"PROTO_SCHEDULE_PROFILE_LIST_REQ":                          363,
		"PROTO_SCHEDULE_PROFILE_LIST_RES":                          364,
		"PROTO_CRUD_COMMISSION_PROFILE_REQ":                        365,
		"PROTO_CRUD_COMMISSION_PROFILE_RES":                        366,
		"PROTO_COMMISSION_PROFILE_CHANGED_EVENT":                   367,
		"PROTO_COMMISSION_PROFILE_LIST_REQ":                        368,
		"PROTO_COMMISSION_PROFILE_LIST_RES":                        369,
		"PROTO_CRUD_VOLUME_PROFILE_REQ":                            375,
		"PROTO_CRUD_VOLUME_PROFILE_RES":                            376,
		"PROTO_VOLUME_PROFILE_CHANGED_EVENT":                       377,
		"PROTO_VOLUME_PROFILE_LIST_REQ":                            378,
		"PROTO_VOLUME_PROFILE_LIST_RES":                            379,
		"PROTO_CRUD_EXECUTION_PROFILE_REQ":                         380,
		"PROTO_CRUD_EXECUTION_PROFILE_RES":                         381,
		"PROTO_EXECUTION_PROFILE_CHANGED_EVENT":                    382,
		"PROTO_EXECUTION_PROFILE_LIST_REQ":                         383,
		"PROTO_EXECUTION_PROFILE_LIST_RES":                         384,
		"PROTO_CRUD_PROTECTION_PROFILE_REQ":                        385,
		"PROTO_CRUD_PROTECTION_PROFILE_RES":                        386,
		"PROTO_PROTECTION_PROFILE_CHANGED_EVENT":                   387,
		"PROTO_PROTECTION_PROFILE_LIST_REQ":                        388,
		"PROTO_PROTECTION_PROFILE_LIST_RES":                        389,
		"PROTO_CRUD_SWAP_FREE_PROFILE_REQ":                         390,
		"PROTO_CRUD_SWAP_FREE_PROFILE_RES":                         391,
		"PROTO_SWAP_FREE_PROFILE_CHANGED_EVENT":                    392,
		"PROTO_SWAP_FREE_PROFILE_LIST_REQ":                         393,
		"PROTO_SWAP_FREE_PROFILE_LIST_RES":                         394,
		"PROTO_CRUD_HOLIDAY_REQ":                                   395,
		"PROTO_CRUD_HOLIDAY_RES":                                   396,
		"PROTO_HOLIDAY_CHANGED_EVENT":                              397,
		"PROTO_HOLIDAY_LIST_REQ":                                   398,
		"PROTO_HOLIDAY_LIST_RES":                                   399,
		"PROTO_CRUD_HOLIDAY_PROFILE_REQ":                           400,
		"PROTO_CRUD_HOLIDAY_PROFILE_RES":                           401,
		"PROTO_HOLIDAY_PROFILE_CHANGED_EVENT":                      402,
		"PROTO_TRADER_LIST_REQ":                                    403,
		"PROTO_TRADER_LIST_RES":                                    404,
		"PROTO_POSITION_LIST_REQ":                                  407,
		"PROTO_POSITION_LIST_RES":                                  408,
		"PROTO_PENDING_ORDER_LIST_REQ":                             409,
		"PROTO_PENDING_ORDER_LIST_RES":                             410,
		"PROTO_MANAGER_LIST_REQ":                                   411,
		"PROTO_MANAGER_LIST_RES":                                   412,
		"PROTO_BALANCE_HISTORY_LIST_REQ":                           417,
		"PROTO_BALANCE_HISTORY_LIST_RES":                           418,
		"PROTO_EXPOSURE_SYMBOL_LIST_REQ":                           419,
		"PROTO_EXPOSURE_SYMBOL_LIST_RES":                           420,
		"PROTO_SERVER_SETTINGS_REQ":                                423,
		"PROTO_SERVER_SETTINGS_RES":                                424,
		"PROTO_PRICE_STREAM_LIST_REQ":                              427,
		"PROTO_PRICE_STREAM_LIST_RES":                              428,
		"PROTO_LIQUIDITY_FEED_LIST_REQ":                            429,
		"PROTO_LIQUIDITY_FEED_LIST_RES":                            430,
		"PROTO_MANAGER_DEAL_LIST_REQ":                              431,
		"PROTO_MANAGER_DEAL_LIST_RES":                              432,
		"PROTO_COUNTRY_LIST_REQ":                                   435,
		"PROTO_COUNTRY_LIST_RES":                                   436,
		"PROTO_ASSET_CLASS_LIST_REQ":                               437,
		"PROTO_ASSET_CLASS_LIST_RES":                               438,
		"PROTO_ORDER_MANAGER_LIST_REQ":                             443,
		"PROTO_ORDER_MANAGER_LIST_RES":                             444,
		"PROTO_HOLIDAY_PROFILE_LIST_REQ":                           447,
		"PROTO_HOLIDAY_PROFILE_LIST_RES":                           448,
		"PROTO_MANAGER_DEAL_LIST_BY_POSITION_ID_REQ":               459,
		"PROTO_MANAGER_DEAL_LIST_BY_POSITION_ID_RES":               460,
		"PROTO_MANAGER__ORDER_LIST_BY_POSITION_ID_REQ":             461,
		"PROTO_MANAGER__ORDER_LIST_BY_POSITION_ID_RES":             462,
		"PROTO_SYMBOL_CATEGORY_LIST_REQ":                           463,
		"PROTO_SYMBOL_CATEGORY_LIST_RES":                           464,
		"PROTO_ASSET_LIST_REQ":                                     465,
		"PROTO_ASSET_LIST_RES":                                     466,
		"PROTO_MANAGER_SYMBOL_LIST_REQ":                            467,
		"PROTO_MANAGER_SYMBOL_LIST_RES":                            468,
		"PROTO_DYNAMIC_LEVERAGE_LIST_REQ":                          469,
		"PROTO_DYNAMIC_LEVERAGE_LIST_RES":                          470,
		"PROTO_GSL_SCHEDULE_LIST_REQ":                              471,
		"PROTO_GSL_SCHEDULE_LIST_RES":                              472,
		"PROTO_LIGHT_GROUP_LIST_REQ":                               473,
		"PROTO_LIGHT_GROUP_LIST_RES":                               474,
		"PROTO_GROUP_BY_ID_REQ":                                    475,
		"PROTO_GROUP_BY_ID_RES":                                    476,
		"PROTO_LIQUIDITY_FEED_SYMBOL_LIST_REQ":                     489,
		"PROTO_LIQUIDITY_FEED_SYMBOL_LIST_RES":                     490,
		"PROTO_LIGHT_SWAP_AND_DIVIDEND_PROFILE_LIST_REQ":           493,
		"PROTO_LIGHT_SWAP_AND_DIVIDEND_PROFILE_LIST_RES":           494,
		"PROTO_SWAP_AND_DIVIDEND_PROFILE_BY_ID_REQ":                495,
		"PROTO_SWAP_AND_DIVIDEND_PROFILE_BY_ID_RES":                496,
		"PROTO_CRUD_TRADER_REQ":                                    501,
		"PROTO_CRUD_TRADER_RES":                                    502,
		"PROTO_TRADER_CHANGED_EVENT":                               503,
		"PROTO_CRUD_GROUP_REQ":                                     504,
		"PROTO_CRUD_GROUP_RES":                                     505,
		"PROTO_GROUP_CHANGED_EVENT":                                506,
		"PROTO_CRUD_SYMBOL_REQ":                                    507,
		"PROTO_CRUD_SYMBOL_RES":                                    508,
		"PROTO_CRUD_MANAGER_REQ":                                   510,
		"PROTO_CRUD_MANAGER_RES":                                   511,
		"PROTO_MANAGER_CHANGED_EVENT":                              512,
		"PROTO_CRUD_SWAP_AND_DIVIDEND_PROFILE_REQ":                 513,
		"PROTO_CRUD_SWAP_AND_DIVIDEND_PROFILE_RES":                 514,
		"PROTO_SWAP_AND_DIVIDEND_PROFILE_CHANGED_EVENT":            515,
		"PROTO_UPDATE_SERVER_SETTINGS_REQ":                         516,
		"PROTO_UPDATE_SERVER_SETTINGS_RES":                         517,
		"PROTO_SERVER_SETTINGS_CHANGED_EVENT":                      518,
		"PROTO_CHANGE_BALANCE_REQ":                                 519,
		"PROTO_CHANGE_BALANCE_RES":                                 520,
		"PROTO_PRICE_STREAM_CREATE_REQ":                            527,
		"PROTO_PRICE_STREAM_CREATE_RES":                            528,
		"PROTO_PRICE_STREAM_DELETE_REQ":                            529,
		"PROTO_PRICE_STREAM_DELETE_RES":                            530,
		"PROTO_PRICE_STREAM_UPDATE_REQ":                            531,
		"PROTO_PRICE_STREAM_UPDATE_RES":                            532,
		"PROTO_PRICE_STREAM_CHANGED_EVENT":                         533,
		"PROTO_CRUD_ASSET_REQ":                                     538,
		"PROTO_CRUD_ASSET_RES":                                     539,
		"PROTO_ASSET_CHANGED_EVENT":                                540,
		"PROTO_CRUD_LIQUIDITY_FEED_SYMBOL_REQ":                     545,
		"PROTO_CRUD_LIQUIDITY_FEED_SYMBOL_RES":                     546,
		"PROTO_LIQUIDITY_FEED_SYMBOL_CHANGED_EVENT":                547,
		"PROTO_MANAGER_SYMBOL_CHANGED_EVENT":                       558,
		"PROTO_CRUD_DYNAMIC_LEVERAGE_REQ":                          559,
		"PROTO_CRUD_DYNAMIC_LEVERAGE_RES":                          560,
		"PROTO_DYNAMIC_LEVERAGE_CHANGED_EVENT":                     561,
		"PROTO_TRADER_PERMISSION_LOSE_EVENT":                       562,
		"PROTO_CRUD_GSL_SCHEDULE_REQ":                              563,
		"PROTO_CRUD_GSL_SCHEDULE_RES":                              564,
		"PROTO_GSL_SCHEDULE_CHANGED_EVENT":                         565,
		"PROTO_CREATE_SYMBOL_REQ":                                  571,
		"PROTO_CREATE_SYMBOL_RES":                                  572,
		"PROTO_SYMBOL_ARCHIVED_EVENT":                              575,
		"PROTO_SYMBOL_RESTORED_EVENT":                              580,
		"PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_REQ":                581,
		"PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_RES":                582,
		"PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_CHANGED_EVENT":      583,
		"PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_LIST_REQ":           584,
		"PROTO_CRUD_TRADE_NOTIFICATION_PROFILE_LIST_RES":           585,
		"PROTO_SUBSCRIBE_SPOT_QUOTES_REQ":                          601,
		"PROTO_SUBSCRIBE_SPOT_QUOTES_RES":                          602,
		"PROTO_UNSUBSCRIBE_SPOT_QUOTES_REQ":                        608,
		"PROTO_UNSUBSCRIBE_SPOT_QUOTES_RES":                        609,
		"PROTO_TRADER_BY_ID_REQ":                                   703,
		"PROTO_TRADER_BY_ID_RES":                                   704,
		"PROTO_MANAGER_GET_DEAL_REQ":                               709,
		"PROTO_MANAGER_GET_DEAL_RES":                               711,
		"PROTO_POSITION_DETAILS_REQ":                               717,
		"PROTO_POSITION_DETAILS_RES":                               718,
		"PROTO_MANAGER_CLOSED_POSITION_LIST_REQ":                   720,
		"PROTO_MANAGER_CLOSED_POSITION_LIST_RES":                   721,
		"PROTO_TRADER_LOGON_EVENT":                                 730,
		"PROTO_TRADER_LOGOUT_EVENT":                                731,
		"PROTO_MANAGER_NEW_ORDER_REQ":                              738,
		"PROTO_MANAGER_AMEND_ORDER_REQ":                            739,
		"PROTO_MANAGER_CANCEL_ORDER_REQ":                           740,
		"PROTO_MANAGER_AMEND_POSITION_REQ":                         741,
		"PROTO_MANAGER_CLOSE_POSITION_REQ":                         742,
		"PROTO_POSITION_DETAILS_LITE_REQ":                          754,
		"PROTO_POSITION_DETAILS_LITE_RES":                          755,
		"PROTO_MANAGER_CHANGE_BONUS_REQ":                           780,
		"PROTO_MANAGER_CHANGE_BONUS_RES":                           781,
		"PROTO_BONUS_HISTORY_LIST_REQ":                             786,
		"PROTO_BONUS_HISTORY_LIST_RES":                             787,
		"PROTO_DEALING_SETTINGS_REQ":                               816,
		"PROTO_DEALING_SETTINGS_RES":                               817,
		"PROTO_UPDATE_DEALING_SETTINGS_REQ":                        818,
		"PROTO_UPDATE_DEALING_SETTINGS_RES":                        819,
		"PROTO_NEW_MANUAL_DEAL_EVENT":                              820,
		"PROTO_MANUAL_DEAL_LIST_REQ":                               821,
		"PROTO_MANUAL_DEAL_LIST_RES":                               822,
		"PROTO_MANUAL_DEAL_CLAIM_REQ":                              823,
		"PROTO_MANUAL_DEAL_CLAIM_RES":                              824,
		"PROTO_MANUAL_DEAL_CLAIMED_EVENT":                          825,
		"PROTO_MANUAL_DEAL_UNCLAIM_REQ":                            826,
		"PROTO_MANUAL_DEAL_UNCLAIM_RES":                            827,
		"PROTO_MANUAL_DEAL_UNCLAIMED_EVENT":                        828,
		"PROTO_MANUAL_DEAL_RESET_REQ":                              829,
		"PROTO_MANUAL_DEAL_RESET_RES":                              830,
		"PROTO_MANUAL_DEAL_REJECT_REQ":                             831,
		"PROTO_MANUAL_DEAL_REJECT_RES":                             832,
		"PROTO_MANUAL_DEAL_EXECUTE_REQ":                            833,
		"PROTO_MANUAL_DEAL_EXECUTE_RES":                            834,
		"PROTO_MANUAL_DEAL_PROCESSED_EVENT":                        835,
		"PROTO_DEALER_NEW_ORDER_REQ":                               836,
		"PROTO_DEALER_AMEND_ORDER_REQ":                             837,
		"PROTO_DEALER_CANCEL_ORDER_REQ":                            838,
		"PROTO_DEALER_AMEND_POSITION_REQ":                          839,
		"PROTO_DEALER_CLOSE_POSITION_REQ":                          840,
		"PROTO_DEALING_SETTINGS_UPDATED_EVENT":                     843,
		"PROTO_ASSET_CLASS_CHANGED_EVENT":                          846,
		"PROTO_ASSET_CLASS_DELETED_EVENT":                          847,
		"PROTO_SYMBOL_CATEGORY_CHANGED_EVENT":                      848,
		"PROTO_SYMBOL_CATEGORY_DELETED_EVENT":                      849,
		"PROTO_SYMBOLS_FOR_CONVERSION_REQ":                         864,
		"PROTO_SYMBOLS_FOR_CONVERSION_RES":                         865,
		"PROTO_FORCE_CLOSE_POSITION_REQ":                           870,
		"PROTO_FORCE_OPEN_POSITION_REQ":                            871,
		"PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_REQ":           883,
		"PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_RES":           884,
		"PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_CHANGED_EVENT": 885,
		"PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_LIST_REQ":      886,
		"PROTO_CRUD_MAX_AUTO_EXECUTION_SIZE_PROFILE_LIST_RES":      887,
		"PROTO_HELLO_EVENT":                                        990,
	}
)

func (x ProtoCSPayloadType) Enum() *ProtoCSPayloadType {
	p := new(ProtoCSPayloadType)
	*p = x
	return p
}

func (x ProtoCSPayloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoCSPayloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[0].Descriptor()
}

func (ProtoCSPayloadType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[0]
}

func (x ProtoCSPayloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoCSPayloadType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoCSPayloadType(num)
	return nil
}

// Deprecated: Use ProtoCSPayloadType.Descriptor instead.
func (ProtoCSPayloadType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{0}
}

// Enum for error codes for server. Note that there are also some error codes in common messages
type ProtoCSErrorCode int32

const (
	ProtoCSErrorCode_NOT_ENOUGH_MONEY                  ProtoCSErrorCode = 1
	ProtoCSErrorCode_NOT_ENOUGH_RIGHTS                 ProtoCSErrorCode = 2
	ProtoCSErrorCode_AUTHENTICATION_FAILED             ProtoCSErrorCode = 3
	ProtoCSErrorCode_POSITION_NOT_FOUND                ProtoCSErrorCode = 4
	ProtoCSErrorCode_POSITION_LOCKED                   ProtoCSErrorCode = 5
	ProtoCSErrorCode_CHANGE_BALANCE_BAD_AMOUNT         ProtoCSErrorCode = 6
	ProtoCSErrorCode_NO_QUOTES                         ProtoCSErrorCode = 7
	ProtoCSErrorCode_TRADING_DISABLED                  ProtoCSErrorCode = 8
	ProtoCSErrorCode_TRADING_NOT_ALLOWED               ProtoCSErrorCode = 9
	ProtoCSErrorCode_TRADING_BAD_VOLUME                ProtoCSErrorCode = 10
	ProtoCSErrorCode_TRADER_NOT_FOUND                  ProtoCSErrorCode = 11
	ProtoCSErrorCode_TRADER_GROUP_NOT_FOUND            ProtoCSErrorCode = 12
	ProtoCSErrorCode_RECONCILIATION_IN_PROGRESS        ProtoCSErrorCode = 13
	ProtoCSErrorCode_ALREADY_LOGGED_IN                 ProtoCSErrorCode = 14
	ProtoCSErrorCode_TOO_MANY_POSITIONS                ProtoCSErrorCode = 16
	ProtoCSErrorCode_ORDER_NOT_FOUND                   ProtoCSErrorCode = 17
	ProtoCSErrorCode_TRADING_BAD_STOPS                 ProtoCSErrorCode = 18
	ProtoCSErrorCode_ALREADY_DELETED                   ProtoCSErrorCode = 19
	ProtoCSErrorCode_WRONG_LEVERAGE                    ProtoCSErrorCode = 20
	ProtoCSErrorCode_TRADING_BAD_EXPIRATION_DATE       ProtoCSErrorCode = 21
	ProtoCSErrorCode_ALREADY_SUBSCRIBED                ProtoCSErrorCode = 22
	ProtoCSErrorCode_REQUEST_FREQUENCY_EXCEEDED        ProtoCSErrorCode = 23
	ProtoCSErrorCode_POSITION_NOT_OPEN                 ProtoCSErrorCode = 24
	ProtoCSErrorCode_WRONG_TIME_SEQUENCE               ProtoCSErrorCode = 25
	ProtoCSErrorCode_FORBID_WITH_TRADING_ENABLED       ProtoCSErrorCode = 26
	ProtoCSErrorCode_INCORRECT_POSITION_ID             ProtoCSErrorCode = 27
	ProtoCSErrorCode_TRADER_HAS_POSITIONS              ProtoCSErrorCode = 28
	ProtoCSErrorCode_UNKNOWN_LIQIDITY_FEED             ProtoCSErrorCode = 29
	ProtoCSErrorCode_ASSET_CLASS_ALREADY_EXIST         ProtoCSErrorCode = 30
	ProtoCSErrorCode_ASSET_CLASS_IS_NOT_EMPTY          ProtoCSErrorCode = 31
	ProtoCSErrorCode_TRADING_BAD_PRICES                ProtoCSErrorCode = 32
	ProtoCSErrorCode_UNABLE_TO_FORWARD_COMMAND         ProtoCSErrorCode = 33
	ProtoCSErrorCode_UNKNOWN_SYMBOL                    ProtoCSErrorCode = 34
	ProtoCSErrorCode_INCORRECT_BOUNDARIES              ProtoCSErrorCode = 35
	ProtoCSErrorCode_SYMBOL_NOT_FOUND                  ProtoCSErrorCode = 36
	ProtoCSErrorCode_DEAL_NOT_FOUND                    ProtoCSErrorCode = 37
	ProtoCSErrorCode_POSITION_CONCURRENT_CHANGE        ProtoCSErrorCode = 38
	ProtoCSErrorCode_NOT_INTRODUCING_BROKER            ProtoCSErrorCode = 39
	ProtoCSErrorCode_INTRODUCING_BROKER_CYCLE          ProtoCSErrorCode = 40
	ProtoCSErrorCode_UNABLE_TO_CANCEL_ORDER            ProtoCSErrorCode = 41
	ProtoCSErrorCode_UNABLE_TO_AMEND_ORDER             ProtoCSErrorCode = 42
	ProtoCSErrorCode_UNKNOWN_DEPOSIT_CURRENCY          ProtoCSErrorCode = 43
	ProtoCSErrorCode_DEPOSIT_CURRENCY_NOT_ALLOWED      ProtoCSErrorCode = 44
	ProtoCSErrorCode_SHORT_SELLING_NOT_ALLOWED         ProtoCSErrorCode = 45
	ProtoCSErrorCode_CHANGE_BONUS_BAD_AMOUNT           ProtoCSErrorCode = 46
	ProtoCSErrorCode_SERVER_IS_UNDER_MAINTENANCE       ProtoCSErrorCode = 47
	ProtoCSErrorCode_TRADING_BAD_STAKE                 ProtoCSErrorCode = 48
	ProtoCSErrorCode_GUI_SETTINGS_NOT_FOUND            ProtoCSErrorCode = 49
	ProtoCSErrorCode_PROTECTION_IS_TOO_CLOSE_TO_MARKET ProtoCSErrorCode = 50
	ProtoCSErrorCode_ORDER_TYPE_NOT_ALLOWED            ProtoCSErrorCode = 51
	ProtoCSErrorCode_INVALID_DATA                      ProtoCSErrorCode = 52
	ProtoCSErrorCode_NO_SUCH_LOGIN                     ProtoCSErrorCode = 53
	ProtoCSErrorCode_MAX_EXPOSURE_REACHED              ProtoCSErrorCode = 54
	ProtoCSErrorCode_PENDING_EXECUTION                 ProtoCSErrorCode = 55
	ProtoCSErrorCode_FORBID_WITH_SUBSCRIPTION_ENABLED  ProtoCSErrorCode = 56
	ProtoCSErrorCode_NOT_SUBSCRIBED_TO_SPOTS           ProtoCSErrorCode = 57
	ProtoCSErrorCode_DAILY_EQUITY_NOT_FOUND            ProtoCSErrorCode = 58
	ProtoCSErrorCode_STRATEGY_NOT_FOUND                ProtoCSErrorCode = 59
	ProtoCSErrorCode_SYMBOL_NAME_ALREADY_EXIST         ProtoCSErrorCode = 60
	ProtoCSErrorCode_HIDDEN_HISTORY                    ProtoCSErrorCode = 61
	ProtoCSErrorCode_OPERATION_NOT_ALLOWED             ProtoCSErrorCode = 62
	ProtoCSErrorCode_CHANNEL_IS_BLOCKED                ProtoCSErrorCode = 63
	ProtoCSErrorCode_NOT_SUBSCRIBED_TO_DEPTHS          ProtoCSErrorCode = 64
	ProtoCSErrorCode_SQA_NOT_ACTIVATED                 ProtoCSErrorCode = 65
	ProtoCSErrorCode_SQA_ALREADY_ACTIVATED             ProtoCSErrorCode = 66
	ProtoCSErrorCode_CONNECTIONS_LIMIT_EXCEEDED        ProtoCSErrorCode = 67
	ProtoCSErrorCode_WORSE_GSL_NOT_ALLOWED             ProtoCSErrorCode = 68
	ProtoCSErrorCode_SYMBOL_HAS_HOLIDAY                ProtoCSErrorCode = 69
	ProtoCSErrorCode_RESERVED_3                        ProtoCSErrorCode = 70
	ProtoCSErrorCode_RESERVED_4                        ProtoCSErrorCode = 71
	ProtoCSErrorCode_RESERVED_5                        ProtoCSErrorCode = 72
)

// Enum value maps for ProtoCSErrorCode.
var (
	ProtoCSErrorCode_name = map[int32]string{
		1:  "NOT_ENOUGH_MONEY",
		2:  "NOT_ENOUGH_RIGHTS",
		3:  "AUTHENTICATION_FAILED",
		4:  "POSITION_NOT_FOUND",
		5:  "POSITION_LOCKED",
		6:  "CHANGE_BALANCE_BAD_AMOUNT",
		7:  "NO_QUOTES",
		8:  "TRADING_DISABLED",
		9:  "TRADING_NOT_ALLOWED",
		10: "TRADING_BAD_VOLUME",
		11: "TRADER_NOT_FOUND",
		12: "TRADER_GROUP_NOT_FOUND",
		13: "RECONCILIATION_IN_PROGRESS",
		14: "ALREADY_LOGGED_IN",
		16: "TOO_MANY_POSITIONS",
		17: "ORDER_NOT_FOUND",
		18: "TRADING_BAD_STOPS",
		19: "ALREADY_DELETED",
		20: "WRONG_LEVERAGE",
		21: "TRADING_BAD_EXPIRATION_DATE",
		22: "ALREADY_SUBSCRIBED",
		23: "REQUEST_FREQUENCY_EXCEEDED",
		24: "POSITION_NOT_OPEN",
		25: "WRONG_TIME_SEQUENCE",
		26: "FORBID_WITH_TRADING_ENABLED",
		27: "INCORRECT_POSITION_ID",
		28: "TRADER_HAS_POSITIONS",
		29: "UNKNOWN_LIQIDITY_FEED",
		30: "ASSET_CLASS_ALREADY_EXIST",
		31: "ASSET_CLASS_IS_NOT_EMPTY",
		32: "TRADING_BAD_PRICES",
		33: "UNABLE_TO_FORWARD_COMMAND",
		34: "UNKNOWN_SYMBOL",
		35: "INCORRECT_BOUNDARIES",
		36: "SYMBOL_NOT_FOUND",
		37: "DEAL_NOT_FOUND",
		38: "POSITION_CONCURRENT_CHANGE",
		39: "NOT_INTRODUCING_BROKER",
		40: "INTRODUCING_BROKER_CYCLE",
		41: "UNABLE_TO_CANCEL_ORDER",
		42: "UNABLE_TO_AMEND_ORDER",
		43: "UNKNOWN_DEPOSIT_CURRENCY",
		44: "DEPOSIT_CURRENCY_NOT_ALLOWED",
		45: "SHORT_SELLING_NOT_ALLOWED",
		46: "CHANGE_BONUS_BAD_AMOUNT",
		47: "SERVER_IS_UNDER_MAINTENANCE",
		48: "TRADING_BAD_STAKE",
		49: "GUI_SETTINGS_NOT_FOUND",
		50: "PROTECTION_IS_TOO_CLOSE_TO_MARKET",
		51: "ORDER_TYPE_NOT_ALLOWED",
		52: "INVALID_DATA",
		53: "NO_SUCH_LOGIN",
		54: "MAX_EXPOSURE_REACHED",
		55: "PENDING_EXECUTION",
		56: "FORBID_WITH_SUBSCRIPTION_ENABLED",
		57: "NOT_SUBSCRIBED_TO_SPOTS",
		58: "DAILY_EQUITY_NOT_FOUND",
		59: "STRATEGY_NOT_FOUND",
		60: "SYMBOL_NAME_ALREADY_EXIST",
		61: "HIDDEN_HISTORY",
		62: "OPERATION_NOT_ALLOWED",
		63: "CHANNEL_IS_BLOCKED",
		64: "NOT_SUBSCRIBED_TO_DEPTHS",
		65: "SQA_NOT_ACTIVATED",
		66: "SQA_ALREADY_ACTIVATED",
		67: "CONNECTIONS_LIMIT_EXCEEDED",
		68: "WORSE_GSL_NOT_ALLOWED",
		69: "SYMBOL_HAS_HOLIDAY",
		70: "RESERVED_3",
		71: "RESERVED_4",
		72: "RESERVED_5",
	}
	ProtoCSErrorCode_value = map[string]int32{
		"NOT_ENOUGH_MONEY":                  1,
		"NOT_ENOUGH_RIGHTS":                 2,
		"AUTHENTICATION_FAILED":             3,
		"POSITION_NOT_FOUND":                4,
		"POSITION_LOCKED":                   5,
		"CHANGE_BALANCE_BAD_AMOUNT":         6,
		"NO_QUOTES":                         7,
		"TRADING_DISABLED":                  8,
		"TRADING_NOT_ALLOWED":               9,
		"TRADING_BAD_VOLUME":                10,
		"TRADER_NOT_FOUND":                  11,
		"TRADER_GROUP_NOT_FOUND":            12,
		"RECONCILIATION_IN_PROGRESS":        13,
		"ALREADY_LOGGED_IN":                 14,
		"TOO_MANY_POSITIONS":                16,
		"ORDER_NOT_FOUND":                   17,
		"TRADING_BAD_STOPS":                 18,
		"ALREADY_DELETED":                   19,
		"WRONG_LEVERAGE":                    20,
		"TRADING_BAD_EXPIRATION_DATE":       21,
		"ALREADY_SUBSCRIBED":                22,
		"REQUEST_FREQUENCY_EXCEEDED":        23,
		"POSITION_NOT_OPEN":                 24,
		"WRONG_TIME_SEQUENCE":               25,
		"FORBID_WITH_TRADING_ENABLED":       26,
		"INCORRECT_POSITION_ID":             27,
		"TRADER_HAS_POSITIONS":              28,
		"UNKNOWN_LIQIDITY_FEED":             29,
		"ASSET_CLASS_ALREADY_EXIST":         30,
		"ASSET_CLASS_IS_NOT_EMPTY":          31,
		"TRADING_BAD_PRICES":                32,
		"UNABLE_TO_FORWARD_COMMAND":         33,
		"UNKNOWN_SYMBOL":                    34,
		"INCORRECT_BOUNDARIES":              35,
		"SYMBOL_NOT_FOUND":                  36,
		"DEAL_NOT_FOUND":                    37,
		"POSITION_CONCURRENT_CHANGE":        38,
		"NOT_INTRODUCING_BROKER":            39,
		"INTRODUCING_BROKER_CYCLE":          40,
		"UNABLE_TO_CANCEL_ORDER":            41,
		"UNABLE_TO_AMEND_ORDER":             42,
		"UNKNOWN_DEPOSIT_CURRENCY":          43,
		"DEPOSIT_CURRENCY_NOT_ALLOWED":      44,
		"SHORT_SELLING_NOT_ALLOWED":         45,
		"CHANGE_BONUS_BAD_AMOUNT":           46,
		"SERVER_IS_UNDER_MAINTENANCE":       47,
		"TRADING_BAD_STAKE":                 48,
		"GUI_SETTINGS_NOT_FOUND":            49,
		"PROTECTION_IS_TOO_CLOSE_TO_MARKET": 50,
		"ORDER_TYPE_NOT_ALLOWED":            51,
		"INVALID_DATA":                      52,
		"NO_SUCH_LOGIN":                     53,
		"MAX_EXPOSURE_REACHED":              54,
		"PENDING_EXECUTION":                 55,
		"FORBID_WITH_SUBSCRIPTION_ENABLED":  56,
		"NOT_SUBSCRIBED_TO_SPOTS":           57,
		"DAILY_EQUITY_NOT_FOUND":            58,
		"STRATEGY_NOT_FOUND":                59,
		"SYMBOL_NAME_ALREADY_EXIST":         60,
		"HIDDEN_HISTORY":                    61,
		"OPERATION_NOT_ALLOWED":             62,
		"CHANNEL_IS_BLOCKED":                63,
		"NOT_SUBSCRIBED_TO_DEPTHS":          64,
		"SQA_NOT_ACTIVATED":                 65,
		"SQA_ALREADY_ACTIVATED":             66,
		"CONNECTIONS_LIMIT_EXCEEDED":        67,
		"WORSE_GSL_NOT_ALLOWED":             68,
		"SYMBOL_HAS_HOLIDAY":                69,
		"RESERVED_3":                        70,
		"RESERVED_4":                        71,
		"RESERVED_5":                        72,
	}
)

func (x ProtoCSErrorCode) Enum() *ProtoCSErrorCode {
	p := new(ProtoCSErrorCode)
	*p = x
	return p
}

func (x ProtoCSErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoCSErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[1].Descriptor()
}

func (ProtoCSErrorCode) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[1]
}

func (x ProtoCSErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoCSErrorCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoCSErrorCode(num)
	return nil
}

// Deprecated: Use ProtoCSErrorCode.Descriptor instead.
func (ProtoCSErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{1}
}

// Enum type for request result
type ProtoResultCode int32

const (
	ProtoResultCode_RET_OK                               ProtoResultCode = 0
	ProtoResultCode_RET_OK_NONE                          ProtoResultCode = 1
	ProtoResultCode_RET_ERROR                            ProtoResultCode = 2
	ProtoResultCode_RET_INVALID_DATA                     ProtoResultCode = 3
	ProtoResultCode_RET_TECH_PROBLEM                     ProtoResultCode = 4
	ProtoResultCode_RET_OLD_VERSION                      ProtoResultCode = 5
	ProtoResultCode_RET_NO_CONNECT                       ProtoResultCode = 6
	ProtoResultCode_RET_NOT_ENOUGH_RIGHTS                ProtoResultCode = 7
	ProtoResultCode_RET_TOO_FREQUENT                     ProtoResultCode = 8
	ProtoResultCode_RET_MALFUNCTION                      ProtoResultCode = 9
	ProtoResultCode_RET_GENERATE_KEY                     ProtoResultCode = 10
	ProtoResultCode_RET_SECURITY_SESSION                 ProtoResultCode = 11
	ProtoResultCode_RET_NO_SUCH_LOGIN                    ProtoResultCode = 12
	ProtoResultCode_RET_ACCOUNT_DISABLED                 ProtoResultCode = 64
	ProtoResultCode_RET_BAD_ACCOUNT_INFO                 ProtoResultCode = 65
	ProtoResultCode_RET_PUBLIC_KEY_MISSING               ProtoResultCode = 66
	ProtoResultCode_RET_TRADE_TIMEOUT                    ProtoResultCode = 128
	ProtoResultCode_RET_TRADE_BAD_PRICES                 ProtoResultCode = 129
	ProtoResultCode_RET_TRADE_BAD_STOPS                  ProtoResultCode = 130
	ProtoResultCode_RET_TRADE_BAD_VOLUME                 ProtoResultCode = 131
	ProtoResultCode_RET_TRADE_MARKET_CLOSED              ProtoResultCode = 132
	ProtoResultCode_RET_TRADE_DISABLE                    ProtoResultCode = 133
	ProtoResultCode_RET_TRADE_NO_MONEY                   ProtoResultCode = 134
	ProtoResultCode_RET_TRADE_PRICE_CHANGED              ProtoResultCode = 135
	ProtoResultCode_RET_TRADE_BROKER_BUSY                ProtoResultCode = 136
	ProtoResultCode_RET_TRADE_REQUOTE                    ProtoResultCode = 137
	ProtoResultCode_RET_TRADE_ORDER_LOCKED               ProtoResultCode = 138
	ProtoResultCode_RET_TRADE_LONG_ONLY                  ProtoResultCode = 139
	ProtoResultCode_RET_TRADE_TOO_MANY_REQ               ProtoResultCode = 140
	ProtoResultCode_RET_TRADE_ACCEPTED                   ProtoResultCode = 141
	ProtoResultCode_RET_TRADE_PROCESS                    ProtoResultCode = 142
	ProtoResultCode_RET_TRADE_USER_CANCEL                ProtoResultCode = 143
	ProtoResultCode_RET_TRADE_MODIFY_DENIED              ProtoResultCode = 144
	ProtoResultCode_RET_TRADE_CONTEXT_BUSY               ProtoResultCode = 145
	ProtoResultCode_RET_TRADE_EXPIRATION_DENIED          ProtoResultCode = 146
	ProtoResultCode_RET_TRADE_TOO_MANY_ORDERS            ProtoResultCode = 147
	ProtoResultCode_RET_TRADE_HEDGE_PROHIBITED           ProtoResultCode = 148
	ProtoResultCode_RET_TRADE_MAX_EXPOSURE_REACHED       ProtoResultCode = 149
	ProtoResultCode_RET_PENDING_EXECUTION                ProtoResultCode = 150
	ProtoResultCode_RET_FORBID_WITH_SUBSCRIPTION_ENABLED ProtoResultCode = 151
	ProtoResultCode_RET_NOT_SUBSCRIBED_TO_SPOTS          ProtoResultCode = 152
	ProtoResultCode_RET_DAILY_EQUITY_NOT_FOUND           ProtoResultCode = 153
	ProtoResultCode_RET_STRATEGY_NOT_FOUND               ProtoResultCode = 154
	ProtoResultCode_RET_NOT_SUBSCRIBED_TO_DEPTHS         ProtoResultCode = 155
	ProtoResultCode_RET_RESERVED_1                       ProtoResultCode = 156
	ProtoResultCode_RET_RESERVED_2                       ProtoResultCode = 157
	ProtoResultCode_RET_RESERVED_3                       ProtoResultCode = 158
)

// Enum value maps for ProtoResultCode.
var (
	ProtoResultCode_name = map[int32]string{
		0:   "RET_OK",
		1:   "RET_OK_NONE",
		2:   "RET_ERROR",
		3:   "RET_INVALID_DATA",
		4:   "RET_TECH_PROBLEM",
		5:   "RET_OLD_VERSION",
		6:   "RET_NO_CONNECT",
		7:   "RET_NOT_ENOUGH_RIGHTS",
		8:   "RET_TOO_FREQUENT",
		9:   "RET_MALFUNCTION",
		10:  "RET_GENERATE_KEY",
		11:  "RET_SECURITY_SESSION",
		12:  "RET_NO_SUCH_LOGIN",
		64:  "RET_ACCOUNT_DISABLED",
		65:  "RET_BAD_ACCOUNT_INFO",
		66:  "RET_PUBLIC_KEY_MISSING",
		128: "RET_TRADE_TIMEOUT",
		129: "RET_TRADE_BAD_PRICES",
		130: "RET_TRADE_BAD_STOPS",
		131: "RET_TRADE_BAD_VOLUME",
		132: "RET_TRADE_MARKET_CLOSED",
		133: "RET_TRADE_DISABLE",
		134: "RET_TRADE_NO_MONEY",
		135: "RET_TRADE_PRICE_CHANGED",
		136: "RET_TRADE_BROKER_BUSY",
		137: "RET_TRADE_REQUOTE",
		138: "RET_TRADE_ORDER_LOCKED",
		139: "RET_TRADE_LONG_ONLY",
		140: "RET_TRADE_TOO_MANY_REQ",
		141: "RET_TRADE_ACCEPTED",
		142: "RET_TRADE_PROCESS",
		143: "RET_TRADE_USER_CANCEL",
		144: "RET_TRADE_MODIFY_DENIED",
		145: "RET_TRADE_CONTEXT_BUSY",
		146: "RET_TRADE_EXPIRATION_DENIED",
		147: "RET_TRADE_TOO_MANY_ORDERS",
		148: "RET_TRADE_HEDGE_PROHIBITED",
		149: "RET_TRADE_MAX_EXPOSURE_REACHED",
		150: "RET_PENDING_EXECUTION",
		151: "RET_FORBID_WITH_SUBSCRIPTION_ENABLED",
		152: "RET_NOT_SUBSCRIBED_TO_SPOTS",
		153: "RET_DAILY_EQUITY_NOT_FOUND",
		154: "RET_STRATEGY_NOT_FOUND",
		155: "RET_NOT_SUBSCRIBED_TO_DEPTHS",
		156: "RET_RESERVED_1",
		157: "RET_RESERVED_2",
		158: "RET_RESERVED_3",
	}
	ProtoResultCode_value = map[string]int32{
		"RET_OK":                               0,
		"RET_OK_NONE":                          1,
		"RET_ERROR":                            2,
		"RET_INVALID_DATA":                     3,
		"RET_TECH_PROBLEM":                     4,
		"RET_OLD_VERSION":                      5,
		"RET_NO_CONNECT":                       6,
		"RET_NOT_ENOUGH_RIGHTS":                7,
		"RET_TOO_FREQUENT":                     8,
		"RET_MALFUNCTION":                      9,
		"RET_GENERATE_KEY":                     10,
		"RET_SECURITY_SESSION":                 11,
		"RET_NO_SUCH_LOGIN":                    12,
		"RET_ACCOUNT_DISABLED":                 64,
		"RET_BAD_ACCOUNT_INFO":                 65,
		"RET_PUBLIC_KEY_MISSING":               66,
		"RET_TRADE_TIMEOUT":                    128,
		"RET_TRADE_BAD_PRICES":                 129,
		"RET_TRADE_BAD_STOPS":                  130,
		"RET_TRADE_BAD_VOLUME":                 131,
		"RET_TRADE_MARKET_CLOSED":              132,
		"RET_TRADE_DISABLE":                    133,
		"RET_TRADE_NO_MONEY":                   134,
		"RET_TRADE_PRICE_CHANGED":              135,
		"RET_TRADE_BROKER_BUSY":                136,
		"RET_TRADE_REQUOTE":                    137,
		"RET_TRADE_ORDER_LOCKED":               138,
		"RET_TRADE_LONG_ONLY":                  139,
		"RET_TRADE_TOO_MANY_REQ":               140,
		"RET_TRADE_ACCEPTED":                   141,
		"RET_TRADE_PROCESS":                    142,
		"RET_TRADE_USER_CANCEL":                143,
		"RET_TRADE_MODIFY_DENIED":              144,
		"RET_TRADE_CONTEXT_BUSY":               145,
		"RET_TRADE_EXPIRATION_DENIED":          146,
		"RET_TRADE_TOO_MANY_ORDERS":            147,
		"RET_TRADE_HEDGE_PROHIBITED":           148,
		"RET_TRADE_MAX_EXPOSURE_REACHED":       149,
		"RET_PENDING_EXECUTION":                150,
		"RET_FORBID_WITH_SUBSCRIPTION_ENABLED": 151,
		"RET_NOT_SUBSCRIBED_TO_SPOTS":          152,
		"RET_DAILY_EQUITY_NOT_FOUND":           153,
		"RET_STRATEGY_NOT_FOUND":               154,
		"RET_NOT_SUBSCRIBED_TO_DEPTHS":         155,
		"RET_RESERVED_1":                       156,
		"RET_RESERVED_2":                       157,
		"RET_RESERVED_3":                       158,
	}
)

func (x ProtoResultCode) Enum() *ProtoResultCode {
	p := new(ProtoResultCode)
	*p = x
	return p
}

func (x ProtoResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[2].Descriptor()
}

func (ProtoResultCode) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[2]
}

func (x ProtoResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoResultCode(num)
	return nil
}

// Deprecated: Use ProtoResultCode.Descriptor instead.
func (ProtoResultCode) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{2}
}

// Type of Order related action
type ProtoActionType int32

const (
	ProtoActionType_ACTION_CREATE_STOP_LOSS_TAKE_PROFIT ProtoActionType = 1
	ProtoActionType_ACTION_AMEND_STOP_LOSS_TAKE_PROFIT  ProtoActionType = 2
	ProtoActionType_ACTION_CANCEL_STOP_LOSS_TAKE_PROFIT ProtoActionType = 3
	ProtoActionType_ACTION_CREATE_CLOSING_ORDER         ProtoActionType = 4
	ProtoActionType_ACTION_CREATE_ORDER                 ProtoActionType = 5
	ProtoActionType_ACTION_CANCEL_PENDING_ORDER         ProtoActionType = 6
	ProtoActionType_ACTION_AMEND_OPEN_PENDING_ORDER     ProtoActionType = 7
	ProtoActionType_ACTION_CREATE_OCO_LINK              ProtoActionType = 8
	ProtoActionType_ACTION_CANCEL_OCO_LINK              ProtoActionType = 9
)

// Enum value maps for ProtoActionType.
var (
	ProtoActionType_name = map[int32]string{
		1: "ACTION_CREATE_STOP_LOSS_TAKE_PROFIT",
		2: "ACTION_AMEND_STOP_LOSS_TAKE_PROFIT",
		3: "ACTION_CANCEL_STOP_LOSS_TAKE_PROFIT",
		4: "ACTION_CREATE_CLOSING_ORDER",
		5: "ACTION_CREATE_ORDER",
		6: "ACTION_CANCEL_PENDING_ORDER",
		7: "ACTION_AMEND_OPEN_PENDING_ORDER",
		8: "ACTION_CREATE_OCO_LINK",
		9: "ACTION_CANCEL_OCO_LINK",
	}
	ProtoActionType_value = map[string]int32{
		"ACTION_CREATE_STOP_LOSS_TAKE_PROFIT": 1,
		"ACTION_AMEND_STOP_LOSS_TAKE_PROFIT":  2,
		"ACTION_CANCEL_STOP_LOSS_TAKE_PROFIT": 3,
		"ACTION_CREATE_CLOSING_ORDER":         4,
		"ACTION_CREATE_ORDER":                 5,
		"ACTION_CANCEL_PENDING_ORDER":         6,
		"ACTION_AMEND_OPEN_PENDING_ORDER":     7,
		"ACTION_CREATE_OCO_LINK":              8,
		"ACTION_CANCEL_OCO_LINK":              9,
	}
)

func (x ProtoActionType) Enum() *ProtoActionType {
	p := new(ProtoActionType)
	*p = x
	return p
}

func (x ProtoActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[3].Descriptor()
}

func (ProtoActionType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[3]
}

func (x ProtoActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoActionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoActionType(num)
	return nil
}

// Deprecated: Use ProtoActionType.Descriptor instead.
func (ProtoActionType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{3}
}

// Status of Order related action
type ProtoActionStatus int32

const (
	ProtoActionStatus_ACTION_PENDING ProtoActionStatus = 1
	ProtoActionStatus_ACTION_STARTED ProtoActionStatus = 2
	ProtoActionStatus_ACTION_PASSED  ProtoActionStatus = 3
	ProtoActionStatus_ACTION_FAILED  ProtoActionStatus = 4
	ProtoActionStatus_ACTION_ERROR   ProtoActionStatus = 5
)

// Enum value maps for ProtoActionStatus.
var (
	ProtoActionStatus_name = map[int32]string{
		1: "ACTION_PENDING",
		2: "ACTION_STARTED",
		3: "ACTION_PASSED",
		4: "ACTION_FAILED",
		5: "ACTION_ERROR",
	}
	ProtoActionStatus_value = map[string]int32{
		"ACTION_PENDING": 1,
		"ACTION_STARTED": 2,
		"ACTION_PASSED":  3,
		"ACTION_FAILED":  4,
		"ACTION_ERROR":   5,
	}
)

func (x ProtoActionStatus) Enum() *ProtoActionStatus {
	p := new(ProtoActionStatus)
	*p = x
	return p
}

func (x ProtoActionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoActionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[4].Descriptor()
}

func (ProtoActionStatus) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[4]
}

func (x ProtoActionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoActionStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoActionStatus(num)
	return nil
}

// Deprecated: Use ProtoActionStatus.Descriptor instead.
func (ProtoActionStatus) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{4}
}

// Balance operation entity type ENUM
type ProtoChangeBalanceType int32

const (
	ProtoChangeBalanceType_BALANCE_DEPOSIT                                  ProtoChangeBalanceType = 0
	ProtoChangeBalanceType_BALANCE_WITHDRAW                                 ProtoChangeBalanceType = 1
	ProtoChangeBalanceType_BALANCE_CLOSE_POSITION                           ProtoChangeBalanceType = 2
	ProtoChangeBalanceType_BALANCE_DEPOSIT_STRATEGY_COMMISSION_INNER        ProtoChangeBalanceType = 3
	ProtoChangeBalanceType_BALANCE_WITHDRAW_STRATEGY_COMMISSION_INNER       ProtoChangeBalanceType = 4
	ProtoChangeBalanceType_BALANCE_DEPOSIT_IB_COMMISSIONS                   ProtoChangeBalanceType = 5
	ProtoChangeBalanceType_BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE            ProtoChangeBalanceType = 6
	ProtoChangeBalanceType_BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_SUB_IB ProtoChangeBalanceType = 7
	ProtoChangeBalanceType_BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_BROKER ProtoChangeBalanceType = 8
	ProtoChangeBalanceType_BALANCE_DEPOSIT_REBATE                           ProtoChangeBalanceType = 9
	ProtoChangeBalanceType_BALANCE_WITHDRAW_REBATE                          ProtoChangeBalanceType = 10
	ProtoChangeBalanceType_BALANCE_DEPOSIT_STRATEGY_COMMISSION_OUTER        ProtoChangeBalanceType = 11
	ProtoChangeBalanceType_BALANCE_WITHDRAW_STRATEGY_COMMISSION_OUTER       ProtoChangeBalanceType = 12
	ProtoChangeBalanceType_BALANCE_WITHDRAW_BONUS_COMPENSATION              ProtoChangeBalanceType = 13
	ProtoChangeBalanceType_BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE_TO_BROKER  ProtoChangeBalanceType = 14
	ProtoChangeBalanceType_BALANCE_DEPOSIT_DIVIDENDS                        ProtoChangeBalanceType = 15
	ProtoChangeBalanceType_BALANCE_WITHDRAW_DIVIDENDS                       ProtoChangeBalanceType = 16
	ProtoChangeBalanceType_BALANCE_WITHDRAW_GSL_CHARGE                      ProtoChangeBalanceType = 17
	ProtoChangeBalanceType_BALANCE_WITHDRAW_ROLLOVER                        ProtoChangeBalanceType = 18
	ProtoChangeBalanceType_BALANCE_DEPOSIT_NONWITHDRAWABLE_BONUS            ProtoChangeBalanceType = 19
	ProtoChangeBalanceType_BALANCE_WITHDRAW_NONWITHDRAWABLE_BONUS           ProtoChangeBalanceType = 20
	ProtoChangeBalanceType_BALANCE_DEPOSIT_SWAP                             ProtoChangeBalanceType = 21
	ProtoChangeBalanceType_BALANCE_WITHDRAW_SWAP                            ProtoChangeBalanceType = 22
	ProtoChangeBalanceType_BALANCE_WITHDRAW_INVESTMENT_TO_STRATEGY          ProtoChangeBalanceType = 23
	ProtoChangeBalanceType_BALANCE_DEPOSIT_FROM_INVESTOR                    ProtoChangeBalanceType = 24
	ProtoChangeBalanceType_BALANCE_DEPOSIT_RETURNED_INVESTMENT              ProtoChangeBalanceType = 25
	ProtoChangeBalanceType_BALANCE_WITHDRAW_BY_INVESTOR                     ProtoChangeBalanceType = 26
	ProtoChangeBalanceType_BALANCE_DEPOSIT_MANAGEMENT_FEE                   ProtoChangeBalanceType = 27
	ProtoChangeBalanceType_BALANCE_WITHDRAW_MANAGEMENT_FEE                  ProtoChangeBalanceType = 28
	ProtoChangeBalanceType_BALANCE_DEPOSIT_PERFORMANCE_FEE                  ProtoChangeBalanceType = 29
	ProtoChangeBalanceType_BALANCE_WITHDRAW_FOR_SUBACCOUNT                  ProtoChangeBalanceType = 30
	ProtoChangeBalanceType_BALANCE_DEPOSIT_TO_SUBACCOUNT                    ProtoChangeBalanceType = 31
	ProtoChangeBalanceType_BALANCE_WITHDRAW_FROM_SUBACCOUNT                 ProtoChangeBalanceType = 32
	ProtoChangeBalanceType_BALANCE_DEPOSIT_FROM_SUBACCOUNT                  ProtoChangeBalanceType = 33
	ProtoChangeBalanceType_BALANCE_WITHDRAW_COPY_FEE                        ProtoChangeBalanceType = 34
	ProtoChangeBalanceType_BALANCE_WITHDRAW_INACTIVITY_FEE                  ProtoChangeBalanceType = 35
	ProtoChangeBalanceType_BALANCE_DEPOSIT_TRANSFER                         ProtoChangeBalanceType = 36
	ProtoChangeBalanceType_BALANCE_WITHDRAW_TRANSFER                        ProtoChangeBalanceType = 37
	ProtoChangeBalanceType_BALANCE_DEPOSIT_CONVERTED_BONUS                  ProtoChangeBalanceType = 38
	ProtoChangeBalanceType_BALANCE_DEPOSIT_NEGATIVE_BALANCE_PROTECTION      ProtoChangeBalanceType = 39
	ProtoChangeBalanceType_BALANCE_RESERVED_1                               ProtoChangeBalanceType = 40
	ProtoChangeBalanceType_BALANCE_RESERVED_2                               ProtoChangeBalanceType = 41
	ProtoChangeBalanceType_BALANCE_RESERVED_3                               ProtoChangeBalanceType = 42
)

// Enum value maps for ProtoChangeBalanceType.
var (
	ProtoChangeBalanceType_name = map[int32]string{
		0:  "BALANCE_DEPOSIT",
		1:  "BALANCE_WITHDRAW",
		2:  "BALANCE_CLOSE_POSITION",
		3:  "BALANCE_DEPOSIT_STRATEGY_COMMISSION_INNER",
		4:  "BALANCE_WITHDRAW_STRATEGY_COMMISSION_INNER",
		5:  "BALANCE_DEPOSIT_IB_COMMISSIONS",
		6:  "BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE",
		7:  "BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_SUB_IB",
		8:  "BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_BROKER",
		9:  "BALANCE_DEPOSIT_REBATE",
		10: "BALANCE_WITHDRAW_REBATE",
		11: "BALANCE_DEPOSIT_STRATEGY_COMMISSION_OUTER",
		12: "BALANCE_WITHDRAW_STRATEGY_COMMISSION_OUTER",
		13: "BALANCE_WITHDRAW_BONUS_COMPENSATION",
		14: "BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE_TO_BROKER",
		15: "BALANCE_DEPOSIT_DIVIDENDS",
		16: "BALANCE_WITHDRAW_DIVIDENDS",
		17: "BALANCE_WITHDRAW_GSL_CHARGE",
		18: "BALANCE_WITHDRAW_ROLLOVER",
		19: "BALANCE_DEPOSIT_NONWITHDRAWABLE_BONUS",
		20: "BALANCE_WITHDRAW_NONWITHDRAWABLE_BONUS",
		21: "BALANCE_DEPOSIT_SWAP",
		22: "BALANCE_WITHDRAW_SWAP",
		23: "BALANCE_WITHDRAW_INVESTMENT_TO_STRATEGY",
		24: "BALANCE_DEPOSIT_FROM_INVESTOR",
		25: "BALANCE_DEPOSIT_RETURNED_INVESTMENT",
		26: "BALANCE_WITHDRAW_BY_INVESTOR",
		27: "BALANCE_DEPOSIT_MANAGEMENT_FEE",
		28: "BALANCE_WITHDRAW_MANAGEMENT_FEE",
		29: "BALANCE_DEPOSIT_PERFORMANCE_FEE",
		30: "BALANCE_WITHDRAW_FOR_SUBACCOUNT",
		31: "BALANCE_DEPOSIT_TO_SUBACCOUNT",
		32: "BALANCE_WITHDRAW_FROM_SUBACCOUNT",
		33: "BALANCE_DEPOSIT_FROM_SUBACCOUNT",
		34: "BALANCE_WITHDRAW_COPY_FEE",
		35: "BALANCE_WITHDRAW_INACTIVITY_FEE",
		36: "BALANCE_DEPOSIT_TRANSFER",
		37: "BALANCE_WITHDRAW_TRANSFER",
		38: "BALANCE_DEPOSIT_CONVERTED_BONUS",
		39: "BALANCE_DEPOSIT_NEGATIVE_BALANCE_PROTECTION",
		40: "BALANCE_RESERVED_1",
		41: "BALANCE_RESERVED_2",
		42: "BALANCE_RESERVED_3",
	}
	ProtoChangeBalanceType_value = map[string]int32{
		"BALANCE_DEPOSIT":                                  0,
		"BALANCE_WITHDRAW":                                 1,
		"BALANCE_CLOSE_POSITION":                           2,
		"BALANCE_DEPOSIT_STRATEGY_COMMISSION_INNER":        3,
		"BALANCE_WITHDRAW_STRATEGY_COMMISSION_INNER":       4,
		"BALANCE_DEPOSIT_IB_COMMISSIONS":                   5,
		"BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE":            6,
		"BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_SUB_IB": 7,
		"BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_BROKER": 8,
		"BALANCE_DEPOSIT_REBATE":                           9,
		"BALANCE_WITHDRAW_REBATE":                          10,
		"BALANCE_DEPOSIT_STRATEGY_COMMISSION_OUTER":        11,
		"BALANCE_WITHDRAW_STRATEGY_COMMISSION_OUTER":       12,
		"BALANCE_WITHDRAW_BONUS_COMPENSATION":              13,
		"BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE_TO_BROKER":  14,
		"BALANCE_DEPOSIT_DIVIDENDS":                        15,
		"BALANCE_WITHDRAW_DIVIDENDS":                       16,
		"BALANCE_WITHDRAW_GSL_CHARGE":                      17,
		"BALANCE_WITHDRAW_ROLLOVER":                        18,
		"BALANCE_DEPOSIT_NONWITHDRAWABLE_BONUS":            19,
		"BALANCE_WITHDRAW_NONWITHDRAWABLE_BONUS":           20,
		"BALANCE_DEPOSIT_SWAP":                             21,
		"BALANCE_WITHDRAW_SWAP":                            22,
		"BALANCE_WITHDRAW_INVESTMENT_TO_STRATEGY":          23,
		"BALANCE_DEPOSIT_FROM_INVESTOR":                    24,
		"BALANCE_DEPOSIT_RETURNED_INVESTMENT":              25,
		"BALANCE_WITHDRAW_BY_INVESTOR":                     26,
		"BALANCE_DEPOSIT_MANAGEMENT_FEE":                   27,
		"BALANCE_WITHDRAW_MANAGEMENT_FEE":                  28,
		"BALANCE_DEPOSIT_PERFORMANCE_FEE":                  29,
		"BALANCE_WITHDRAW_FOR_SUBACCOUNT":                  30,
		"BALANCE_DEPOSIT_TO_SUBACCOUNT":                    31,
		"BALANCE_WITHDRAW_FROM_SUBACCOUNT":                 32,
		"BALANCE_DEPOSIT_FROM_SUBACCOUNT":                  33,
		"BALANCE_WITHDRAW_COPY_FEE":                        34,
		"BALANCE_WITHDRAW_INACTIVITY_FEE":                  35,
		"BALANCE_DEPOSIT_TRANSFER":                         36,
		"BALANCE_WITHDRAW_TRANSFER":                        37,
		"BALANCE_DEPOSIT_CONVERTED_BONUS":                  38,
		"BALANCE_DEPOSIT_NEGATIVE_BALANCE_PROTECTION":      39,
		"BALANCE_RESERVED_1":                               40,
		"BALANCE_RESERVED_2":                               41,
		"BALANCE_RESERVED_3":                               42,
	}
)

func (x ProtoChangeBalanceType) Enum() *ProtoChangeBalanceType {
	p := new(ProtoChangeBalanceType)
	*p = x
	return p
}

func (x ProtoChangeBalanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoChangeBalanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[5].Descriptor()
}

func (ProtoChangeBalanceType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[5]
}

func (x ProtoChangeBalanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoChangeBalanceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoChangeBalanceType(num)
	return nil
}

// Deprecated: Use ProtoChangeBalanceType.Descriptor instead.
func (ProtoChangeBalanceType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{5}
}

// Bonus operation type ENUM
type ProtoChangeBonusType int32

const (
	ProtoChangeBonusType_BONUS_DEPOSIT  ProtoChangeBonusType = 0
	ProtoChangeBonusType_BONUS_WITHDRAW ProtoChangeBonusType = 1
)

// Enum value maps for ProtoChangeBonusType.
var (
	ProtoChangeBonusType_name = map[int32]string{
		0: "BONUS_DEPOSIT",
		1: "BONUS_WITHDRAW",
	}
	ProtoChangeBonusType_value = map[string]int32{
		"BONUS_DEPOSIT":  0,
		"BONUS_WITHDRAW": 1,
	}
)

func (x ProtoChangeBonusType) Enum() *ProtoChangeBonusType {
	p := new(ProtoChangeBonusType)
	*p = x
	return p
}

func (x ProtoChangeBonusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoChangeBonusType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[6].Descriptor()
}

func (ProtoChangeBonusType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[6]
}

func (x ProtoChangeBonusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoChangeBonusType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoChangeBonusType(num)
	return nil
}

// Deprecated: Use ProtoChangeBonusType.Descriptor instead.
func (ProtoChangeBonusType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{6}
}

// Position's status type ENUM
type ProtoPositionStatus int32

const (
	ProtoPositionStatus_POSITION_STATUS_OPEN    ProtoPositionStatus = 1
	ProtoPositionStatus_POSITION_STATUS_CLOSED  ProtoPositionStatus = 2
	ProtoPositionStatus_POSITION_STATUS_CREATED ProtoPositionStatus = 3
	ProtoPositionStatus_POSITION_STATUS_ERROR   ProtoPositionStatus = 4
)

// Enum value maps for ProtoPositionStatus.
var (
	ProtoPositionStatus_name = map[int32]string{
		1: "POSITION_STATUS_OPEN",
		2: "POSITION_STATUS_CLOSED",
		3: "POSITION_STATUS_CREATED",
		4: "POSITION_STATUS_ERROR",
	}
	ProtoPositionStatus_value = map[string]int32{
		"POSITION_STATUS_OPEN":    1,
		"POSITION_STATUS_CLOSED":  2,
		"POSITION_STATUS_CREATED": 3,
		"POSITION_STATUS_ERROR":   4,
	}
)

func (x ProtoPositionStatus) Enum() *ProtoPositionStatus {
	p := new(ProtoPositionStatus)
	*p = x
	return p
}

func (x ProtoPositionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoPositionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[7].Descriptor()
}

func (ProtoPositionStatus) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[7]
}

func (x ProtoPositionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoPositionStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoPositionStatus(num)
	return nil
}

// Deprecated: Use ProtoPositionStatus.Descriptor instead.
func (ProtoPositionStatus) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{7}
}

// Trade side type ENUM
type ProtoTradeSide int32

const (
	ProtoTradeSide_BUY  ProtoTradeSide = 1
	ProtoTradeSide_SELL ProtoTradeSide = 2
)

// Enum value maps for ProtoTradeSide.
var (
	ProtoTradeSide_name = map[int32]string{
		1: "BUY",
		2: "SELL",
	}
	ProtoTradeSide_value = map[string]int32{
		"BUY":  1,
		"SELL": 2,
	}
)

func (x ProtoTradeSide) Enum() *ProtoTradeSide {
	p := new(ProtoTradeSide)
	*p = x
	return p
}

func (x ProtoTradeSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoTradeSide) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[8].Descriptor()
}

func (ProtoTradeSide) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[8]
}

func (x ProtoTradeSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoTradeSide) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoTradeSide(num)
	return nil
}

// Deprecated: Use ProtoTradeSide.Descriptor instead.
func (ProtoTradeSide) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{8}
}

// Order type ENUM
type ProtoOrderType int32

const (
	ProtoOrderType_MARKET                ProtoOrderType = 1
	ProtoOrderType_LIMIT                 ProtoOrderType = 2
	ProtoOrderType_STOP                  ProtoOrderType = 3
	ProtoOrderType_STOP_LOSS_TAKE_PROFIT ProtoOrderType = 4
	ProtoOrderType_MARKET_RANGE          ProtoOrderType = 5
	ProtoOrderType_STOP_LIMIT            ProtoOrderType = 6
)

// Enum value maps for ProtoOrderType.
var (
	ProtoOrderType_name = map[int32]string{
		1: "MARKET",
		2: "LIMIT",
		3: "STOP",
		4: "STOP_LOSS_TAKE_PROFIT",
		5: "MARKET_RANGE",
		6: "STOP_LIMIT",
	}
	ProtoOrderType_value = map[string]int32{
		"MARKET":                1,
		"LIMIT":                 2,
		"STOP":                  3,
		"STOP_LOSS_TAKE_PROFIT": 4,
		"MARKET_RANGE":          5,
		"STOP_LIMIT":            6,
	}
)

func (x ProtoOrderType) Enum() *ProtoOrderType {
	p := new(ProtoOrderType)
	*p = x
	return p
}

func (x ProtoOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[9].Descriptor()
}

func (ProtoOrderType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[9]
}

func (x ProtoOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOrderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOrderType(num)
	return nil
}

// Deprecated: Use ProtoOrderType.Descriptor instead.
func (ProtoOrderType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{9}
}

// Order's Time In Force type ENUM
type ProtoTimeInForce int32

const (
	ProtoTimeInForce_GOOD_TILL_DATE      ProtoTimeInForce = 1
	ProtoTimeInForce_GOOD_TILL_CANCEL    ProtoTimeInForce = 2
	ProtoTimeInForce_IMMEDIATE_OR_CANCEL ProtoTimeInForce = 3
	ProtoTimeInForce_FILL_OR_KILL        ProtoTimeInForce = 4
	ProtoTimeInForce_MARKET_ON_OPEN      ProtoTimeInForce = 5
)

// Enum value maps for ProtoTimeInForce.
var (
	ProtoTimeInForce_name = map[int32]string{
		1: "GOOD_TILL_DATE",
		2: "GOOD_TILL_CANCEL",
		3: "IMMEDIATE_OR_CANCEL",
		4: "FILL_OR_KILL",
		5: "MARKET_ON_OPEN",
	}
	ProtoTimeInForce_value = map[string]int32{
		"GOOD_TILL_DATE":      1,
		"GOOD_TILL_CANCEL":    2,
		"IMMEDIATE_OR_CANCEL": 3,
		"FILL_OR_KILL":        4,
		"MARKET_ON_OPEN":      5,
	}
)

func (x ProtoTimeInForce) Enum() *ProtoTimeInForce {
	p := new(ProtoTimeInForce)
	*p = x
	return p
}

func (x ProtoTimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoTimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[10].Descriptor()
}

func (ProtoTimeInForce) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[10]
}

func (x ProtoTimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoTimeInForce) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoTimeInForce(num)
	return nil
}

// Deprecated: Use ProtoTimeInForce.Descriptor instead.
func (ProtoTimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{10}
}

// Order's status type ENUM
type ProtoOrderStatus int32

const (
	ProtoOrderStatus_ORDER_STATUS_ACCEPTED  ProtoOrderStatus = 1
	ProtoOrderStatus_ORDER_STATUS_FILLED    ProtoOrderStatus = 2
	ProtoOrderStatus_ORDER_STATUS_REJECTED  ProtoOrderStatus = 3
	ProtoOrderStatus_ORDER_STATUS_EXPIRED   ProtoOrderStatus = 4
	ProtoOrderStatus_ORDER_STATUS_CANCELLED ProtoOrderStatus = 5
	ProtoOrderStatus_ORDER_STATUS_RESERVED  ProtoOrderStatus = 6
)

// Enum value maps for ProtoOrderStatus.
var (
	ProtoOrderStatus_name = map[int32]string{
		1: "ORDER_STATUS_ACCEPTED",
		2: "ORDER_STATUS_FILLED",
		3: "ORDER_STATUS_REJECTED",
		4: "ORDER_STATUS_EXPIRED",
		5: "ORDER_STATUS_CANCELLED",
		6: "ORDER_STATUS_RESERVED",
	}
	ProtoOrderStatus_value = map[string]int32{
		"ORDER_STATUS_ACCEPTED":  1,
		"ORDER_STATUS_FILLED":    2,
		"ORDER_STATUS_REJECTED":  3,
		"ORDER_STATUS_EXPIRED":   4,
		"ORDER_STATUS_CANCELLED": 5,
		"ORDER_STATUS_RESERVED":  6,
	}
)

func (x ProtoOrderStatus) Enum() *ProtoOrderStatus {
	p := new(ProtoOrderStatus)
	*p = x
	return p
}

func (x ProtoOrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[11].Descriptor()
}

func (ProtoOrderStatus) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[11]
}

func (x ProtoOrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOrderStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOrderStatus(num)
	return nil
}

// Deprecated: Use ProtoOrderStatus.Descriptor instead.
func (ProtoOrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{11}
}

// Order trigger method type ENUM
type ProtoOrderTriggerMethod int32

const (
	ProtoOrderTriggerMethod_TRADE           ProtoOrderTriggerMethod = 1
	ProtoOrderTriggerMethod_OPPOSITE        ProtoOrderTriggerMethod = 2
	ProtoOrderTriggerMethod_DOUBLE_TRADE    ProtoOrderTriggerMethod = 3
	ProtoOrderTriggerMethod_DOUBLE_OPPOSITE ProtoOrderTriggerMethod = 4
)

// Enum value maps for ProtoOrderTriggerMethod.
var (
	ProtoOrderTriggerMethod_name = map[int32]string{
		1: "TRADE",
		2: "OPPOSITE",
		3: "DOUBLE_TRADE",
		4: "DOUBLE_OPPOSITE",
	}
	ProtoOrderTriggerMethod_value = map[string]int32{
		"TRADE":           1,
		"OPPOSITE":        2,
		"DOUBLE_TRADE":    3,
		"DOUBLE_OPPOSITE": 4,
	}
)

func (x ProtoOrderTriggerMethod) Enum() *ProtoOrderTriggerMethod {
	p := new(ProtoOrderTriggerMethod)
	*p = x
	return p
}

func (x ProtoOrderTriggerMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoOrderTriggerMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[12].Descriptor()
}

func (ProtoOrderTriggerMethod) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[12]
}

func (x ProtoOrderTriggerMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoOrderTriggerMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoOrderTriggerMethod(num)
	return nil
}

// Deprecated: Use ProtoOrderTriggerMethod.Descriptor instead.
func (ProtoOrderTriggerMethod) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{12}
}

// Type of an Account (Trader) ENUM
type ProtoAccountType int32

const (
	ProtoAccountType_HEDGED         ProtoAccountType = 0
	ProtoAccountType_NETTED         ProtoAccountType = 1
	ProtoAccountType_SPREAD_BETTING ProtoAccountType = 2
)

// Enum value maps for ProtoAccountType.
var (
	ProtoAccountType_name = map[int32]string{
		0: "HEDGED",
		1: "NETTED",
		2: "SPREAD_BETTING",
	}
	ProtoAccountType_value = map[string]int32{
		"HEDGED":         0,
		"NETTED":         1,
		"SPREAD_BETTING": 2,
	}
)

func (x ProtoAccountType) Enum() *ProtoAccountType {
	p := new(ProtoAccountType)
	*p = x
	return p
}

func (x ProtoAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[13].Descriptor()
}

func (ProtoAccountType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[13]
}

func (x ProtoAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoAccountType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoAccountType(num)
	return nil
}

// Deprecated: Use ProtoAccountType.Descriptor instead.
func (ProtoAccountType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{13}
}

// Margin calculation type for an Trader ENUM
type ProtoTotalMarginCalculationType int32

const (
	ProtoTotalMarginCalculationType_MAX ProtoTotalMarginCalculationType = 0
	ProtoTotalMarginCalculationType_SUM ProtoTotalMarginCalculationType = 1
	ProtoTotalMarginCalculationType_NET ProtoTotalMarginCalculationType = 2
)

// Enum value maps for ProtoTotalMarginCalculationType.
var (
	ProtoTotalMarginCalculationType_name = map[int32]string{
		0: "MAX",
		1: "SUM",
		2: "NET",
	}
	ProtoTotalMarginCalculationType_value = map[string]int32{
		"MAX": 0,
		"SUM": 1,
		"NET": 2,
	}
)

func (x ProtoTotalMarginCalculationType) Enum() *ProtoTotalMarginCalculationType {
	p := new(ProtoTotalMarginCalculationType)
	*p = x
	return p
}

func (x ProtoTotalMarginCalculationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoTotalMarginCalculationType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[14].Descriptor()
}

func (ProtoTotalMarginCalculationType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[14]
}

func (x ProtoTotalMarginCalculationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoTotalMarginCalculationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoTotalMarginCalculationType(num)
	return nil
}

// Deprecated: Use ProtoTotalMarginCalculationType.Descriptor instead.
func (ProtoTotalMarginCalculationType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{14}
}

// Trading access rights ENUM
type ProtoAccessRights int32

const (
	ProtoAccessRights_FULL_ACCESS ProtoAccessRights = 0
	ProtoAccessRights_CLOSE_ONLY  ProtoAccessRights = 1
	ProtoAccessRights_NO_TRADING  ProtoAccessRights = 2
	ProtoAccessRights_NO_LOGIN    ProtoAccessRights = 3
)

// Enum value maps for ProtoAccessRights.
var (
	ProtoAccessRights_name = map[int32]string{
		0: "FULL_ACCESS",
		1: "CLOSE_ONLY",
		2: "NO_TRADING",
		3: "NO_LOGIN",
	}
	ProtoAccessRights_value = map[string]int32{
		"FULL_ACCESS": 0,
		"CLOSE_ONLY":  1,
		"NO_TRADING":  2,
		"NO_LOGIN":    3,
	}
)

func (x ProtoAccessRights) Enum() *ProtoAccessRights {
	p := new(ProtoAccessRights)
	*p = x
	return p
}

func (x ProtoAccessRights) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoAccessRights) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[15].Descriptor()
}

func (ProtoAccessRights) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[15]
}

func (x ProtoAccessRights) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoAccessRights) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoAccessRights(num)
	return nil
}

// Deprecated: Use ProtoAccessRights.Descriptor instead.
func (ProtoAccessRights) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{15}
}

// Guaranteed Stop Loss execution policy ENUM
type ProtoGSLExecutionPolicy int32

const (
	ProtoGSLExecutionPolicy_DISABLED                         ProtoGSLExecutionPolicy = 0
	ProtoGSLExecutionPolicy_ENABLED_DECLINE_IF_A_BOOK        ProtoGSLExecutionPolicy = 1
	ProtoGSLExecutionPolicy_ENABLED_FORCE_B_BOOK             ProtoGSLExecutionPolicy = 2
	ProtoGSLExecutionPolicy_ENABLED_EXECUTE_INTO_SYMBOL_BOOK ProtoGSLExecutionPolicy = 3
)

// Enum value maps for ProtoGSLExecutionPolicy.
var (
	ProtoGSLExecutionPolicy_name = map[int32]string{
		0: "DISABLED",
		1: "ENABLED_DECLINE_IF_A_BOOK",
		2: "ENABLED_FORCE_B_BOOK",
		3: "ENABLED_EXECUTE_INTO_SYMBOL_BOOK",
	}
	ProtoGSLExecutionPolicy_value = map[string]int32{
		"DISABLED":                         0,
		"ENABLED_DECLINE_IF_A_BOOK":        1,
		"ENABLED_FORCE_B_BOOK":             2,
		"ENABLED_EXECUTE_INTO_SYMBOL_BOOK": 3,
	}
)

func (x ProtoGSLExecutionPolicy) Enum() *ProtoGSLExecutionPolicy {
	p := new(ProtoGSLExecutionPolicy)
	*p = x
	return p
}

func (x ProtoGSLExecutionPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoGSLExecutionPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[16].Descriptor()
}

func (ProtoGSLExecutionPolicy) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[16]
}

func (x ProtoGSLExecutionPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoGSLExecutionPolicy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoGSLExecutionPolicy(num)
	return nil
}

// Deprecated: Use ProtoGSLExecutionPolicy.Descriptor instead.
func (ProtoGSLExecutionPolicy) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{16}
}

// Book type ENUM
type ProtoSymbolBookType int32

const (
	ProtoSymbolBookType_SYMBOL_BOOK_TYPE_BOOK_A ProtoSymbolBookType = 1
	ProtoSymbolBookType_SYMBOL_BOOK_TYPE_BOOK_B ProtoSymbolBookType = 2
)

// Enum value maps for ProtoSymbolBookType.
var (
	ProtoSymbolBookType_name = map[int32]string{
		1: "SYMBOL_BOOK_TYPE_BOOK_A",
		2: "SYMBOL_BOOK_TYPE_BOOK_B",
	}
	ProtoSymbolBookType_value = map[string]int32{
		"SYMBOL_BOOK_TYPE_BOOK_A": 1,
		"SYMBOL_BOOK_TYPE_BOOK_B": 2,
	}
)

func (x ProtoSymbolBookType) Enum() *ProtoSymbolBookType {
	p := new(ProtoSymbolBookType)
	*p = x
	return p
}

func (x ProtoSymbolBookType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoSymbolBookType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[17].Descriptor()
}

func (ProtoSymbolBookType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[17]
}

func (x ProtoSymbolBookType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoSymbolBookType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoSymbolBookType(num)
	return nil
}

// Deprecated: Use ProtoSymbolBookType.Descriptor instead.
func (ProtoSymbolBookType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{17}
}

// Commission type ENUM
type ProtoCommissionType int32

const (
	ProtoCommissionType_USD_PER_MILLION_USD ProtoCommissionType = 1 // USD per million USD volume - usually used for FX. Example: 5 USD for 1 mil USD of trading volume. In 10^8: value of 500000000 is 500000000 / 10^8 = 5 USD per million
	ProtoCommissionType_USD_PER_LOT         ProtoCommissionType = 2 // USD per 1 lot - usually used for CFDs and futures for commodities, and indices. Example: 15 USD for 1 contract. In 10^8: value of 1500000000 is 1500000000 / 10^8 = 15 USD per lot
	ProtoCommissionType_PERCENTAGE_OF_VALUE ProtoCommissionType = 3 // Percentage of trading volume - usually used for Equities. Example: 0.005% of notional trading volume. Multiplied by 10^5: value of 500 is 500 / 10^5 = 0.005%
	ProtoCommissionType_QUOTE_CCY_PER_LOT   ProtoCommissionType = 4 // Quote Asset of Symbol per 1 lot - will be used for CFDs and futures for commodities, and indices. Example: 15 EUR for 1 contract of DAX. In 10^8: value of 1500000000 is 1500000000 / 10^8 = 15 EUR per contract
)

// Enum value maps for ProtoCommissionType.
var (
	ProtoCommissionType_name = map[int32]string{
		1: "USD_PER_MILLION_USD",
		2: "USD_PER_LOT",
		3: "PERCENTAGE_OF_VALUE",
		4: "QUOTE_CCY_PER_LOT",
	}
	ProtoCommissionType_value = map[string]int32{
		"USD_PER_MILLION_USD": 1,
		"USD_PER_LOT":         2,
		"PERCENTAGE_OF_VALUE": 3,
		"QUOTE_CCY_PER_LOT":   4,
	}
)

func (x ProtoCommissionType) Enum() *ProtoCommissionType {
	p := new(ProtoCommissionType)
	*p = x
	return p
}

func (x ProtoCommissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoCommissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[18].Descriptor()
}

func (ProtoCommissionType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[18]
}

func (x ProtoCommissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoCommissionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoCommissionType(num)
	return nil
}

// Deprecated: Use ProtoCommissionType.Descriptor instead.
func (ProtoCommissionType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{18}
}

// Trading mode type of a symbol ENUM
type ProtoTradingMode int32

const (
	ProtoTradingMode_ENABLED                             ProtoTradingMode = 0 // Symbol is enabled for trading
	ProtoTradingMode_DISABLED_WITHOUT_PENDINGS_EXECUTION ProtoTradingMode = 1 // Symbol is disabled, and pending Orders are not executed
	ProtoTradingMode_DISABLED_WITH_PENDINGS_EXECUTION    ProtoTradingMode = 2 // Symbol is disabled, but pending Orders are executed
	ProtoTradingMode_CLOSE_ONLY_MODE                     ProtoTradingMode = 3 // Symbol is disabled, and pending Orders are not executed, but only close Orders are executed
)

// Enum value maps for ProtoTradingMode.
var (
	ProtoTradingMode_name = map[int32]string{
		0: "ENABLED",
		1: "DISABLED_WITHOUT_PENDINGS_EXECUTION",
		2: "DISABLED_WITH_PENDINGS_EXECUTION",
		3: "CLOSE_ONLY_MODE",
	}
	ProtoTradingMode_value = map[string]int32{
		"ENABLED":                             0,
		"DISABLED_WITHOUT_PENDINGS_EXECUTION": 1,
		"DISABLED_WITH_PENDINGS_EXECUTION":    2,
		"CLOSE_ONLY_MODE":                     3,
	}
)

func (x ProtoTradingMode) Enum() *ProtoTradingMode {
	p := new(ProtoTradingMode)
	*p = x
	return p
}

func (x ProtoTradingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoTradingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[19].Descriptor()
}

func (ProtoTradingMode) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[19]
}

func (x ProtoTradingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoTradingMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoTradingMode(num)
	return nil
}

// Deprecated: Use ProtoTradingMode.Descriptor instead.
func (ProtoTradingMode) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{19}
}

// Swap calculation type ENUM
type ProtoSwapCalculationType int32

const (
	ProtoSwapCalculationType_PIPS       ProtoSwapCalculationType = 0
	ProtoSwapCalculationType_PERCENTAGE ProtoSwapCalculationType = 1
)

// Enum value maps for ProtoSwapCalculationType.
var (
	ProtoSwapCalculationType_name = map[int32]string{
		0: "PIPS",
		1: "PERCENTAGE",
	}
	ProtoSwapCalculationType_value = map[string]int32{
		"PIPS":       0,
		"PERCENTAGE": 1,
	}
)

func (x ProtoSwapCalculationType) Enum() *ProtoSwapCalculationType {
	p := new(ProtoSwapCalculationType)
	*p = x
	return p
}

func (x ProtoSwapCalculationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoSwapCalculationType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[20].Descriptor()
}

func (ProtoSwapCalculationType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[20]
}

func (x ProtoSwapCalculationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoSwapCalculationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoSwapCalculationType(num)
	return nil
}

// Deprecated: Use ProtoSwapCalculationType.Descriptor instead.
func (ProtoSwapCalculationType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{20}
}

// Day of week ENUM
type ProtoDayOfWeek int32

const (
	ProtoDayOfWeek_NONE      ProtoDayOfWeek = 0
	ProtoDayOfWeek_MONDAY    ProtoDayOfWeek = 1
	ProtoDayOfWeek_TUESDAY   ProtoDayOfWeek = 2
	ProtoDayOfWeek_WEDNESDAY ProtoDayOfWeek = 3
	ProtoDayOfWeek_THURSDAY  ProtoDayOfWeek = 4
	ProtoDayOfWeek_FRIDAY    ProtoDayOfWeek = 5
	ProtoDayOfWeek_SATURDAY  ProtoDayOfWeek = 6
	ProtoDayOfWeek_SUNDAY    ProtoDayOfWeek = 7
)

// Enum value maps for ProtoDayOfWeek.
var (
	ProtoDayOfWeek_name = map[int32]string{
		0: "NONE",
		1: "MONDAY",
		2: "TUESDAY",
		3: "WEDNESDAY",
		4: "THURSDAY",
		5: "FRIDAY",
		6: "SATURDAY",
		7: "SUNDAY",
	}
	ProtoDayOfWeek_value = map[string]int32{
		"NONE":      0,
		"MONDAY":    1,
		"TUESDAY":   2,
		"WEDNESDAY": 3,
		"THURSDAY":  4,
		"FRIDAY":    5,
		"SATURDAY":  6,
		"SUNDAY":    7,
	}
)

func (x ProtoDayOfWeek) Enum() *ProtoDayOfWeek {
	p := new(ProtoDayOfWeek)
	*p = x
	return p
}

func (x ProtoDayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoDayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[21].Descriptor()
}

func (ProtoDayOfWeek) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[21]
}

func (x ProtoDayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoDayOfWeek) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoDayOfWeek(num)
	return nil
}

// Deprecated: Use ProtoDayOfWeek.Descriptor instead.
func (ProtoDayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{21}
}

// Minimal Commission type ENUM
type ProtoMinCommissionType int32

const (
	ProtoMinCommissionType_CURRENCY       ProtoMinCommissionType = 1
	ProtoMinCommissionType_QUOTE_CURRENCY ProtoMinCommissionType = 2
)

// Enum value maps for ProtoMinCommissionType.
var (
	ProtoMinCommissionType_name = map[int32]string{
		1: "CURRENCY",
		2: "QUOTE_CURRENCY",
	}
	ProtoMinCommissionType_value = map[string]int32{
		"CURRENCY":       1,
		"QUOTE_CURRENCY": 2,
	}
)

func (x ProtoMinCommissionType) Enum() *ProtoMinCommissionType {
	p := new(ProtoMinCommissionType)
	*p = x
	return p
}

func (x ProtoMinCommissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoMinCommissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[22].Descriptor()
}

func (ProtoMinCommissionType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[22]
}

func (x ProtoMinCommissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoMinCommissionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoMinCommissionType(num)
	return nil
}

// Deprecated: Use ProtoMinCommissionType.Descriptor instead.
func (ProtoMinCommissionType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{22}
}

// Book type ENUM
type ProtoBookType int32

const (
	ProtoBookType_BOOK_A ProtoBookType = 1
	ProtoBookType_BOOK_B ProtoBookType = 2
)

// Enum value maps for ProtoBookType.
var (
	ProtoBookType_name = map[int32]string{
		1: "BOOK_A",
		2: "BOOK_B",
	}
	ProtoBookType_value = map[string]int32{
		"BOOK_A": 1,
		"BOOK_B": 2,
	}
)

func (x ProtoBookType) Enum() *ProtoBookType {
	p := new(ProtoBookType)
	*p = x
	return p
}

func (x ProtoBookType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoBookType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[23].Descriptor()
}

func (ProtoBookType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[23]
}

func (x ProtoBookType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoBookType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoBookType(num)
	return nil
}

// Deprecated: Use ProtoBookType.Descriptor instead.
func (ProtoBookType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{23}
}

// Book request type ENUM
type ProtoBookRequestType int32

const (
	ProtoBookRequestType_ALL_BOOKS_REQUEST ProtoBookRequestType = 1
	ProtoBookRequestType_BOOK_A_REQUEST    ProtoBookRequestType = 2
	ProtoBookRequestType_BOOK_B_REQUEST    ProtoBookRequestType = 3
)

// Enum value maps for ProtoBookRequestType.
var (
	ProtoBookRequestType_name = map[int32]string{
		1: "ALL_BOOKS_REQUEST",
		2: "BOOK_A_REQUEST",
		3: "BOOK_B_REQUEST",
	}
	ProtoBookRequestType_value = map[string]int32{
		"ALL_BOOKS_REQUEST": 1,
		"BOOK_A_REQUEST":    2,
		"BOOK_B_REQUEST":    3,
	}
)

func (x ProtoBookRequestType) Enum() *ProtoBookRequestType {
	p := new(ProtoBookRequestType)
	*p = x
	return p
}

func (x ProtoBookRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoBookRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[24].Descriptor()
}

func (ProtoBookRequestType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[24]
}

func (x ProtoBookRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoBookRequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoBookRequestType(num)
	return nil
}

// Deprecated: Use ProtoBookRequestType.Descriptor instead.
func (ProtoBookRequestType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{24}
}

// Symbol distance for Protection Profiles ENUM
type ProtoSymbolDistanceType int32

const (
	ProtoSymbolDistanceType_SYMBOL_DISTANCE_IN_POINTS     ProtoSymbolDistanceType = 1 // 15 means 15 points
	ProtoSymbolDistanceType_SYMBOL_DISTANCE_IN_PERCENTAGE ProtoSymbolDistanceType = 2 // 15 means 0.15%
)

// Enum value maps for ProtoSymbolDistanceType.
var (
	ProtoSymbolDistanceType_name = map[int32]string{
		1: "SYMBOL_DISTANCE_IN_POINTS",
		2: "SYMBOL_DISTANCE_IN_PERCENTAGE",
	}
	ProtoSymbolDistanceType_value = map[string]int32{
		"SYMBOL_DISTANCE_IN_POINTS":     1,
		"SYMBOL_DISTANCE_IN_PERCENTAGE": 2,
	}
)

func (x ProtoSymbolDistanceType) Enum() *ProtoSymbolDistanceType {
	p := new(ProtoSymbolDistanceType)
	*p = x
	return p
}

func (x ProtoSymbolDistanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoSymbolDistanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[25].Descriptor()
}

func (ProtoSymbolDistanceType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[25]
}

func (x ProtoSymbolDistanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoSymbolDistanceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoSymbolDistanceType(num)
	return nil
}

// Deprecated: Use ProtoSymbolDistanceType.Descriptor instead.
func (ProtoSymbolDistanceType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{25}
}

// Crud operation type ENUM
type ProtoCrudOperation int32

const (
	ProtoCrudOperation_PROTO_CREATE      ProtoCrudOperation = 1 // Create entity. Entity ID must be sent as 0
	ProtoCrudOperation_PROTO_UPDATE      ProtoCrudOperation = 3 // Update, unspecified fields are set to null/default values
	ProtoCrudOperation_PROTO_DELETE      ProtoCrudOperation = 4 // Delete entity
	ProtoCrudOperation_PROTO_UPDATE_DIFF ProtoCrudOperation = 5 // Only specified fields(entities) are updated, unspecified fields are not changed
)

// Enum value maps for ProtoCrudOperation.
var (
	ProtoCrudOperation_name = map[int32]string{
		1: "PROTO_CREATE",
		3: "PROTO_UPDATE",
		4: "PROTO_DELETE",
		5: "PROTO_UPDATE_DIFF",
	}
	ProtoCrudOperation_value = map[string]int32{
		"PROTO_CREATE":      1,
		"PROTO_UPDATE":      3,
		"PROTO_DELETE":      4,
		"PROTO_UPDATE_DIFF": 5,
	}
)

func (x ProtoCrudOperation) Enum() *ProtoCrudOperation {
	p := new(ProtoCrudOperation)
	*p = x
	return p
}

func (x ProtoCrudOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoCrudOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[26].Descriptor()
}

func (ProtoCrudOperation) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[26]
}

func (x ProtoCrudOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoCrudOperation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoCrudOperation(num)
	return nil
}

// Deprecated: Use ProtoCrudOperation.Descriptor instead.
func (ProtoCrudOperation) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{26}
}

// Server Settings type ENUM
type ProtoServerSettingType int32

const (
	ProtoServerSettingType_END_OF_DAY_TIME                 ProtoServerSettingType = 2  // Time in minutes for applying Administrative (Rollover) Fee under Swap Free Profiles and for IB commissions
	ProtoServerSettingType_BOOK_B_ORDER_FILLING_STRATEGY   ProtoServerSettingType = 5  // 'VWAP', 'SPOT', 'PARTIAL'
	ProtoServerSettingType_PRICE_FILTERING_ENABLED         ProtoServerSettingType = 7  // 1 - ON, 0 - OFF
	ProtoServerSettingType_DEPTH_THROTTLING_INTERVAL       ProtoServerSettingType = 8  // Interval for quotes throttling, in milliseconds
	ProtoServerSettingType_DEPTH_THROTTLING_ENABLED        ProtoServerSettingType = 9  // 1 - ON, 0 - OFF
	ProtoServerSettingType_LIFETIME                        ProtoServerSettingType = 12 // Lifetime of demo accounts, in days
	ProtoServerSettingType_METHOD_OF_LIFETIME_CALCULATION  ProtoServerSettingType = 13 // Trader lifetime calculating method used for calculation days for deactivation of inactive Accounts. 0 - Inactivity, 1 - Creation of account
	ProtoServerSettingType_EVERYONE_IS_IB                  ProtoServerSettingType = 14 // If = 1 and Trader is created via manager protocol then introducingBroker = TRUE if not specified
	ProtoServerSettingType_ALWAYS_MANUAL_ENABLED           ProtoServerSettingType = 15 // 1 - ON, 0 - OFF. If enabled automatic execution of Deals is forbidden
	ProtoServerSettingType_MIN_GAP_TOLERANCE               ProtoServerSettingType = 16 // Min gap tolerance for automatic execution on Dealing Desk. Percentage multiplied by 10000: min = 0%, max = 100%, step = 0.0001%. 31234 value would mean 3.1234%. 31234 value would mean 3.1234%. If abs(trigger price - order price)/trigger price*100% <= minGapTolerance then Order will be executed at the Order price
	ProtoServerSettingType_MAX_GAP_TOLERANCE               ProtoServerSettingType = 17 // Max gap tolerance. Percentage multiplied by 10000: min = 0%, max = 100%, step = 0.0001%. 31234 value would mean 3.1234%. If abs(trigger price - order price)/trigger price*100% >= maxGapTolerance then Order will be passed to the Dealer
	ProtoServerSettingType_MANUAL_DEAL_TIMEOUT             ProtoServerSettingType = 18 // Timeout of Manual Deal, in milliseconds
	ProtoServerSettingType_EOD_REPORT_TIME                 ProtoServerSettingType = 19 // Time of the day in UTC when Report should be generated. HH:MM:SS
	ProtoServerSettingType_MARGIN_RECALCULATION_TYPE       ProtoServerSettingType = 21 // 0 - autorecalculation, default; 1 - manual recalculation
	ProtoServerSettingType_ADDITIONAL_B_BOOK_DELAY_CHANNEL ProtoServerSettingType = 22 // List of Order channels which are executed with additional specified delay
	ProtoServerSettingType_ADDITIONAL_B_BOOK_MIN_DELAY     ProtoServerSettingType = 23 // Additional minimum delay in Book B added to the delay specified in Group Symbol settings, in milliseconds
	ProtoServerSettingType_ADDITIONAL_B_BOOK_MAX_DELAY     ProtoServerSettingType = 24 // Additional maximum delay in Book B added to the delay specified in Group Symbol settings, in milliseconds
	ProtoServerSettingType_IB_REQUEST_AUTO_APPROVE         ProtoServerSettingType = 25 // Configuration parameter that will allow to automatically accept IB requests. 0 - OFF, 1 - ON
	ProtoServerSettingType_AVAILABLE_TRADING_BOOK          ProtoServerSettingType = 26 // Available trading books: 0 - NONE, 1 - Book A only, 2 - Book B only, 3 - Both books
	ProtoServerSettingType_MANUAL_DEAL_TIMEOUT_ACTION      ProtoServerSettingType = 27 // Action after timeout of manual Deal. 0 - REJECT/RESET, 1 - EXECUTE
)

// Enum value maps for ProtoServerSettingType.
var (
	ProtoServerSettingType_name = map[int32]string{
		2:  "END_OF_DAY_TIME",
		5:  "BOOK_B_ORDER_FILLING_STRATEGY",
		7:  "PRICE_FILTERING_ENABLED",
		8:  "DEPTH_THROTTLING_INTERVAL",
		9:  "DEPTH_THROTTLING_ENABLED",
		12: "LIFETIME",
		13: "METHOD_OF_LIFETIME_CALCULATION",
		14: "EVERYONE_IS_IB",
		15: "ALWAYS_MANUAL_ENABLED",
		16: "MIN_GAP_TOLERANCE",
		17: "MAX_GAP_TOLERANCE",
		18: "MANUAL_DEAL_TIMEOUT",
		19: "EOD_REPORT_TIME",
		21: "MARGIN_RECALCULATION_TYPE",
		22: "ADDITIONAL_B_BOOK_DELAY_CHANNEL",
		23: "ADDITIONAL_B_BOOK_MIN_DELAY",
		24: "ADDITIONAL_B_BOOK_MAX_DELAY",
		25: "IB_REQUEST_AUTO_APPROVE",
		26: "AVAILABLE_TRADING_BOOK",
		27: "MANUAL_DEAL_TIMEOUT_ACTION",
	}
	ProtoServerSettingType_value = map[string]int32{
		"END_OF_DAY_TIME":                 2,
		"BOOK_B_ORDER_FILLING_STRATEGY":   5,
		"PRICE_FILTERING_ENABLED":         7,
		"DEPTH_THROTTLING_INTERVAL":       8,
		"DEPTH_THROTTLING_ENABLED":        9,
		"LIFETIME":                        12,
		"METHOD_OF_LIFETIME_CALCULATION":  13,
		"EVERYONE_IS_IB":                  14,
		"ALWAYS_MANUAL_ENABLED":           15,
		"MIN_GAP_TOLERANCE":               16,
		"MAX_GAP_TOLERANCE":               17,
		"MANUAL_DEAL_TIMEOUT":             18,
		"EOD_REPORT_TIME":                 19,
		"MARGIN_RECALCULATION_TYPE":       21,
		"ADDITIONAL_B_BOOK_DELAY_CHANNEL": 22,
		"ADDITIONAL_B_BOOK_MIN_DELAY":     23,
		"ADDITIONAL_B_BOOK_MAX_DELAY":     24,
		"IB_REQUEST_AUTO_APPROVE":         25,
		"AVAILABLE_TRADING_BOOK":          26,
		"MANUAL_DEAL_TIMEOUT_ACTION":      27,
	}
)

func (x ProtoServerSettingType) Enum() *ProtoServerSettingType {
	p := new(ProtoServerSettingType)
	*p = x
	return p
}

func (x ProtoServerSettingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoServerSettingType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[27].Descriptor()
}

func (ProtoServerSettingType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[27]
}

func (x ProtoServerSettingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoServerSettingType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoServerSettingType(num)
	return nil
}

// Deprecated: Use ProtoServerSettingType.Descriptor instead.
func (ProtoServerSettingType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{27}
}

// Enum type for Manager permissions
type ProtoManagerPermission int32

const (
	ProtoManagerPermission_ROLE_TRADER_READ                    ProtoManagerPermission = 1
	ProtoManagerPermission_ROLE_TRADER_CREATE                  ProtoManagerPermission = 2
	ProtoManagerPermission_ROLE_TRADER_EDIT                    ProtoManagerPermission = 3
	ProtoManagerPermission_ROLE_TRADER_DELETE                  ProtoManagerPermission = 4
	ProtoManagerPermission_ROLE_TRADER_CASHIER                 ProtoManagerPermission = 5
	ProtoManagerPermission_ROLE_TRADER_CHANGE_PASSWORD         ProtoManagerPermission = 6
	ProtoManagerPermission_ROLE_TRADER_VIEWALL                 ProtoManagerPermission = 7
	ProtoManagerPermission_ROLE_TRADER_PHONE_TRADING           ProtoManagerPermission = 8
	ProtoManagerPermission_ROLE_TRADER_BONUS_CASHIER           ProtoManagerPermission = 9
	ProtoManagerPermission_ROLE_MANAGER_READ                   ProtoManagerPermission = 10
	ProtoManagerPermission_ROLE_MANAGER_CREATE                 ProtoManagerPermission = 11
	ProtoManagerPermission_ROLE_MANAGER_EDIT                   ProtoManagerPermission = 12
	ProtoManagerPermission_ROLE_MANAGER_DELETE                 ProtoManagerPermission = 13
	ProtoManagerPermission_ROLE_MANAGER_CHANGE_PASSWORD        ProtoManagerPermission = 14
	ProtoManagerPermission_ROLE_FORCE_TRADING                  ProtoManagerPermission = 15
	ProtoManagerPermission_ROLE_GROUP_READ                     ProtoManagerPermission = 20
	ProtoManagerPermission_ROLE_GROUP_CREATE                   ProtoManagerPermission = 21
	ProtoManagerPermission_ROLE_GROUP_EDIT                     ProtoManagerPermission = 22
	ProtoManagerPermission_ROLE_GROUP_DELETE                   ProtoManagerPermission = 23
	ProtoManagerPermission_ROLE_GROUPS_SUPERVISOR              ProtoManagerPermission = 24
	ProtoManagerPermission_ROLE_MANAGERS_SUPERVISOR            ProtoManagerPermission = 25
	ProtoManagerPermission_ROLE_PRICE_STREAM_EDIT              ProtoManagerPermission = 32
	ProtoManagerPermission_ROLE_SYMBOL_EDIT                    ProtoManagerPermission = 41
	ProtoManagerPermission_ROLE_SETTINGS_READ                  ProtoManagerPermission = 50
	ProtoManagerPermission_ROLE_SETTINGS_EDIT                  ProtoManagerPermission = 51
	ProtoManagerPermission_ROLE_HISTORICAL_DATA_READ           ProtoManagerPermission = 100
	ProtoManagerPermission_ROLE_HISTORICAL_DATA_IMPORT         ProtoManagerPermission = 101
	ProtoManagerPermission_ROLE_HISTORICAL_DATA_EXPORT         ProtoManagerPermission = 102
	ProtoManagerPermission_ROLE_HISTORICAL_DATA_ADD_BAR        ProtoManagerPermission = 103
	ProtoManagerPermission_ROLE_HISTORICAL_DATA_EDIT_BAR       ProtoManagerPermission = 104
	ProtoManagerPermission_ROLE_HISTORICAL_DATA_DELETE_BAR     ProtoManagerPermission = 105
	ProtoManagerPermission_ROLE_REPORT_READ                    ProtoManagerPermission = 110
	ProtoManagerPermission_ROLE_REPORT_EXPORT                  ProtoManagerPermission = 111
	ProtoManagerPermission_ROLE_JOURNAL_READ                   ProtoManagerPermission = 120
	ProtoManagerPermission_ROLE_JOURNAL_EXPORT                 ProtoManagerPermission = 121
	ProtoManagerPermission_ROLE_ORDER_READ                     ProtoManagerPermission = 130
	ProtoManagerPermission_ROLE_ORDER_EXPORT                   ProtoManagerPermission = 131
	ProtoManagerPermission_ROLE_POSITION_READ                  ProtoManagerPermission = 140
	ProtoManagerPermission_ROLE_POSITION_EXPORT                ProtoManagerPermission = 141
	ProtoManagerPermission_ROLE_TRADING_HISTORY_READ           ProtoManagerPermission = 150
	ProtoManagerPermission_ROLE_TRADING_HISTORY_EXPORT         ProtoManagerPermission = 151
	ProtoManagerPermission_ROLE_LIQUIDITY_READ                 ProtoManagerPermission = 160
	ProtoManagerPermission_ROLE_LIQUIDITY_EDIT                 ProtoManagerPermission = 161
	ProtoManagerPermission_ROLE_EXPOSURE_READ                  ProtoManagerPermission = 170
	ProtoManagerPermission_ROLE_INTEGRATION_READ               ProtoManagerPermission = 180
	ProtoManagerPermission_ROLE_ASSET_CLASS_EDIT               ProtoManagerPermission = 181
	ProtoManagerPermission_ROLE_PB_SETTING_READ                ProtoManagerPermission = 190
	ProtoManagerPermission_ROLE_PB_SETTING_WRITE               ProtoManagerPermission = 191
	ProtoManagerPermission_ROLE_PRICE_FILTER_EDIT              ProtoManagerPermission = 194
	ProtoManagerPermission_ROLE_TRADER_INTRODUCING_BROKER      ProtoManagerPermission = 195
	ProtoManagerPermission_ROLE_GIVE_UP_REPORT_READ            ProtoManagerPermission = 196
	ProtoManagerPermission_ROLE_GUI_SETTINGS_EDIT              ProtoManagerPermission = 197
	ProtoManagerPermission_ROLE_REPORT                         ProtoManagerPermission = 198
	ProtoManagerPermission_ROLE_DEALING                        ProtoManagerPermission = 199
	ProtoManagerPermission_ROLE_ENTITY_BOOK_READ               ProtoManagerPermission = 201
	ProtoManagerPermission_ROLE_FUNNEL_READ                    ProtoManagerPermission = 202
	ProtoManagerPermission_ROLE_FUNNEL_EDIT                    ProtoManagerPermission = 203
	ProtoManagerPermission_ROLE_HOOK_READ                      ProtoManagerPermission = 204
	ProtoManagerPermission_ROLE_HOOK_EDIT                      ProtoManagerPermission = 205
	ProtoManagerPermission_ROLE_WITHDRAWAL_REQUEST_READ        ProtoManagerPermission = 206
	ProtoManagerPermission_ROLE_WITHDRAWAL_REQUEST_EDIT        ProtoManagerPermission = 207
	ProtoManagerPermission_ROLE_KYC_READ                       ProtoManagerPermission = 208
	ProtoManagerPermission_ROLE_KYC_EDIT                       ProtoManagerPermission = 209
	ProtoManagerPermission_ROLE_MARKETING_LINKS_READ           ProtoManagerPermission = 210
	ProtoManagerPermission_ROLE_MARKETING_LINKS_EDIT           ProtoManagerPermission = 211
	ProtoManagerPermission_ROLE_USER_EXPORT                    ProtoManagerPermission = 212
	ProtoManagerPermission_ROLE_USER_DELETE                    ProtoManagerPermission = 213
	ProtoManagerPermission_ROLE_REGIONS_ADMIN                  ProtoManagerPermission = 214
	ProtoManagerPermission_ROLE_COPY_ADMIN                     ProtoManagerPermission = 215
	ProtoManagerPermission_ROLE_LIVECHAT                       ProtoManagerPermission = 216
	ProtoManagerPermission_ROLE_CTID_NOTIFICATIONS             ProtoManagerPermission = 217
	ProtoManagerPermission_ROLE_PROFILES_EDIT                  ProtoManagerPermission = 218
	ProtoManagerPermission_ROLE_MARKETING_SEND_PUSH            ProtoManagerPermission = 219
	ProtoManagerPermission_ROLE_MARKETING_SEND_BLOTTER_MESSAGE ProtoManagerPermission = 220
)

// Enum value maps for ProtoManagerPermission.
var (
	ProtoManagerPermission_name = map[int32]string{
		1:   "ROLE_TRADER_READ",
		2:   "ROLE_TRADER_CREATE",
		3:   "ROLE_TRADER_EDIT",
		4:   "ROLE_TRADER_DELETE",
		5:   "ROLE_TRADER_CASHIER",
		6:   "ROLE_TRADER_CHANGE_PASSWORD",
		7:   "ROLE_TRADER_VIEWALL",
		8:   "ROLE_TRADER_PHONE_TRADING",
		9:   "ROLE_TRADER_BONUS_CASHIER",
		10:  "ROLE_MANAGER_READ",
		11:  "ROLE_MANAGER_CREATE",
		12:  "ROLE_MANAGER_EDIT",
		13:  "ROLE_MANAGER_DELETE",
		14:  "ROLE_MANAGER_CHANGE_PASSWORD",
		15:  "ROLE_FORCE_TRADING",
		20:  "ROLE_GROUP_READ",
		21:  "ROLE_GROUP_CREATE",
		22:  "ROLE_GROUP_EDIT",
		23:  "ROLE_GROUP_DELETE",
		24:  "ROLE_GROUPS_SUPERVISOR",
		25:  "ROLE_MANAGERS_SUPERVISOR",
		32:  "ROLE_PRICE_STREAM_EDIT",
		41:  "ROLE_SYMBOL_EDIT",
		50:  "ROLE_SETTINGS_READ",
		51:  "ROLE_SETTINGS_EDIT",
		100: "ROLE_HISTORICAL_DATA_READ",
		101: "ROLE_HISTORICAL_DATA_IMPORT",
		102: "ROLE_HISTORICAL_DATA_EXPORT",
		103: "ROLE_HISTORICAL_DATA_ADD_BAR",
		104: "ROLE_HISTORICAL_DATA_EDIT_BAR",
		105: "ROLE_HISTORICAL_DATA_DELETE_BAR",
		110: "ROLE_REPORT_READ",
		111: "ROLE_REPORT_EXPORT",
		120: "ROLE_JOURNAL_READ",
		121: "ROLE_JOURNAL_EXPORT",
		130: "ROLE_ORDER_READ",
		131: "ROLE_ORDER_EXPORT",
		140: "ROLE_POSITION_READ",
		141: "ROLE_POSITION_EXPORT",
		150: "ROLE_TRADING_HISTORY_READ",
		151: "ROLE_TRADING_HISTORY_EXPORT",
		160: "ROLE_LIQUIDITY_READ",
		161: "ROLE_LIQUIDITY_EDIT",
		170: "ROLE_EXPOSURE_READ",
		180: "ROLE_INTEGRATION_READ",
		181: "ROLE_ASSET_CLASS_EDIT",
		190: "ROLE_PB_SETTING_READ",
		191: "ROLE_PB_SETTING_WRITE",
		194: "ROLE_PRICE_FILTER_EDIT",
		195: "ROLE_TRADER_INTRODUCING_BROKER",
		196: "ROLE_GIVE_UP_REPORT_READ",
		197: "ROLE_GUI_SETTINGS_EDIT",
		198: "ROLE_REPORT",
		199: "ROLE_DEALING",
		201: "ROLE_ENTITY_BOOK_READ",
		202: "ROLE_FUNNEL_READ",
		203: "ROLE_FUNNEL_EDIT",
		204: "ROLE_HOOK_READ",
		205: "ROLE_HOOK_EDIT",
		206: "ROLE_WITHDRAWAL_REQUEST_READ",
		207: "ROLE_WITHDRAWAL_REQUEST_EDIT",
		208: "ROLE_KYC_READ",
		209: "ROLE_KYC_EDIT",
		210: "ROLE_MARKETING_LINKS_READ",
		211: "ROLE_MARKETING_LINKS_EDIT",
		212: "ROLE_USER_EXPORT",
		213: "ROLE_USER_DELETE",
		214: "ROLE_REGIONS_ADMIN",
		215: "ROLE_COPY_ADMIN",
		216: "ROLE_LIVECHAT",
		217: "ROLE_CTID_NOTIFICATIONS",
		218: "ROLE_PROFILES_EDIT",
		219: "ROLE_MARKETING_SEND_PUSH",
		220: "ROLE_MARKETING_SEND_BLOTTER_MESSAGE",
	}
	ProtoManagerPermission_value = map[string]int32{
		"ROLE_TRADER_READ":                    1,
		"ROLE_TRADER_CREATE":                  2,
		"ROLE_TRADER_EDIT":                    3,
		"ROLE_TRADER_DELETE":                  4,
		"ROLE_TRADER_CASHIER":                 5,
		"ROLE_TRADER_CHANGE_PASSWORD":         6,
		"ROLE_TRADER_VIEWALL":                 7,
		"ROLE_TRADER_PHONE_TRADING":           8,
		"ROLE_TRADER_BONUS_CASHIER":           9,
		"ROLE_MANAGER_READ":                   10,
		"ROLE_MANAGER_CREATE":                 11,
		"ROLE_MANAGER_EDIT":                   12,
		"ROLE_MANAGER_DELETE":                 13,
		"ROLE_MANAGER_CHANGE_PASSWORD":        14,
		"ROLE_FORCE_TRADING":                  15,
		"ROLE_GROUP_READ":                     20,
		"ROLE_GROUP_CREATE":                   21,
		"ROLE_GROUP_EDIT":                     22,
		"ROLE_GROUP_DELETE":                   23,
		"ROLE_GROUPS_SUPERVISOR":              24,
		"ROLE_MANAGERS_SUPERVISOR":            25,
		"ROLE_PRICE_STREAM_EDIT":              32,
		"ROLE_SYMBOL_EDIT":                    41,
		"ROLE_SETTINGS_READ":                  50,
		"ROLE_SETTINGS_EDIT":                  51,
		"ROLE_HISTORICAL_DATA_READ":           100,
		"ROLE_HISTORICAL_DATA_IMPORT":         101,
		"ROLE_HISTORICAL_DATA_EXPORT":         102,
		"ROLE_HISTORICAL_DATA_ADD_BAR":        103,
		"ROLE_HISTORICAL_DATA_EDIT_BAR":       104,
		"ROLE_HISTORICAL_DATA_DELETE_BAR":     105,
		"ROLE_REPORT_READ":                    110,
		"ROLE_REPORT_EXPORT":                  111,
		"ROLE_JOURNAL_READ":                   120,
		"ROLE_JOURNAL_EXPORT":                 121,
		"ROLE_ORDER_READ":                     130,
		"ROLE_ORDER_EXPORT":                   131,
		"ROLE_POSITION_READ":                  140,
		"ROLE_POSITION_EXPORT":                141,
		"ROLE_TRADING_HISTORY_READ":           150,
		"ROLE_TRADING_HISTORY_EXPORT":         151,
		"ROLE_LIQUIDITY_READ":                 160,
		"ROLE_LIQUIDITY_EDIT":                 161,
		"ROLE_EXPOSURE_READ":                  170,
		"ROLE_INTEGRATION_READ":               180,
		"ROLE_ASSET_CLASS_EDIT":               181,
		"ROLE_PB_SETTING_READ":                190,
		"ROLE_PB_SETTING_WRITE":               191,
		"ROLE_PRICE_FILTER_EDIT":              194,
		"ROLE_TRADER_INTRODUCING_BROKER":      195,
		"ROLE_GIVE_UP_REPORT_READ":            196,
		"ROLE_GUI_SETTINGS_EDIT":              197,
		"ROLE_REPORT":                         198,
		"ROLE_DEALING":                        199,
		"ROLE_ENTITY_BOOK_READ":               201,
		"ROLE_FUNNEL_READ":                    202,
		"ROLE_FUNNEL_EDIT":                    203,
		"ROLE_HOOK_READ":                      204,
		"ROLE_HOOK_EDIT":                      205,
		"ROLE_WITHDRAWAL_REQUEST_READ":        206,
		"ROLE_WITHDRAWAL_REQUEST_EDIT":        207,
		"ROLE_KYC_READ":                       208,
		"ROLE_KYC_EDIT":                       209,
		"ROLE_MARKETING_LINKS_READ":           210,
		"ROLE_MARKETING_LINKS_EDIT":           211,
		"ROLE_USER_EXPORT":                    212,
		"ROLE_USER_DELETE":                    213,
		"ROLE_REGIONS_ADMIN":                  214,
		"ROLE_COPY_ADMIN":                     215,
		"ROLE_LIVECHAT":                       216,
		"ROLE_CTID_NOTIFICATIONS":             217,
		"ROLE_PROFILES_EDIT":                  218,
		"ROLE_MARKETING_SEND_PUSH":            219,
		"ROLE_MARKETING_SEND_BLOTTER_MESSAGE": 220,
	}
)

func (x ProtoManagerPermission) Enum() *ProtoManagerPermission {
	p := new(ProtoManagerPermission)
	*p = x
	return p
}

func (x ProtoManagerPermission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoManagerPermission) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[28].Descriptor()
}

func (ProtoManagerPermission) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[28]
}

func (x ProtoManagerPermission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoManagerPermission) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoManagerPermission(num)
	return nil
}

// Deprecated: Use ProtoManagerPermission.Descriptor instead.
func (ProtoManagerPermission) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{28}
}

// Execution type ENUM
type ProtoExecutionType int32

const (
	ProtoExecutionType_ORDER_ACCEPTED         ProtoExecutionType = 2
	ProtoExecutionType_ORDER_FILLED           ProtoExecutionType = 3
	ProtoExecutionType_ORDER_REPLACED         ProtoExecutionType = 4
	ProtoExecutionType_ORDER_CANCELLED        ProtoExecutionType = 5
	ProtoExecutionType_ORDER_EXPIRED          ProtoExecutionType = 6
	ProtoExecutionType_ORDER_REJECTED         ProtoExecutionType = 7
	ProtoExecutionType_ORDER_CANCEL_REJECTED  ProtoExecutionType = 8
	ProtoExecutionType_SWAP                   ProtoExecutionType = 9
	ProtoExecutionType_DEPOSIT_WITHDRAW       ProtoExecutionType = 10
	ProtoExecutionType_ORDER_PARTIAL_FILL     ProtoExecutionType = 11
	ProtoExecutionType_BONUS_DEPOSIT_WITHDRAW ProtoExecutionType = 12
)

// Enum value maps for ProtoExecutionType.
var (
	ProtoExecutionType_name = map[int32]string{
		2:  "ORDER_ACCEPTED",
		3:  "ORDER_FILLED",
		4:  "ORDER_REPLACED",
		5:  "ORDER_CANCELLED",
		6:  "ORDER_EXPIRED",
		7:  "ORDER_REJECTED",
		8:  "ORDER_CANCEL_REJECTED",
		9:  "SWAP",
		10: "DEPOSIT_WITHDRAW",
		11: "ORDER_PARTIAL_FILL",
		12: "BONUS_DEPOSIT_WITHDRAW",
	}
	ProtoExecutionType_value = map[string]int32{
		"ORDER_ACCEPTED":         2,
		"ORDER_FILLED":           3,
		"ORDER_REPLACED":         4,
		"ORDER_CANCELLED":        5,
		"ORDER_EXPIRED":          6,
		"ORDER_REJECTED":         7,
		"ORDER_CANCEL_REJECTED":  8,
		"SWAP":                   9,
		"DEPOSIT_WITHDRAW":       10,
		"ORDER_PARTIAL_FILL":     11,
		"BONUS_DEPOSIT_WITHDRAW": 12,
	}
)

func (x ProtoExecutionType) Enum() *ProtoExecutionType {
	p := new(ProtoExecutionType)
	*p = x
	return p
}

func (x ProtoExecutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoExecutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[29].Descriptor()
}

func (ProtoExecutionType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[29]
}

func (x ProtoExecutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoExecutionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoExecutionType(num)
	return nil
}

// Deprecated: Use ProtoExecutionType.Descriptor instead.
func (ProtoExecutionType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{29}
}

// Asset type ENUM
type ProtoAssetType int32

const (
	ProtoAssetType_PROTO_FOREX     ProtoAssetType = 1
	ProtoAssetType_PROTO_METALS    ProtoAssetType = 2
	ProtoAssetType_PROTO_INDICES   ProtoAssetType = 3
	ProtoAssetType_PROTO_COMMODITY ProtoAssetType = 4
	ProtoAssetType_PROTO_STOCK     ProtoAssetType = 5
	ProtoAssetType_PROTO_CRYPTO    ProtoAssetType = 6
)

// Enum value maps for ProtoAssetType.
var (
	ProtoAssetType_name = map[int32]string{
		1: "PROTO_FOREX",
		2: "PROTO_METALS",
		3: "PROTO_INDICES",
		4: "PROTO_COMMODITY",
		5: "PROTO_STOCK",
		6: "PROTO_CRYPTO",
	}
	ProtoAssetType_value = map[string]int32{
		"PROTO_FOREX":     1,
		"PROTO_METALS":    2,
		"PROTO_INDICES":   3,
		"PROTO_COMMODITY": 4,
		"PROTO_STOCK":     5,
		"PROTO_CRYPTO":    6,
	}
)

func (x ProtoAssetType) Enum() *ProtoAssetType {
	p := new(ProtoAssetType)
	*p = x
	return p
}

func (x ProtoAssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoAssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[30].Descriptor()
}

func (ProtoAssetType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[30]
}

func (x ProtoAssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoAssetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoAssetType(num)
	return nil
}

// Deprecated: Use ProtoAssetType.Descriptor instead.
func (ProtoAssetType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{30}
}

// Deal status type ENUM
type ProtoDealStatus int32

const (
	ProtoDealStatus_FILLED              ProtoDealStatus = 2
	ProtoDealStatus_PARTIALLY_FILLED    ProtoDealStatus = 3
	ProtoDealStatus_REJECTED            ProtoDealStatus = 4
	ProtoDealStatus_INTERNALLY_REJECTED ProtoDealStatus = 5
	ProtoDealStatus_ERROR               ProtoDealStatus = 6
	ProtoDealStatus_MISSED              ProtoDealStatus = 7
)

// Enum value maps for ProtoDealStatus.
var (
	ProtoDealStatus_name = map[int32]string{
		2: "FILLED",
		3: "PARTIALLY_FILLED",
		4: "REJECTED",
		5: "INTERNALLY_REJECTED",
		6: "ERROR",
		7: "MISSED",
	}
	ProtoDealStatus_value = map[string]int32{
		"FILLED":              2,
		"PARTIALLY_FILLED":    3,
		"REJECTED":            4,
		"INTERNALLY_REJECTED": 5,
		"ERROR":               6,
		"MISSED":              7,
	}
)

func (x ProtoDealStatus) Enum() *ProtoDealStatus {
	p := new(ProtoDealStatus)
	*p = x
	return p
}

func (x ProtoDealStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoDealStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[31].Descriptor()
}

func (ProtoDealStatus) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[31]
}

func (x ProtoDealStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoDealStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoDealStatus(num)
	return nil
}

// Deprecated: Use ProtoDealStatus.Descriptor instead.
func (ProtoDealStatus) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{31}
}

// Deal type ENUM
type ProtoDealType int32

const (
	ProtoDealType_MARKET_DEAL ProtoDealType = 1
	ProtoDealType_LIMIT_DEAL  ProtoDealType = 2
)

// Enum value maps for ProtoDealType.
var (
	ProtoDealType_name = map[int32]string{
		1: "MARKET_DEAL",
		2: "LIMIT_DEAL",
	}
	ProtoDealType_value = map[string]int32{
		"MARKET_DEAL": 1,
		"LIMIT_DEAL":  2,
	}
)

func (x ProtoDealType) Enum() *ProtoDealType {
	p := new(ProtoDealType)
	*p = x
	return p
}

func (x ProtoDealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoDealType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[32].Descriptor()
}

func (ProtoDealType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[32]
}

func (x ProtoDealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoDealType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoDealType(num)
	return nil
}

// Deprecated: Use ProtoDealType.Descriptor instead.
func (ProtoDealType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{32}
}

// Quote type ENUM
type ProtoQuoteType int32

const (
	ProtoQuoteType_BID ProtoQuoteType = 1
	ProtoQuoteType_ASK ProtoQuoteType = 2
)

// Enum value maps for ProtoQuoteType.
var (
	ProtoQuoteType_name = map[int32]string{
		1: "BID",
		2: "ASK",
	}
	ProtoQuoteType_value = map[string]int32{
		"BID": 1,
		"ASK": 2,
	}
)

func (x ProtoQuoteType) Enum() *ProtoQuoteType {
	p := new(ProtoQuoteType)
	*p = x
	return p
}

func (x ProtoQuoteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoQuoteType) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[33].Descriptor()
}

func (ProtoQuoteType) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[33]
}

func (x ProtoQuoteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoQuoteType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoQuoteType(num)
	return nil
}

// Deprecated: Use ProtoQuoteType.Descriptor instead.
func (ProtoQuoteType) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{33}
}

// Manual execution reason (why Order was sent for manual execution) ENUM
type ProtoManualDealReason int32

const (
	ProtoManualDealReason_MANUAL_DEAL_REASON_ALWAYS_MANUAL     ProtoManualDealReason = 1
	ProtoManualDealReason_MANUAL_DEAL_REASON_VOLUME            ProtoManualDealReason = 2
	ProtoManualDealReason_MANUAL_DEAL_REASON_MAX_GAP_TOLERANCE ProtoManualDealReason = 3
	ProtoManualDealReason_MANUAL_DEAL_REASON_EMPTY_DOM         ProtoManualDealReason = 4
)

// Enum value maps for ProtoManualDealReason.
var (
	ProtoManualDealReason_name = map[int32]string{
		1: "MANUAL_DEAL_REASON_ALWAYS_MANUAL",
		2: "MANUAL_DEAL_REASON_VOLUME",
		3: "MANUAL_DEAL_REASON_MAX_GAP_TOLERANCE",
		4: "MANUAL_DEAL_REASON_EMPTY_DOM",
	}
	ProtoManualDealReason_value = map[string]int32{
		"MANUAL_DEAL_REASON_ALWAYS_MANUAL":     1,
		"MANUAL_DEAL_REASON_VOLUME":            2,
		"MANUAL_DEAL_REASON_MAX_GAP_TOLERANCE": 3,
		"MANUAL_DEAL_REASON_EMPTY_DOM":         4,
	}
)

func (x ProtoManualDealReason) Enum() *ProtoManualDealReason {
	p := new(ProtoManualDealReason)
	*p = x
	return p
}

func (x ProtoManualDealReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoManualDealReason) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[34].Descriptor()
}

func (ProtoManualDealReason) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[34]
}

func (x ProtoManualDealReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoManualDealReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoManualDealReason(num)
	return nil
}

// Deprecated: Use ProtoManualDealReason.Descriptor instead.
func (ProtoManualDealReason) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{34}
}

// Withdrawal Request type ENUM
type ProtoRequestStatus int32

const (
	ProtoRequestStatus_NEW       ProtoRequestStatus = 0
	ProtoRequestStatus_APPROVED  ProtoRequestStatus = 1
	ProtoRequestStatus_DECLINED  ProtoRequestStatus = 2
	ProtoRequestStatus_CANCELLED ProtoRequestStatus = 3
)

// Enum value maps for ProtoRequestStatus.
var (
	ProtoRequestStatus_name = map[int32]string{
		0: "NEW",
		1: "APPROVED",
		2: "DECLINED",
		3: "CANCELLED",
	}
	ProtoRequestStatus_value = map[string]int32{
		"NEW":       0,
		"APPROVED":  1,
		"DECLINED":  2,
		"CANCELLED": 3,
	}
)

func (x ProtoRequestStatus) Enum() *ProtoRequestStatus {
	p := new(ProtoRequestStatus)
	*p = x
	return p
}

func (x ProtoRequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoRequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[35].Descriptor()
}

func (ProtoRequestStatus) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[35]
}

func (x ProtoRequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoRequestStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoRequestStatus(num)
	return nil
}

// Deprecated: Use ProtoRequestStatus.Descriptor instead.
func (ProtoRequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{35}
}

// Limited Risk types ENUM
type ProtoLimitedRiskMarginCalculationStrategy int32

const (
	ProtoLimitedRiskMarginCalculationStrategy_ACCORDING_TO_LEVERAGE         ProtoLimitedRiskMarginCalculationStrategy = 0
	ProtoLimitedRiskMarginCalculationStrategy_ACCORDING_TO_GSL              ProtoLimitedRiskMarginCalculationStrategy = 1
	ProtoLimitedRiskMarginCalculationStrategy_ACCORDING_TO_GSL_AND_LEVERAGE ProtoLimitedRiskMarginCalculationStrategy = 2
)

// Enum value maps for ProtoLimitedRiskMarginCalculationStrategy.
var (
	ProtoLimitedRiskMarginCalculationStrategy_name = map[int32]string{
		0: "ACCORDING_TO_LEVERAGE",
		1: "ACCORDING_TO_GSL",
		2: "ACCORDING_TO_GSL_AND_LEVERAGE",
	}
	ProtoLimitedRiskMarginCalculationStrategy_value = map[string]int32{
		"ACCORDING_TO_LEVERAGE":         0,
		"ACCORDING_TO_GSL":              1,
		"ACCORDING_TO_GSL_AND_LEVERAGE": 2,
	}
)

func (x ProtoLimitedRiskMarginCalculationStrategy) Enum() *ProtoLimitedRiskMarginCalculationStrategy {
	p := new(ProtoLimitedRiskMarginCalculationStrategy)
	*p = x
	return p
}

func (x ProtoLimitedRiskMarginCalculationStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoLimitedRiskMarginCalculationStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[36].Descriptor()
}

func (ProtoLimitedRiskMarginCalculationStrategy) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[36]
}

func (x ProtoLimitedRiskMarginCalculationStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoLimitedRiskMarginCalculationStrategy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoLimitedRiskMarginCalculationStrategy(num)
	return nil
}

// Deprecated: Use ProtoLimitedRiskMarginCalculationStrategy.Descriptor instead.
func (ProtoLimitedRiskMarginCalculationStrategy) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{36}
}

// Action on Manual Deal timeout ENUM
type ProtoManualDealTimeoutAction int32

const (
	ProtoManualDealTimeoutAction_REJECT_RESET ProtoManualDealTimeoutAction = 0
	ProtoManualDealTimeoutAction_EXECUTE      ProtoManualDealTimeoutAction = 1
)

// Enum value maps for ProtoManualDealTimeoutAction.
var (
	ProtoManualDealTimeoutAction_name = map[int32]string{
		0: "REJECT_RESET",
		1: "EXECUTE",
	}
	ProtoManualDealTimeoutAction_value = map[string]int32{
		"REJECT_RESET": 0,
		"EXECUTE":      1,
	}
)

func (x ProtoManualDealTimeoutAction) Enum() *ProtoManualDealTimeoutAction {
	p := new(ProtoManualDealTimeoutAction)
	*p = x
	return p
}

func (x ProtoManualDealTimeoutAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoManualDealTimeoutAction) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[37].Descriptor()
}

func (ProtoManualDealTimeoutAction) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[37]
}

func (x ProtoManualDealTimeoutAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoManualDealTimeoutAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoManualDealTimeoutAction(num)
	return nil
}

// Deprecated: Use ProtoManualDealTimeoutAction.Descriptor instead.
func (ProtoManualDealTimeoutAction) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{37}
}

// Bonus Provider type ENUM
type ProtoBonusOwner int32

const (
	ProtoBonusOwner_MANAGER ProtoBonusOwner = 0
	ProtoBonusOwner_IB      ProtoBonusOwner = 1
)

// Enum value maps for ProtoBonusOwner.
var (
	ProtoBonusOwner_name = map[int32]string{
		0: "MANAGER",
		1: "IB",
	}
	ProtoBonusOwner_value = map[string]int32{
		"MANAGER": 0,
		"IB":      1,
	}
)

func (x ProtoBonusOwner) Enum() *ProtoBonusOwner {
	p := new(ProtoBonusOwner)
	*p = x
	return p
}

func (x ProtoBonusOwner) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoBonusOwner) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[38].Descriptor()
}

func (ProtoBonusOwner) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[38]
}

func (x ProtoBonusOwner) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoBonusOwner) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoBonusOwner(num)
	return nil
}

// Deprecated: Use ProtoBonusOwner.Descriptor instead.
func (ProtoBonusOwner) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{38}
}

// Execution Policy ENUM
type ProtoExecutionPolicy int32

const (
	ProtoExecutionPolicy_BOOKA                ProtoExecutionPolicy = 1
	ProtoExecutionPolicy_BOOKB                ProtoExecutionPolicy = 2
	ProtoExecutionPolicy_BOOKA_WITH_CONDITION ProtoExecutionPolicy = 3
)

// Enum value maps for ProtoExecutionPolicy.
var (
	ProtoExecutionPolicy_name = map[int32]string{
		1: "BOOKA",
		2: "BOOKB",
		3: "BOOKA_WITH_CONDITION",
	}
	ProtoExecutionPolicy_value = map[string]int32{
		"BOOKA":                1,
		"BOOKB":                2,
		"BOOKA_WITH_CONDITION": 3,
	}
)

func (x ProtoExecutionPolicy) Enum() *ProtoExecutionPolicy {
	p := new(ProtoExecutionPolicy)
	*p = x
	return p
}

func (x ProtoExecutionPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoExecutionPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[39].Descriptor()
}

func (ProtoExecutionPolicy) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[39]
}

func (x ProtoExecutionPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoExecutionPolicy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoExecutionPolicy(num)
	return nil
}

// Deprecated: Use ProtoExecutionPolicy.Descriptor instead.
func (ProtoExecutionPolicy) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{39}
}

// Trendbars period ENUM
type ProtoTrendbarPeriod int32

const (
	ProtoTrendbarPeriod_M1  ProtoTrendbarPeriod = 1
	ProtoTrendbarPeriod_M2  ProtoTrendbarPeriod = 2
	ProtoTrendbarPeriod_M3  ProtoTrendbarPeriod = 3
	ProtoTrendbarPeriod_M4  ProtoTrendbarPeriod = 4
	ProtoTrendbarPeriod_M5  ProtoTrendbarPeriod = 5
	ProtoTrendbarPeriod_M10 ProtoTrendbarPeriod = 6
	ProtoTrendbarPeriod_M15 ProtoTrendbarPeriod = 7
	ProtoTrendbarPeriod_M30 ProtoTrendbarPeriod = 8
	ProtoTrendbarPeriod_H1  ProtoTrendbarPeriod = 9
	ProtoTrendbarPeriod_H4  ProtoTrendbarPeriod = 10
	ProtoTrendbarPeriod_H12 ProtoTrendbarPeriod = 11
	ProtoTrendbarPeriod_D1  ProtoTrendbarPeriod = 12
	ProtoTrendbarPeriod_W1  ProtoTrendbarPeriod = 13
	ProtoTrendbarPeriod_MN1 ProtoTrendbarPeriod = 14
)

// Enum value maps for ProtoTrendbarPeriod.
var (
	ProtoTrendbarPeriod_name = map[int32]string{
		1:  "M1",
		2:  "M2",
		3:  "M3",
		4:  "M4",
		5:  "M5",
		6:  "M10",
		7:  "M15",
		8:  "M30",
		9:  "H1",
		10: "H4",
		11: "H12",
		12: "D1",
		13: "W1",
		14: "MN1",
	}
	ProtoTrendbarPeriod_value = map[string]int32{
		"M1":  1,
		"M2":  2,
		"M3":  3,
		"M4":  4,
		"M5":  5,
		"M10": 6,
		"M15": 7,
		"M30": 8,
		"H1":  9,
		"H4":  10,
		"H12": 11,
		"D1":  12,
		"W1":  13,
		"MN1": 14,
	}
)

func (x ProtoTrendbarPeriod) Enum() *ProtoTrendbarPeriod {
	p := new(ProtoTrendbarPeriod)
	*p = x
	return p
}

func (x ProtoTrendbarPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoTrendbarPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_CSModelMessages_External_proto_enumTypes[40].Descriptor()
}

func (ProtoTrendbarPeriod) Type() protoreflect.EnumType {
	return &file_CSModelMessages_External_proto_enumTypes[40]
}

func (x ProtoTrendbarPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtoTrendbarPeriod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtoTrendbarPeriod(num)
	return nil
}

// Deprecated: Use ProtoTrendbarPeriod.Descriptor instead.
func (ProtoTrendbarPeriod) EnumDescriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{40}
}

// Trendbar entity
type ProtoTrendbar struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Volume                 *int64                 `protobuf:"varint,3,req,name=volume" json:"volume,omitempty"`                                  // Bar volume in ticks
	Period                 *ProtoTrendbarPeriod   `protobuf:"varint,4,opt,name=period,enum=ProtoTrendbarPeriod,def=1" json:"period,omitempty"`   // Bar period
	Low                    *int64                 `protobuf:"varint,5,opt,name=low" json:"low,omitempty"`                                        // Lowest price for the period
	DeltaOpen              *uint64                `protobuf:"varint,6,opt,name=deltaOpen" json:"deltaOpen,omitempty"`                            // Delta between open and low price. Open = low + deltaOpen
	DeltaClose             *uint64                `protobuf:"varint,7,opt,name=deltaClose" json:"deltaClose,omitempty"`                          // Delta between close and low price. Close = low + deltaClose
	DeltaHigh              *uint64                `protobuf:"varint,8,opt,name=deltaHigh" json:"deltaHigh,omitempty"`                            // Delta between high and low price. High = low + deltaHigh
	UtcTimestampInMinutes  *uint32                `protobuf:"varint,9,opt,name=utcTimestampInMinutes" json:"utcTimestampInMinutes,omitempty"`    // UNIX timestamp of the bar, in minutes. Equal to the timestamp of the open tick
	UtcLastUpdateTimestamp *uint64                `protobuf:"varint,10,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"` // UNIX timestamp of the last update time in milliseconds
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for ProtoTrendbar fields.
const (
	Default_ProtoTrendbar_Period = ProtoTrendbarPeriod_M1
)

func (x *ProtoTrendbar) Reset() {
	*x = ProtoTrendbar{}
	mi := &file_CSModelMessages_External_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTrendbar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTrendbar) ProtoMessage() {}

func (x *ProtoTrendbar) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTrendbar.ProtoReflect.Descriptor instead.
func (*ProtoTrendbar) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{0}
}

func (x *ProtoTrendbar) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoTrendbar) GetPeriod() ProtoTrendbarPeriod {
	if x != nil && x.Period != nil {
		return *x.Period
	}
	return Default_ProtoTrendbar_Period
}

func (x *ProtoTrendbar) GetLow() int64 {
	if x != nil && x.Low != nil {
		return *x.Low
	}
	return 0
}

func (x *ProtoTrendbar) GetDeltaOpen() uint64 {
	if x != nil && x.DeltaOpen != nil {
		return *x.DeltaOpen
	}
	return 0
}

func (x *ProtoTrendbar) GetDeltaClose() uint64 {
	if x != nil && x.DeltaClose != nil {
		return *x.DeltaClose
	}
	return 0
}

func (x *ProtoTrendbar) GetDeltaHigh() uint64 {
	if x != nil && x.DeltaHigh != nil {
		return *x.DeltaHigh
	}
	return 0
}

func (x *ProtoTrendbar) GetUtcTimestampInMinutes() uint32 {
	if x != nil && x.UtcTimestampInMinutes != nil {
		return *x.UtcTimestampInMinutes
	}
	return 0
}

func (x *ProtoTrendbar) GetUtcLastUpdateTimestamp() uint64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

// Position/Order trading details entity
type ProtoTradeData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SymbolId           *int64                 `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`                       // The unique identifier of the Symbol in specific server environment within cTrader platform
	Volume             *int64                 `protobuf:"varint,2,req,name=volume" json:"volume,omitempty"`                           // Volume in cents
	TradeSide          *ProtoTradeSide        `protobuf:"varint,3,req,name=tradeSide,enum=ProtoTradeSide" json:"tradeSide,omitempty"` // Buy, Sell
	TraderId           *int64                 `protobuf:"varint,4,opt,name=traderId" json:"traderId,omitempty"`                       // ID of the Trader
	OpenTimestamp      *int64                 `protobuf:"varint,7,opt,name=openTimestamp" json:"openTimestamp,omitempty"`             // UNIX timestamp in milliseconds when Position was opened or Order was created
	CloseTimestamp     *int64                 `protobuf:"varint,8,opt,name=closeTimestamp" json:"closeTimestamp,omitempty"`           // UNIX timestamp in milliseconds when Position was closed
	Label              *string                `protobuf:"bytes,12,opt,name=label" json:"label,omitempty"`                             // Text label specified during Order request
	Comment            *string                `protobuf:"bytes,13,opt,name=comment" json:"comment,omitempty"`                         // Comment specified during Order request
	Channel            *string                `protobuf:"bytes,14,opt,name=channel" json:"channel,omitempty"`                         // Channel specified during Order request
	MeasurementUnits   *string                `protobuf:"bytes,15,opt,name=measurementUnits" json:"measurementUnits,omitempty"`       // Measurement units for Symbol
	LotSize            *int64                 `protobuf:"varint,16,opt,name=lotSize" json:"lotSize,omitempty"`                        // Lot size of the Symbol (in cents)
	SpreadBetting      *bool                  `protobuf:"varint,17,opt,name=spreadBetting" json:"spreadBetting,omitempty"`            // TRUE for Spread Setting entities
	Stake              *int64                 `protobuf:"varint,18,opt,name=stake" json:"stake,omitempty"`                            // Stake for Spread Betting
	DesiredVWAP        *float64               `protobuf:"fixed64,19,opt,name=desiredVWAP" json:"desiredVWAP,omitempty"`               // Price desired by the client as an execution price
	GuaranteedStopLoss *bool                  `protobuf:"varint,20,opt,name=guaranteedStopLoss" json:"guaranteedStopLoss,omitempty"`  // If TRUE then Position/Order Stop Loss is Guaranteed Stop Loss (GSL)
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProtoTradeData) Reset() {
	*x = ProtoTradeData{}
	mi := &file_CSModelMessages_External_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTradeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTradeData) ProtoMessage() {}

func (x *ProtoTradeData) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTradeData.ProtoReflect.Descriptor instead.
func (*ProtoTradeData) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{1}
}

func (x *ProtoTradeData) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoTradeData) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoTradeData) GetTradeSide() ProtoTradeSide {
	if x != nil && x.TradeSide != nil {
		return *x.TradeSide
	}
	return ProtoTradeSide_BUY
}

func (x *ProtoTradeData) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoTradeData) GetOpenTimestamp() int64 {
	if x != nil && x.OpenTimestamp != nil {
		return *x.OpenTimestamp
	}
	return 0
}

func (x *ProtoTradeData) GetCloseTimestamp() int64 {
	if x != nil && x.CloseTimestamp != nil {
		return *x.CloseTimestamp
	}
	return 0
}

func (x *ProtoTradeData) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ProtoTradeData) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoTradeData) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ProtoTradeData) GetMeasurementUnits() string {
	if x != nil && x.MeasurementUnits != nil {
		return *x.MeasurementUnits
	}
	return ""
}

func (x *ProtoTradeData) GetLotSize() int64 {
	if x != nil && x.LotSize != nil {
		return *x.LotSize
	}
	return 0
}

func (x *ProtoTradeData) GetSpreadBetting() bool {
	if x != nil && x.SpreadBetting != nil {
		return *x.SpreadBetting
	}
	return false
}

func (x *ProtoTradeData) GetStake() int64 {
	if x != nil && x.Stake != nil {
		return *x.Stake
	}
	return 0
}

func (x *ProtoTradeData) GetDesiredVWAP() float64 {
	if x != nil && x.DesiredVWAP != nil {
		return *x.DesiredVWAP
	}
	return 0
}

func (x *ProtoTradeData) GetGuaranteedStopLoss() bool {
	if x != nil && x.GuaranteedStopLoss != nil {
		return *x.GuaranteedStopLoss
	}
	return false
}

// Position entity
type ProtoPosition struct {
	state                       protoimpl.MessageState   `protogen:"open.v1"`
	PositionId                  *int64                   `protobuf:"varint,1,req,name=positionId" json:"positionId,omitempty"`                                                           // ID of Position
	TradeData                   *ProtoTradeData          `protobuf:"bytes,3,req,name=tradeData" json:"tradeData,omitempty"`                                                              // Position/Order trading details entity
	PositionStatus              *ProtoPositionStatus     `protobuf:"varint,4,req,name=positionStatus,enum=ProtoPositionStatus" json:"positionStatus,omitempty"`                          // Current status of the Position
	Swap                        *int64                   `protobuf:"varint,5,req,name=swap" json:"swap,omitempty"`                                                                       // Total amount of charged Swap on open Position
	Price                       *float64                 `protobuf:"fixed64,6,opt,name=price" json:"price,omitempty"`                                                                    // VWAP price of the Position based on all executions (Deals) linked to the Position
	StopLoss                    *float64                 `protobuf:"fixed64,7,opt,name=stopLoss" json:"stopLoss,omitempty"`                                                              // Current Stop Loss price
	TakeProfit                  *float64                 `protobuf:"fixed64,8,opt,name=takeProfit" json:"takeProfit,omitempty"`                                                          // Current Take Profit price
	UtcLastUpdateTimestamp      *int64                   `protobuf:"varint,10,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`                                  // UNIX timestamp in milliseconds of the last change of the Position, including amend SL/TP of the Position, execution of the related Order, cancel of the related Order, etc
	BookType                    *ProtoBookType           `protobuf:"varint,11,opt,name=bookType,enum=ProtoBookType,def=1" json:"bookType,omitempty"`                                     // Book type
	Commission                  *int64                   `protobuf:"varint,13,opt,name=commission" json:"commission,omitempty"`                                                          // Current unrealized commission related to the Position
	MarginRate                  *float64                 `protobuf:"fixed64,14,opt,name=marginRate" json:"marginRate,omitempty"`                                                         // Rate for used margin computation. Represented as Base/Deposit
	IntroducingBrokerCommission *int64                   `protobuf:"varint,16,opt,name=introducingBrokerCommission" json:"introducingBrokerCommission,omitempty"`                        // Commission of Introducing Broker (IB)
	PocketCommission            *int64                   `protobuf:"varint,17,opt,name=pocketCommission" json:"pocketCommission,omitempty"`                                              // Amount of commission, which Broker should pay to IB for introduced clients
	PocketMarkup                *int64                   `protobuf:"varint,18,opt,name=pocketMarkup" json:"pocketMarkup,omitempty"`                                                      // Amount of markup (in points), which Broker should pay to IB for introduced clients
	MirroringCommission         *int64                   `protobuf:"varint,20,opt,name=mirroringCommission" json:"mirroringCommission,omitempty"`                                        // Amount of unrealized commission related to following of Strategy Provider
	GuaranteedStopLoss          *bool                    `protobuf:"varint,21,opt,name=guaranteedStopLoss" json:"guaranteedStopLoss,omitempty"`                                          // If TRUE then Position's Stop Loss is Guaranteed Stop Loss (GSL)
	UsedMargin                  *uint64                  `protobuf:"varint,23,opt,name=usedMargin" json:"usedMargin,omitempty"`                                                          // Amount of margin used for the Position in deposit currency
	TrailingStopLoss            *bool                    `protobuf:"varint,24,opt,name=trailingStopLoss" json:"trailingStopLoss,omitempty"`                                              // If TRUE then the Trailing Stop Loss is applied
	StopLossTriggerMethod       *ProtoOrderTriggerMethod `protobuf:"varint,25,opt,name=stopLossTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopLossTriggerMethod,omitempty"` // Stop Trigger Method for SL/TP Order
	MoneyDigits                 *uint32                  `protobuf:"varint,30,opt,name=moneyDigits" json:"moneyDigits,omitempty"`                                                        // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects swap, commission, mirroringCommission, usedMargin
	PnlConversionFeeRate        *int32                   `protobuf:"varint,31,opt,name=pnlConversionFeeRate" json:"pnlConversionFeeRate,omitempty"`                                      // Conversion Fee rate applied to the Deal in Trader's deposit Asset when Trader Symbol's quote Asset ID <> Trader's deposit Asset ID
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

// Default values for ProtoPosition fields.
const (
	Default_ProtoPosition_BookType              = ProtoBookType_BOOK_A
	Default_ProtoPosition_StopLossTriggerMethod = ProtoOrderTriggerMethod_TRADE
)

func (x *ProtoPosition) Reset() {
	*x = ProtoPosition{}
	mi := &file_CSModelMessages_External_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPosition) ProtoMessage() {}

func (x *ProtoPosition) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPosition.ProtoReflect.Descriptor instead.
func (*ProtoPosition) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{2}
}

func (x *ProtoPosition) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoPosition) GetTradeData() *ProtoTradeData {
	if x != nil {
		return x.TradeData
	}
	return nil
}

func (x *ProtoPosition) GetPositionStatus() ProtoPositionStatus {
	if x != nil && x.PositionStatus != nil {
		return *x.PositionStatus
	}
	return ProtoPositionStatus_POSITION_STATUS_OPEN
}

func (x *ProtoPosition) GetSwap() int64 {
	if x != nil && x.Swap != nil {
		return *x.Swap
	}
	return 0
}

func (x *ProtoPosition) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ProtoPosition) GetStopLoss() float64 {
	if x != nil && x.StopLoss != nil {
		return *x.StopLoss
	}
	return 0
}

func (x *ProtoPosition) GetTakeProfit() float64 {
	if x != nil && x.TakeProfit != nil {
		return *x.TakeProfit
	}
	return 0
}

func (x *ProtoPosition) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoPosition) GetBookType() ProtoBookType {
	if x != nil && x.BookType != nil {
		return *x.BookType
	}
	return Default_ProtoPosition_BookType
}

func (x *ProtoPosition) GetCommission() int64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *ProtoPosition) GetMarginRate() float64 {
	if x != nil && x.MarginRate != nil {
		return *x.MarginRate
	}
	return 0
}

func (x *ProtoPosition) GetIntroducingBrokerCommission() int64 {
	if x != nil && x.IntroducingBrokerCommission != nil {
		return *x.IntroducingBrokerCommission
	}
	return 0
}

func (x *ProtoPosition) GetPocketCommission() int64 {
	if x != nil && x.PocketCommission != nil {
		return *x.PocketCommission
	}
	return 0
}

func (x *ProtoPosition) GetPocketMarkup() int64 {
	if x != nil && x.PocketMarkup != nil {
		return *x.PocketMarkup
	}
	return 0
}

func (x *ProtoPosition) GetMirroringCommission() int64 {
	if x != nil && x.MirroringCommission != nil {
		return *x.MirroringCommission
	}
	return 0
}

func (x *ProtoPosition) GetGuaranteedStopLoss() bool {
	if x != nil && x.GuaranteedStopLoss != nil {
		return *x.GuaranteedStopLoss
	}
	return false
}

func (x *ProtoPosition) GetUsedMargin() uint64 {
	if x != nil && x.UsedMargin != nil {
		return *x.UsedMargin
	}
	return 0
}

func (x *ProtoPosition) GetTrailingStopLoss() bool {
	if x != nil && x.TrailingStopLoss != nil {
		return *x.TrailingStopLoss
	}
	return false
}

func (x *ProtoPosition) GetStopLossTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopLossTriggerMethod != nil {
		return *x.StopLossTriggerMethod
	}
	return Default_ProtoPosition_StopLossTriggerMethod
}

func (x *ProtoPosition) GetMoneyDigits() uint32 {
	if x != nil && x.MoneyDigits != nil {
		return *x.MoneyDigits
	}
	return 0
}

func (x *ProtoPosition) GetPnlConversionFeeRate() int32 {
	if x != nil && x.PnlConversionFeeRate != nil {
		return *x.PnlConversionFeeRate
	}
	return 0
}

// Order entity
type ProtoOrder struct {
	state                       protoimpl.MessageState   `protogen:"open.v1"`
	OrderId                     *int64                   `protobuf:"varint,1,req,name=orderId" json:"orderId,omitempty"`                                                                 // ID of the Order
	TradeData                   *ProtoTradeData          `protobuf:"bytes,2,req,name=tradeData" json:"tradeData,omitempty"`                                                              // Detailed Trader's data
	OrderType                   *ProtoOrderType          `protobuf:"varint,3,req,name=orderType,enum=ProtoOrderType" json:"orderType,omitempty"`                                         // Order type
	OrderStatus                 *ProtoOrderStatus        `protobuf:"varint,4,req,name=orderStatus,enum=ProtoOrderStatus" json:"orderStatus,omitempty"`                                   // Order status
	ExpirationTimestamp         *int64                   `protobuf:"varint,6,opt,name=expirationTimestamp" json:"expirationTimestamp,omitempty"`                                         // UNIX timestamp in milliseconds, if the Order has time in force GTD then expiration is specified
	ExecutionPrice              *float64                 `protobuf:"fixed64,9,opt,name=executionPrice" json:"executionPrice,omitempty"`                                                  // Price at which an Order was executed. For Orders with FILLED status
	ExecutedVolume              *int64                   `protobuf:"varint,10,opt,name=executedVolume" json:"executedVolume,omitempty"`                                                  // Part of the volume that was filled
	StopLoss                    *float64                 `protobuf:"fixed64,11,opt,name=stopLoss" json:"stopLoss,omitempty"`                                                             // Absolute Stop Loss price
	TakeProfit                  *float64                 `protobuf:"fixed64,12,opt,name=takeProfit" json:"takeProfit,omitempty"`                                                         // Absolute Take Profit price
	UtcLastUpdateTimestamp      *int64                   `protobuf:"varint,13,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`                                  // UNIX timestamp in milliseconds of the last update of the Order
	BookType                    *ProtoBookType           `protobuf:"varint,14,opt,name=bookType,enum=ProtoBookType,def=1" json:"bookType,omitempty"`                                     // Book type
	Method                      *string                  `protobuf:"bytes,16,opt,name=method" json:"method,omitempty"`                                                                   // Method specified during Order request
	BaseSlippagePrice           *float64                 `protobuf:"fixed64,18,opt,name=baseSlippagePrice" json:"baseSlippagePrice,omitempty"`                                           // Used for Market Range Order with combination of slippageInPoints to specify price range where Order can be executed
	ClosingOrder                *bool                    `protobuf:"varint,20,opt,name=closingOrder" json:"closingOrder,omitempty"`                                                      // If TRUE then the Order is closing part of whole Position. Must have specified positionId
	LimitPrice                  *float64                 `protobuf:"fixed64,21,opt,name=limitPrice" json:"limitPrice,omitempty"`                                                         // Valid only for LIMIT Orders
	StopPrice                   *float64                 `protobuf:"fixed64,22,opt,name=stopPrice" json:"stopPrice,omitempty"`                                                           // Valid only for STOP and STOP_LIMIT Orders
	ClientOrderId               *string                  `protobuf:"bytes,23,opt,name=clientOrderId" json:"clientOrderId,omitempty"`                                                     // Optional ClientOrderId. Max Length = 50 chars
	Commission                  *int64                   `protobuf:"varint,24,opt,name=commission" json:"commission,omitempty"`                                                          // Amount of trading commission
	TimeInForce                 *ProtoTimeInForce        `protobuf:"varint,26,opt,name=timeInForce,enum=ProtoTimeInForce,def=3" json:"timeInForce,omitempty"`                            // Order's time in force. Depends on Order type
	PositionId                  *int64                   `protobuf:"varint,30,opt,name=positionId" json:"positionId,omitempty"`                                                          // ID of Position
	RelativeStopLoss            *int64                   `protobuf:"varint,32,opt,name=relativeStopLoss" json:"relativeStopLoss,omitempty"`                                              // Relative Stop Loss distance. Specifies distance between execution price of the Order and placed Stop Loss
	RelativeTakeProfit          *int64                   `protobuf:"varint,33,opt,name=relativeTakeProfit" json:"relativeTakeProfit,omitempty"`                                          // Relative Take Profit distance. Specifies distance between execution price of the Order and placed Take Profit
	IntroducingBrokerCommission *int64                   `protobuf:"varint,34,opt,name=introducingBrokerCommission" json:"introducingBrokerCommission,omitempty"`                        // Commission of Introducing Broker (IB)
	PocketCommission            *int64                   `protobuf:"varint,35,opt,name=pocketCommission" json:"pocketCommission,omitempty"`                                              // Amount of commission, which Broker should pay to IB for introduced clients
	PocketMarkup                *int64                   `protobuf:"varint,36,opt,name=pocketMarkup" json:"pocketMarkup,omitempty"`                                                      // Amount of markup (in points), which Broker should pay to IB for introduced clients
	MirroringCommission         *int64                   `protobuf:"varint,39,opt,name=mirroringCommission" json:"mirroringCommission,omitempty"`                                        // Amount of unrealized commission related to following of Strategy Provider
	OriginalClientOrderId       *string                  `protobuf:"bytes,40,opt,name=originalClientOrderId" json:"originalClientOrderId,omitempty"`                                     // ClientOrderId specified by Trader
	CheckTolerance              *bool                    `protobuf:"varint,41,opt,name=checkTolerance" json:"checkTolerance,omitempty"`                                                  // If TRUE then tolerance check is applied and Order may be rejected due to significant price change. Applied only for B-book Orders
	Login                       *int64                   `protobuf:"varint,42,opt,name=login" json:"login,omitempty"`                                                                    // Login of the Trader
	Name                        *string                  `protobuf:"bytes,43,opt,name=name" json:"name,omitempty"`                                                                       // Name of the Trader
	LastName                    *string                  `protobuf:"bytes,44,opt,name=lastName" json:"lastName,omitempty"`                                                               // Last name of the Trader
	IsStopOut                   *bool                    `protobuf:"varint,45,opt,name=isStopOut" json:"isStopOut,omitempty"`                                                            // If TRUE then Order was Stopped Out from server's side
	TrailingStopLoss            *bool                    `protobuf:"varint,46,opt,name=trailingStopLoss" json:"trailingStopLoss,omitempty"`                                              // If TRUE then the Trailing Stop Loss is applied to order. Valid for STOP_LOSS_TAKE_PROFIT Order
	CloseWithPID                *int64                   `protobuf:"varint,47,opt,name=closeWithPID" json:"closeWithPID,omitempty"`                                                      // Some number which may be used to aggregate Deals into Positions on the hedged accounts in UI
	StopTriggerMethod           *ProtoOrderTriggerMethod `protobuf:"varint,48,opt,name=stopTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopTriggerMethod,omitempty"`         // Trigger Method for the STOP or the STOP_LIMIT pending Order
	StopLossTriggerMethod       *ProtoOrderTriggerMethod `protobuf:"varint,49,opt,name=stopLossTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopLossTriggerMethod,omitempty"` // Stop Trigger Method for SL/TP Order
	SlippageInPoints            *int32                   `protobuf:"varint,50,opt,name=slippageInPoints" json:"slippageInPoints,omitempty"`                                              // Used for Market Range and STOP_LIMIT Orders to to specify price range were Order can be executed
	DesiredOpenTimestamp        *int64                   `protobuf:"varint,51,opt,name=desiredOpenTimestamp" json:"desiredOpenTimestamp,omitempty"`                                      // UNIX timestamp in milliseconds used to set time of the opening for MARKET_ON_OPEN Orders
	OcoOrderId                  *int64                   `protobuf:"varint,52,opt,name=ocoOrderId" json:"ocoOrderId,omitempty"`                                                          // Link to ID of OCO (one cancels other) Order. OCO Orders is a pair of pending Orders (only STOP, LIMIT and STOP_LIMIT could be linked) Orders where one Order should be cancelled as soon as another Order changes it's status from Accepted to Filled
	MoneyDigits                 *uint32                  `protobuf:"varint,54,opt,name=moneyDigits" json:"moneyDigits,omitempty"`                                                        // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects commission, pocketCommission,mirroringCommission
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

// Default values for ProtoOrder fields.
const (
	Default_ProtoOrder_BookType              = ProtoBookType_BOOK_A
	Default_ProtoOrder_TimeInForce           = ProtoTimeInForce_IMMEDIATE_OR_CANCEL
	Default_ProtoOrder_StopTriggerMethod     = ProtoOrderTriggerMethod_TRADE
	Default_ProtoOrder_StopLossTriggerMethod = ProtoOrderTriggerMethod_TRADE
)

func (x *ProtoOrder) Reset() {
	*x = ProtoOrder{}
	mi := &file_CSModelMessages_External_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOrder) ProtoMessage() {}

func (x *ProtoOrder) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOrder.ProtoReflect.Descriptor instead.
func (*ProtoOrder) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{3}
}

func (x *ProtoOrder) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *ProtoOrder) GetTradeData() *ProtoTradeData {
	if x != nil {
		return x.TradeData
	}
	return nil
}

func (x *ProtoOrder) GetOrderType() ProtoOrderType {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return ProtoOrderType_MARKET
}

func (x *ProtoOrder) GetOrderStatus() ProtoOrderStatus {
	if x != nil && x.OrderStatus != nil {
		return *x.OrderStatus
	}
	return ProtoOrderStatus_ORDER_STATUS_ACCEPTED
}

func (x *ProtoOrder) GetExpirationTimestamp() int64 {
	if x != nil && x.ExpirationTimestamp != nil {
		return *x.ExpirationTimestamp
	}
	return 0
}

func (x *ProtoOrder) GetExecutionPrice() float64 {
	if x != nil && x.ExecutionPrice != nil {
		return *x.ExecutionPrice
	}
	return 0
}

func (x *ProtoOrder) GetExecutedVolume() int64 {
	if x != nil && x.ExecutedVolume != nil {
		return *x.ExecutedVolume
	}
	return 0
}

func (x *ProtoOrder) GetStopLoss() float64 {
	if x != nil && x.StopLoss != nil {
		return *x.StopLoss
	}
	return 0
}

func (x *ProtoOrder) GetTakeProfit() float64 {
	if x != nil && x.TakeProfit != nil {
		return *x.TakeProfit
	}
	return 0
}

func (x *ProtoOrder) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoOrder) GetBookType() ProtoBookType {
	if x != nil && x.BookType != nil {
		return *x.BookType
	}
	return Default_ProtoOrder_BookType
}

func (x *ProtoOrder) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *ProtoOrder) GetBaseSlippagePrice() float64 {
	if x != nil && x.BaseSlippagePrice != nil {
		return *x.BaseSlippagePrice
	}
	return 0
}

func (x *ProtoOrder) GetClosingOrder() bool {
	if x != nil && x.ClosingOrder != nil {
		return *x.ClosingOrder
	}
	return false
}

func (x *ProtoOrder) GetLimitPrice() float64 {
	if x != nil && x.LimitPrice != nil {
		return *x.LimitPrice
	}
	return 0
}

func (x *ProtoOrder) GetStopPrice() float64 {
	if x != nil && x.StopPrice != nil {
		return *x.StopPrice
	}
	return 0
}

func (x *ProtoOrder) GetClientOrderId() string {
	if x != nil && x.ClientOrderId != nil {
		return *x.ClientOrderId
	}
	return ""
}

func (x *ProtoOrder) GetCommission() int64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *ProtoOrder) GetTimeInForce() ProtoTimeInForce {
	if x != nil && x.TimeInForce != nil {
		return *x.TimeInForce
	}
	return Default_ProtoOrder_TimeInForce
}

func (x *ProtoOrder) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoOrder) GetRelativeStopLoss() int64 {
	if x != nil && x.RelativeStopLoss != nil {
		return *x.RelativeStopLoss
	}
	return 0
}

func (x *ProtoOrder) GetRelativeTakeProfit() int64 {
	if x != nil && x.RelativeTakeProfit != nil {
		return *x.RelativeTakeProfit
	}
	return 0
}

func (x *ProtoOrder) GetIntroducingBrokerCommission() int64 {
	if x != nil && x.IntroducingBrokerCommission != nil {
		return *x.IntroducingBrokerCommission
	}
	return 0
}

func (x *ProtoOrder) GetPocketCommission() int64 {
	if x != nil && x.PocketCommission != nil {
		return *x.PocketCommission
	}
	return 0
}

func (x *ProtoOrder) GetPocketMarkup() int64 {
	if x != nil && x.PocketMarkup != nil {
		return *x.PocketMarkup
	}
	return 0
}

func (x *ProtoOrder) GetMirroringCommission() int64 {
	if x != nil && x.MirroringCommission != nil {
		return *x.MirroringCommission
	}
	return 0
}

func (x *ProtoOrder) GetOriginalClientOrderId() string {
	if x != nil && x.OriginalClientOrderId != nil {
		return *x.OriginalClientOrderId
	}
	return ""
}

func (x *ProtoOrder) GetCheckTolerance() bool {
	if x != nil && x.CheckTolerance != nil {
		return *x.CheckTolerance
	}
	return false
}

func (x *ProtoOrder) GetLogin() int64 {
	if x != nil && x.Login != nil {
		return *x.Login
	}
	return 0
}

func (x *ProtoOrder) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoOrder) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *ProtoOrder) GetIsStopOut() bool {
	if x != nil && x.IsStopOut != nil {
		return *x.IsStopOut
	}
	return false
}

func (x *ProtoOrder) GetTrailingStopLoss() bool {
	if x != nil && x.TrailingStopLoss != nil {
		return *x.TrailingStopLoss
	}
	return false
}

func (x *ProtoOrder) GetCloseWithPID() int64 {
	if x != nil && x.CloseWithPID != nil {
		return *x.CloseWithPID
	}
	return 0
}

func (x *ProtoOrder) GetStopTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopTriggerMethod != nil {
		return *x.StopTriggerMethod
	}
	return Default_ProtoOrder_StopTriggerMethod
}

func (x *ProtoOrder) GetStopLossTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopLossTriggerMethod != nil {
		return *x.StopLossTriggerMethod
	}
	return Default_ProtoOrder_StopLossTriggerMethod
}

func (x *ProtoOrder) GetSlippageInPoints() int32 {
	if x != nil && x.SlippageInPoints != nil {
		return *x.SlippageInPoints
	}
	return 0
}

func (x *ProtoOrder) GetDesiredOpenTimestamp() int64 {
	if x != nil && x.DesiredOpenTimestamp != nil {
		return *x.DesiredOpenTimestamp
	}
	return 0
}

func (x *ProtoOrder) GetOcoOrderId() int64 {
	if x != nil && x.OcoOrderId != nil {
		return *x.OcoOrderId
	}
	return 0
}

func (x *ProtoOrder) GetMoneyDigits() uint32 {
	if x != nil && x.MoneyDigits != nil {
		return *x.MoneyDigits
	}
	return 0
}

// Trading details for Closing Deal
type ProtoClosePositionDetail struct {
	state                        protoimpl.MessageState   `protogen:"open.v1"`
	EntryPrice                   *float64                 `protobuf:"fixed64,2,req,name=entryPrice" json:"entryPrice,omitempty"`                                                          // Position price at the moment of filling the closing Order
	Profit                       *int64                   `protobuf:"varint,7,req,name=profit" json:"profit,omitempty"`                                                                   // Amount of realized gross profit after execution of the Closing Deal
	Swap                         *int64                   `protobuf:"varint,3,req,name=swap" json:"swap,omitempty"`                                                                       // Amount of realized Swap related to closed volume
	Commission                   *int64                   `protobuf:"varint,4,req,name=commission" json:"commission,omitempty"`                                                           // Amount of realized commission related to closed volume
	Balance                      *int64                   `protobuf:"varint,8,req,name=balance" json:"balance,omitempty"`                                                                 // Account balance after after execution of the Closing Deal
	Comment                      *string                  `protobuf:"bytes,11,opt,name=comment" json:"comment,omitempty"`                                                                 // Comment specified by the Trader
	StopLoss                     *float64                 `protobuf:"fixed64,12,opt,name=stopLoss" json:"stopLoss,omitempty"`                                                             // Absolute Stop Loss price
	TakeProfit                   *float64                 `protobuf:"fixed64,13,opt,name=takeProfit" json:"takeProfit,omitempty"`                                                         // Absolute Take Profit price
	QuoteToDepositConversionRate *float64                 `protobuf:"fixed64,15,opt,name=quoteToDepositConversionRate" json:"quoteToDepositConversionRate,omitempty"`                     // Conversion rate from quote Asset to Trader's deposit Asset on the moment when the Closing Deal was sent for execution
	ClosedVolume                 *int64                   `protobuf:"varint,16,opt,name=closedVolume" json:"closedVolume,omitempty"`                                                      // Closed volume in cents
	BalanceVersion               *int64                   `protobuf:"varint,18,opt,name=balanceVersion" json:"balanceVersion,omitempty"`                                                  // Balance version of the Account related to Closing Deal operation
	IntroducingBrokerCommission  *int64                   `protobuf:"varint,19,opt,name=introducingBrokerCommission" json:"introducingBrokerCommission,omitempty"`                        // Amount of additional commission, which client should pay to IB
	PocketCommission             *int64                   `protobuf:"varint,20,opt,name=pocketCommission" json:"pocketCommission,omitempty"`                                              // Amount of commission, which Broker should pay to IB for introduced clients
	PocketMarkup                 *int64                   `protobuf:"varint,21,opt,name=pocketMarkup" json:"pocketMarkup,omitempty"`                                                      // Amount of markup (in points), which Broker should pay to IB for introduced clients
	Equity                       *int64                   `protobuf:"varint,23,opt,name=equity" json:"equity,omitempty"`                                                                  // Total account's equity after Closing Deal execution
	NetProfit                    *int64                   `protobuf:"varint,25,opt,name=netProfit" json:"netProfit,omitempty"`                                                            // Net realized profit related to the closing of offset part of opening Deals
	MirroringCommission          *int64                   `protobuf:"varint,26,opt,name=mirroringCommission" json:"mirroringCommission,omitempty"`                                        // Amount of unrealized commission related to following of strategy provider
	DepositToIbDepositRate       *float64                 `protobuf:"fixed64,27,opt,name=depositToIbDepositRate" json:"depositToIbDepositRate,omitempty"`                                 // Conversion rate between Trader's deposit Asset and IB account's deposit Asset
	MinEquity                    *int64                   `protobuf:"varint,28,opt,name=minEquity" json:"minEquity,omitempty"`                                                            // Minimum Equity value starting from the last previous balance history operation and before applying close Position balance history operation
	MaxEquity                    *int64                   `protobuf:"varint,29,opt,name=maxEquity" json:"maxEquity,omitempty"`                                                            // Maximum Equity value starting from the last previous balance history operation and before applying close Position balance history operation
	Rebate                       *int64                   `protobuf:"varint,30,opt,name=rebate" json:"rebate,omitempty"`                                                                  // Rebate in deposit Asset, in cents
	BalanceHistoryId             *int64                   `protobuf:"varint,31,opt,name=balanceHistoryId" json:"balanceHistoryId,omitempty"`                                              // ID of related Balance History record
	Markup                       *int64                   `protobuf:"varint,32,opt,name=markup" json:"markup,omitempty"`                                                                  // Markup in USD cents
	EquityBasedRoi               *float64                 `protobuf:"fixed64,33,opt,name=equityBasedRoi" json:"equityBasedRoi,omitempty"`                                                 // Position ROI
	ClosedStake                  *uint64                  `protobuf:"varint,34,opt,name=closedStake" json:"closedStake,omitempty"`                                                        // Closed stake for Spread Betting
	IbCommissionsPaid            *bool                    `protobuf:"varint,36,opt,name=ibCommissionsPaid" json:"ibCommissionsPaid,omitempty"`                                            // If TRUE then IB commission is already paid
	NonWithdrawableBonus         *int64                   `protobuf:"varint,37,opt,name=nonWithdrawableBonus" json:"nonWithdrawableBonus,omitempty"`                                      // Amount of Bonus, which can't be withdrawn (can only be used for trading)
	StopLossTriggerMethod        *ProtoOrderTriggerMethod `protobuf:"varint,38,opt,name=stopLossTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopLossTriggerMethod,omitempty"` // Stop Trigger Method for SL/TP Order
	OffsetDealTimestamp          *int64                   `protobuf:"varint,40,opt,name=offsetDealTimestamp" json:"offsetDealTimestamp,omitempty"`                                        // UNIX timestamp in milliseconds of execution of the first offset Deal for this Closing Deal
	MoneyDigits                  *uint32                  `protobuf:"varint,43,opt,name=moneyDigits" json:"moneyDigits,omitempty"`                                                        // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects grossProfit, swap, commission, balance, pnlConversionFee
	PnlConversionFee             *int64                   `protobuf:"varint,44,opt,name=pnlConversionFee" json:"pnlConversionFee,omitempty"`                                              // Conversion Fee applied to the Deal in Trader's deposit Asset when Trader Symbol's quote Asset ID <> Trader's deposit Asset ID
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

// Default values for ProtoClosePositionDetail fields.
const (
	Default_ProtoClosePositionDetail_StopLossTriggerMethod = ProtoOrderTriggerMethod_TRADE
)

func (x *ProtoClosePositionDetail) Reset() {
	*x = ProtoClosePositionDetail{}
	mi := &file_CSModelMessages_External_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoClosePositionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoClosePositionDetail) ProtoMessage() {}

func (x *ProtoClosePositionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoClosePositionDetail.ProtoReflect.Descriptor instead.
func (*ProtoClosePositionDetail) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{4}
}

func (x *ProtoClosePositionDetail) GetEntryPrice() float64 {
	if x != nil && x.EntryPrice != nil {
		return *x.EntryPrice
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetProfit() int64 {
	if x != nil && x.Profit != nil {
		return *x.Profit
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetSwap() int64 {
	if x != nil && x.Swap != nil {
		return *x.Swap
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetCommission() int64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetBalance() int64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoClosePositionDetail) GetStopLoss() float64 {
	if x != nil && x.StopLoss != nil {
		return *x.StopLoss
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetTakeProfit() float64 {
	if x != nil && x.TakeProfit != nil {
		return *x.TakeProfit
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetQuoteToDepositConversionRate() float64 {
	if x != nil && x.QuoteToDepositConversionRate != nil {
		return *x.QuoteToDepositConversionRate
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetClosedVolume() int64 {
	if x != nil && x.ClosedVolume != nil {
		return *x.ClosedVolume
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetBalanceVersion() int64 {
	if x != nil && x.BalanceVersion != nil {
		return *x.BalanceVersion
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetIntroducingBrokerCommission() int64 {
	if x != nil && x.IntroducingBrokerCommission != nil {
		return *x.IntroducingBrokerCommission
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetPocketCommission() int64 {
	if x != nil && x.PocketCommission != nil {
		return *x.PocketCommission
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetPocketMarkup() int64 {
	if x != nil && x.PocketMarkup != nil {
		return *x.PocketMarkup
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetEquity() int64 {
	if x != nil && x.Equity != nil {
		return *x.Equity
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetNetProfit() int64 {
	if x != nil && x.NetProfit != nil {
		return *x.NetProfit
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetMirroringCommission() int64 {
	if x != nil && x.MirroringCommission != nil {
		return *x.MirroringCommission
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetDepositToIbDepositRate() float64 {
	if x != nil && x.DepositToIbDepositRate != nil {
		return *x.DepositToIbDepositRate
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetMinEquity() int64 {
	if x != nil && x.MinEquity != nil {
		return *x.MinEquity
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetMaxEquity() int64 {
	if x != nil && x.MaxEquity != nil {
		return *x.MaxEquity
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetRebate() int64 {
	if x != nil && x.Rebate != nil {
		return *x.Rebate
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetBalanceHistoryId() int64 {
	if x != nil && x.BalanceHistoryId != nil {
		return *x.BalanceHistoryId
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetMarkup() int64 {
	if x != nil && x.Markup != nil {
		return *x.Markup
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetEquityBasedRoi() float64 {
	if x != nil && x.EquityBasedRoi != nil {
		return *x.EquityBasedRoi
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetClosedStake() uint64 {
	if x != nil && x.ClosedStake != nil {
		return *x.ClosedStake
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetIbCommissionsPaid() bool {
	if x != nil && x.IbCommissionsPaid != nil {
		return *x.IbCommissionsPaid
	}
	return false
}

func (x *ProtoClosePositionDetail) GetNonWithdrawableBonus() int64 {
	if x != nil && x.NonWithdrawableBonus != nil {
		return *x.NonWithdrawableBonus
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetStopLossTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopLossTriggerMethod != nil {
		return *x.StopLossTriggerMethod
	}
	return Default_ProtoClosePositionDetail_StopLossTriggerMethod
}

func (x *ProtoClosePositionDetail) GetOffsetDealTimestamp() int64 {
	if x != nil && x.OffsetDealTimestamp != nil {
		return *x.OffsetDealTimestamp
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetMoneyDigits() uint32 {
	if x != nil && x.MoneyDigits != nil {
		return *x.MoneyDigits
	}
	return 0
}

func (x *ProtoClosePositionDetail) GetPnlConversionFee() int64 {
	if x != nil && x.PnlConversionFee != nil {
		return *x.PnlConversionFee
	}
	return 0
}

// Order related action entity
type ProtoOrderAction struct {
	state                 protoimpl.MessageState   `protogen:"open.v1"`
	ActionId              *int64                   `protobuf:"varint,1,req,name=actionId" json:"actionId,omitempty"`                                                               // Action ID
	ActionType            *ProtoActionType         `protobuf:"varint,3,req,name=actionType,enum=ProtoActionType" json:"actionType,omitempty"`                                      // Action type
	ActionStatus          *ProtoActionStatus       `protobuf:"varint,4,req,name=actionStatus,enum=ProtoActionStatus" json:"actionStatus,omitempty"`                                // Action status
	ExpirationTimestamp   *int64                   `protobuf:"varint,5,opt,name=expirationTimestamp" json:"expirationTimestamp,omitempty"`                                         // UNIX timestamp in milliseconds of Order expiration
	Volume                *int64                   `protobuf:"varint,6,opt,name=volume" json:"volume,omitempty"`                                                                   // Volume for created Order/Deal
	Price                 *int64                   `protobuf:"varint,7,opt,name=price" json:"price,omitempty"`                                                                     // Price for created Deal/amended Order
	StopLoss              *int64                   `protobuf:"varint,8,opt,name=stopLoss" json:"stopLoss,omitempty"`                                                               // Stop Loss price for Stop Loss action
	TakeProfit            *int64                   `protobuf:"varint,9,opt,name=takeProfit" json:"takeProfit,omitempty"`                                                           // Take Profit price for Take Profit action
	SessionId             *string                  `protobuf:"bytes,10,opt,name=sessionId" json:"sessionId,omitempty"`                                                             // ID of Trader's session
	ClientRequestId       *string                  `protobuf:"bytes,11,opt,name=clientRequestId" json:"clientRequestId,omitempty"`                                                 // ClientRequestId specified in the Order
	Label                 *string                  `protobuf:"bytes,12,opt,name=label" json:"label,omitempty"`                                                                     // Label field value from corresponding Order. Used by cAlgo bots to identify its own Orders. Max length = 100
	Comment               *string                  `protobuf:"bytes,13,opt,name=comment" json:"comment,omitempty"`                                                                 // Comment specified in the Order
	Channel               *string                  `protobuf:"bytes,14,opt,name=channel" json:"channel,omitempty"`                                                                 // Channel, specified in the Order (cTrader, cServer etc)
	ExecuteTimestamp      *int64                   `protobuf:"varint,17,opt,name=executeTimestamp" json:"executeTimestamp,omitempty"`                                              // UNIX timestamp in milliseconds of action execution
	RelativeStopLoss      *int64                   `protobuf:"varint,18,opt,name=relativeStopLoss" json:"relativeStopLoss,omitempty"`                                              // Stop Loss entered by Trader at the moment of market Order creation
	RelativeTakeProfit    *int64                   `protobuf:"varint,19,opt,name=relativeTakeProfit" json:"relativeTakeProfit,omitempty"`                                          // Take Profit entered by Trader at the moment of market Order creation
	StopTriggerMethod     *ProtoOrderTriggerMethod `protobuf:"varint,20,opt,name=stopTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopTriggerMethod,omitempty"`         // Trigger Method for the STOP or the STOP_LIMIT pending Order
	StopLossTriggerMethod *ProtoOrderTriggerMethod `protobuf:"varint,21,opt,name=stopLossTriggerMethod,enum=ProtoOrderTriggerMethod,def=1" json:"stopLossTriggerMethod,omitempty"` // Stop Trigger Method for SL/TP Order
	DesiredOpenTimestamp  *int64                   `protobuf:"varint,22,opt,name=desiredOpenTimestamp" json:"desiredOpenTimestamp,omitempty"`                                      // UNIX timestamp in milliseconds used to set time of the opening for MARKET_ON_OPEN Orders
	OcoOrderId            *int64                   `protobuf:"varint,23,opt,name=ocoOrderId" json:"ocoOrderId,omitempty"`                                                          // Link to ID of OCO (one cancels other) Order
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for ProtoOrderAction fields.
const (
	Default_ProtoOrderAction_StopTriggerMethod     = ProtoOrderTriggerMethod_TRADE
	Default_ProtoOrderAction_StopLossTriggerMethod = ProtoOrderTriggerMethod_TRADE
)

func (x *ProtoOrderAction) Reset() {
	*x = ProtoOrderAction{}
	mi := &file_CSModelMessages_External_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoOrderAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOrderAction) ProtoMessage() {}

func (x *ProtoOrderAction) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOrderAction.ProtoReflect.Descriptor instead.
func (*ProtoOrderAction) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{5}
}

func (x *ProtoOrderAction) GetActionId() int64 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *ProtoOrderAction) GetActionType() ProtoActionType {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return ProtoActionType_ACTION_CREATE_STOP_LOSS_TAKE_PROFIT
}

func (x *ProtoOrderAction) GetActionStatus() ProtoActionStatus {
	if x != nil && x.ActionStatus != nil {
		return *x.ActionStatus
	}
	return ProtoActionStatus_ACTION_PENDING
}

func (x *ProtoOrderAction) GetExpirationTimestamp() int64 {
	if x != nil && x.ExpirationTimestamp != nil {
		return *x.ExpirationTimestamp
	}
	return 0
}

func (x *ProtoOrderAction) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoOrderAction) GetPrice() int64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ProtoOrderAction) GetStopLoss() int64 {
	if x != nil && x.StopLoss != nil {
		return *x.StopLoss
	}
	return 0
}

func (x *ProtoOrderAction) GetTakeProfit() int64 {
	if x != nil && x.TakeProfit != nil {
		return *x.TakeProfit
	}
	return 0
}

func (x *ProtoOrderAction) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *ProtoOrderAction) GetClientRequestId() string {
	if x != nil && x.ClientRequestId != nil {
		return *x.ClientRequestId
	}
	return ""
}

func (x *ProtoOrderAction) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ProtoOrderAction) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoOrderAction) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ProtoOrderAction) GetExecuteTimestamp() int64 {
	if x != nil && x.ExecuteTimestamp != nil {
		return *x.ExecuteTimestamp
	}
	return 0
}

func (x *ProtoOrderAction) GetRelativeStopLoss() int64 {
	if x != nil && x.RelativeStopLoss != nil {
		return *x.RelativeStopLoss
	}
	return 0
}

func (x *ProtoOrderAction) GetRelativeTakeProfit() int64 {
	if x != nil && x.RelativeTakeProfit != nil {
		return *x.RelativeTakeProfit
	}
	return 0
}

func (x *ProtoOrderAction) GetStopTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopTriggerMethod != nil {
		return *x.StopTriggerMethod
	}
	return Default_ProtoOrderAction_StopTriggerMethod
}

func (x *ProtoOrderAction) GetStopLossTriggerMethod() ProtoOrderTriggerMethod {
	if x != nil && x.StopLossTriggerMethod != nil {
		return *x.StopLossTriggerMethod
	}
	return Default_ProtoOrderAction_StopLossTriggerMethod
}

func (x *ProtoOrderAction) GetDesiredOpenTimestamp() int64 {
	if x != nil && x.DesiredOpenTimestamp != nil {
		return *x.DesiredOpenTimestamp
	}
	return 0
}

func (x *ProtoOrderAction) GetOcoOrderId() int64 {
	if x != nil && x.OcoOrderId != nil {
		return *x.OcoOrderId
	}
	return 0
}

// Account Deposit/Withdrawal operation entity
type ProtoDepositWithdraw struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	OperationType          *ProtoChangeBalanceType `protobuf:"varint,1,req,name=operationType,enum=ProtoChangeBalanceType" json:"operationType,omitempty"` // Type of the operation - Deposit/Withdrawal
	BalanceHistoryId       *int64                  `protobuf:"varint,2,req,name=balanceHistoryId" json:"balanceHistoryId,omitempty"`                       // The unique ID of the Deposit/Withdrawal operation
	TraderId               *int64                  `protobuf:"varint,3,req,name=traderId" json:"traderId,omitempty"`                                       // ID of the Trader
	Balance                *int64                  `protobuf:"varint,4,req,name=balance" json:"balance,omitempty"`                                         // Trader's balance after the operation was executed
	Delta                  *int64                  `protobuf:"varint,5,req,name=delta" json:"delta,omitempty"`                                             // Amount of Deposit/Withdrawal operation
	ChangeBalanceTimestamp *int64                  `protobuf:"varint,6,req,name=changeBalanceTimestamp" json:"changeBalanceTimestamp,omitempty"`           // UNIX timestamp in milliseconds when Deposit/Withdrawal operation was executed
	Comment                *string                 `protobuf:"bytes,7,opt,name=comment" json:"comment,omitempty"`                                          // Comment added to operation. Visible only to Managers
	ExternalNote           *string                 `protobuf:"bytes,8,opt,name=externalNote" json:"externalNote,omitempty"`                                // Note added to operation. Visible to the Trader and to Managers
	BalanceVersion         *int64                  `protobuf:"varint,9,opt,name=balanceVersion" json:"balanceVersion,omitempty"`                           // Balance version used to identify the final balance. Increments each time when the Trader's balance is changed
	Equity                 *int64                  `protobuf:"varint,10,opt,name=equity" json:"equity,omitempty"`                                          // Trader's equity after balance operation was executed
	MinEquity              *int64                  `protobuf:"varint,11,opt,name=minEquity" json:"minEquity,omitempty"`                                    // Min equity since previous balance operation
	MaxEquity              *int64                  `protobuf:"varint,12,opt,name=maxEquity" json:"maxEquity,omitempty"`                                    // Max equity since previous balance operation
	NonWithdrawableBonus   *int64                  `protobuf:"varint,13,opt,name=nonWithdrawableBonus" json:"nonWithdrawableBonus,omitempty"`              // If TRUE then deposit is a non-withdrawable Bonus from Broker that can be used only for trading
	Source                 *string                 `protobuf:"bytes,14,opt,name=source" json:"source,omitempty"`                                           // Field can be used to determine source of payment (e. g VISA or PayPal)
	ExternalId             *string                 `protobuf:"bytes,15,opt,name=externalId" json:"externalId,omitempty"`                                   // ID which can be used for reconciliation with third party systems
	MoneyDigits            *uint32                 `protobuf:"varint,16,opt,name=moneyDigits" json:"moneyDigits,omitempty"`                                // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects balance, delta, equity
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProtoDepositWithdraw) Reset() {
	*x = ProtoDepositWithdraw{}
	mi := &file_CSModelMessages_External_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDepositWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDepositWithdraw) ProtoMessage() {}

func (x *ProtoDepositWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDepositWithdraw.ProtoReflect.Descriptor instead.
func (*ProtoDepositWithdraw) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{6}
}

func (x *ProtoDepositWithdraw) GetOperationType() ProtoChangeBalanceType {
	if x != nil && x.OperationType != nil {
		return *x.OperationType
	}
	return ProtoChangeBalanceType_BALANCE_DEPOSIT
}

func (x *ProtoDepositWithdraw) GetBalanceHistoryId() int64 {
	if x != nil && x.BalanceHistoryId != nil {
		return *x.BalanceHistoryId
	}
	return 0
}

func (x *ProtoDepositWithdraw) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoDepositWithdraw) GetBalance() int64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *ProtoDepositWithdraw) GetDelta() int64 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

func (x *ProtoDepositWithdraw) GetChangeBalanceTimestamp() int64 {
	if x != nil && x.ChangeBalanceTimestamp != nil {
		return *x.ChangeBalanceTimestamp
	}
	return 0
}

func (x *ProtoDepositWithdraw) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoDepositWithdraw) GetExternalNote() string {
	if x != nil && x.ExternalNote != nil {
		return *x.ExternalNote
	}
	return ""
}

func (x *ProtoDepositWithdraw) GetBalanceVersion() int64 {
	if x != nil && x.BalanceVersion != nil {
		return *x.BalanceVersion
	}
	return 0
}

func (x *ProtoDepositWithdraw) GetEquity() int64 {
	if x != nil && x.Equity != nil {
		return *x.Equity
	}
	return 0
}

func (x *ProtoDepositWithdraw) GetMinEquity() int64 {
	if x != nil && x.MinEquity != nil {
		return *x.MinEquity
	}
	return 0
}

func (x *ProtoDepositWithdraw) GetMaxEquity() int64 {
	if x != nil && x.MaxEquity != nil {
		return *x.MaxEquity
	}
	return 0
}

func (x *ProtoDepositWithdraw) GetNonWithdrawableBonus() int64 {
	if x != nil && x.NonWithdrawableBonus != nil {
		return *x.NonWithdrawableBonus
	}
	return 0
}

func (x *ProtoDepositWithdraw) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *ProtoDepositWithdraw) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *ProtoDepositWithdraw) GetMoneyDigits() uint32 {
	if x != nil && x.MoneyDigits != nil {
		return *x.MoneyDigits
	}
	return 0
}

// Bonus Deposit/Withdrawal entity
type ProtoBonusDepositWithdraw struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	OperationType        *ProtoChangeBonusType  `protobuf:"varint,1,req,name=operationType,enum=ProtoChangeBonusType" json:"operationType,omitempty"` // Type of the operation. Bonus Deposit/Withdrawal
	BonusHistoryId       *int64                 `protobuf:"varint,2,req,name=bonusHistoryId" json:"bonusHistoryId,omitempty"`                         // The unique ID of the Bonus Deposit/Withdrawal operation
	TraderId             *int64                 `protobuf:"varint,3,req,name=traderId" json:"traderId,omitempty"`                                     // ID of the Trader
	ManagerBonus         *int64                 `protobuf:"varint,4,req,name=managerBonus" json:"managerBonus,omitempty"`                             // Total amount of broker's Bonus after the operation
	ManagerDelta         *int64                 `protobuf:"varint,5,req,name=managerDelta" json:"managerDelta,omitempty"`                             // Amount of Bonus Deposited/Withdrew by the Manager
	IbBonus              *int64                 `protobuf:"varint,6,req,name=ibBonus" json:"ibBonus,omitempty"`                                       // Total amount of Introducing Broker's Bonus after the operation
	IbDelta              *int64                 `protobuf:"varint,7,req,name=ibDelta" json:"ibDelta,omitempty"`                                       // Amount of Bonus Deposited/Withdrew by Introducing Broker
	ChangeBonusTimestamp *int64                 `protobuf:"varint,8,req,name=changeBonusTimestamp" json:"changeBonusTimestamp,omitempty"`             // UNIX timestamp in milliseconds when the Bonus operation was executed
	Comment              *string                `protobuf:"bytes,10,opt,name=comment" json:"comment,omitempty"`                                       // Comment added to operation. Visible only to Managers
	ExternalNote         *string                `protobuf:"bytes,11,opt,name=externalNote" json:"externalNote,omitempty"`                             // Note added to operation. Visible to the Trader
	IntroducingBrokerId  *int64                 `protobuf:"varint,12,opt,name=introducingBrokerId" json:"introducingBrokerId,omitempty"`              // ID of Introducing Broker who Вeposited/Цithdrew Bonus
	MoneyDigits          *uint32                `protobuf:"varint,13,opt,name=moneyDigits" json:"moneyDigits,omitempty"`                              // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects managerBonus, managerDelta, ibBonus, ibDelta
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ProtoBonusDepositWithdraw) Reset() {
	*x = ProtoBonusDepositWithdraw{}
	mi := &file_CSModelMessages_External_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoBonusDepositWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBonusDepositWithdraw) ProtoMessage() {}

func (x *ProtoBonusDepositWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBonusDepositWithdraw.ProtoReflect.Descriptor instead.
func (*ProtoBonusDepositWithdraw) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{7}
}

func (x *ProtoBonusDepositWithdraw) GetOperationType() ProtoChangeBonusType {
	if x != nil && x.OperationType != nil {
		return *x.OperationType
	}
	return ProtoChangeBonusType_BONUS_DEPOSIT
}

func (x *ProtoBonusDepositWithdraw) GetBonusHistoryId() int64 {
	if x != nil && x.BonusHistoryId != nil {
		return *x.BonusHistoryId
	}
	return 0
}

func (x *ProtoBonusDepositWithdraw) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoBonusDepositWithdraw) GetManagerBonus() int64 {
	if x != nil && x.ManagerBonus != nil {
		return *x.ManagerBonus
	}
	return 0
}

func (x *ProtoBonusDepositWithdraw) GetManagerDelta() int64 {
	if x != nil && x.ManagerDelta != nil {
		return *x.ManagerDelta
	}
	return 0
}

func (x *ProtoBonusDepositWithdraw) GetIbBonus() int64 {
	if x != nil && x.IbBonus != nil {
		return *x.IbBonus
	}
	return 0
}

func (x *ProtoBonusDepositWithdraw) GetIbDelta() int64 {
	if x != nil && x.IbDelta != nil {
		return *x.IbDelta
	}
	return 0
}

func (x *ProtoBonusDepositWithdraw) GetChangeBonusTimestamp() int64 {
	if x != nil && x.ChangeBonusTimestamp != nil {
		return *x.ChangeBonusTimestamp
	}
	return 0
}

func (x *ProtoBonusDepositWithdraw) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoBonusDepositWithdraw) GetExternalNote() string {
	if x != nil && x.ExternalNote != nil {
		return *x.ExternalNote
	}
	return ""
}

func (x *ProtoBonusDepositWithdraw) GetIntroducingBrokerId() int64 {
	if x != nil && x.IntroducingBrokerId != nil {
		return *x.IntroducingBrokerId
	}
	return 0
}

func (x *ProtoBonusDepositWithdraw) GetMoneyDigits() uint32 {
	if x != nil && x.MoneyDigits != nil {
		return *x.MoneyDigits
	}
	return 0
}

// Trader entity
type ProtoTrader struct {
	state                                  protoimpl.MessageState                     `protogen:"open.v1"`
	TraderId                               *int64                                     `protobuf:"varint,1,req,name=traderId" json:"traderId,omitempty"`                                                                                                               // Trader ID
	Login                                  *int64                                     `protobuf:"varint,2,req,name=login" json:"login,omitempty"`                                                                                                                     // TraderLogin for a specific Account. Value is displayed on Client App UI
	GroupId                                *int64                                     `protobuf:"varint,3,req,name=groupId" json:"groupId,omitempty"`                                                                                                                 // ID of Trader's group
	Balance                                *int64                                     `protobuf:"varint,8,req,name=balance" json:"balance,omitempty"`                                                                                                                 // Current balance
	AccountType                            *ProtoAccountType                          `protobuf:"varint,9,opt,name=accountType,enum=ProtoAccountType,def=0" json:"accountType,omitempty"`                                                                             // Type of Account (Trader)
	Name                                   *string                                    `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`                                                                                                                       // Name of the Trader
	PasswordHash                           *string                                    `protobuf:"bytes,11,opt,name=passwordHash" json:"passwordHash,omitempty"`                                                                                                       // Password hash of the Trader (MD5 of password in utf-8 in lower case)
	Description                            *string                                    `protobuf:"bytes,12,opt,name=description" json:"description,omitempty"`                                                                                                         // Description for the Trader
	Status                                 *string                                    `protobuf:"bytes,13,opt,name=status" json:"status,omitempty"`                                                                                                                   // Can be used for KYC related purposes
	CountryId                              *int64                                     `protobuf:"varint,14,opt,name=countryId" json:"countryId,omitempty"`                                                                                                            // ID of Trader's Country
	State                                  *string                                    `protobuf:"bytes,15,opt,name=state" json:"state,omitempty"`                                                                                                                     // State (region) of the Trader
	City                                   *string                                    `protobuf:"bytes,16,opt,name=city" json:"city,omitempty"`                                                                                                                       // City of the Trader
	Address                                *string                                    `protobuf:"bytes,17,opt,name=address" json:"address,omitempty"`                                                                                                                 // Address of the Trader
	ZipCode                                *string                                    `protobuf:"bytes,18,opt,name=zipCode" json:"zipCode,omitempty"`                                                                                                                 // Zip code of the Trader
	Phone                                  *string                                    `protobuf:"bytes,19,opt,name=phone" json:"phone,omitempty"`                                                                                                                     // Phone number of the Trader
	PhonePassword                          *string                                    `protobuf:"bytes,20,opt,name=phonePassword" json:"phonePassword,omitempty"`                                                                                                     // Temporary password generated by the server to organize phone trading functionality (Manager trades by Trader's phone request)
	Email                                  *string                                    `protobuf:"bytes,21,opt,name=email" json:"email,omitempty"`                                                                                                                     // Email of the Trader
	DocumentId                             *string                                    `protobuf:"bytes,22,opt,name=documentId" json:"documentId,omitempty"`                                                                                                           // Trader's document ID
	RegistrationTimestamp                  *int64                                     `protobuf:"varint,25,opt,name=registrationTimestamp" json:"registrationTimestamp,omitempty"`                                                                                    // UNIX timestamp in milliseconds of Trader registration
	LastConnectTimestamp                   *int64                                     `protobuf:"varint,26,opt,name=lastConnectTimestamp" json:"lastConnectTimestamp,omitempty"`                                                                                      // UNIX timestamp in milliseconds of the Trader's last successful authorization
	Online                                 *bool                                      `protobuf:"varint,27,opt,name=online" json:"online,omitempty"`                                                                                                                  // If TRUE then Trader is online
	UtcLastUpdateTimestamp                 *int64                                     `protobuf:"varint,28,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`                                                                                  // UNIX timestamp in milliseconds of last update of the Trader
	Deleted                                *bool                                      `protobuf:"varint,29,opt,name=deleted" json:"deleted,omitempty"`                                                                                                                // If TRUE then Trader is deleted
	BalanceVersion                         *int64                                     `protobuf:"varint,30,opt,name=balanceVersion" json:"balanceVersion,omitempty"`                                                                                                  // Balance version used to identify the final balance. Increments each time when Trader's balance is changed
	IntroducingBroker                      *bool                                      `protobuf:"varint,32,opt,name=introducingBroker" json:"introducingBroker,omitempty"`                                                                                            // TRUE for Introducing Broker (IB)
	ParentIntroducingBrokerIdIsNull        *bool                                      `protobuf:"varint,55,opt,name=parentIntroducingBrokerIdIsNull,def=0" json:"parentIntroducingBrokerIdIsNull,omitempty"`                                                          // TRUE sets parentIntroducingBrokerId = null
	ParentIntroducingBrokerId              *int64                                     `protobuf:"varint,33,opt,name=parentIntroducingBrokerId" json:"parentIntroducingBrokerId,omitempty"`                                                                            // Specifies ID of the Trader which introduced current Trader
	IntroducingBrokerCommissionRate        *int32                                     `protobuf:"varint,34,opt,name=introducingBrokerCommissionRate" json:"introducingBrokerCommissionRate,omitempty"`                                                                // Commission rate of Introducing Broker. Additional Commission Paid by Client
	PocketCommissionRate                   *int32                                     `protobuf:"varint,35,opt,name=pocketCommissionRate" json:"pocketCommissionRate,omitempty"`                                                                                      // Commission which Broker will pay to IB for the Deal of the Trader
	PocketMarkupRate                       *int32                                     `protobuf:"varint,36,opt,name=pocketMarkupRate" json:"pocketMarkupRate,omitempty"`                                                                                              // Markup which Broker will pay to IB for the Deal of the Trader
	DefaultIntroducingBrokerCommissionRate *int32                                     `protobuf:"varint,37,opt,name=defaultIntroducingBrokerCommissionRate" json:"defaultIntroducingBrokerCommissionRate,omitempty"`                                                  // When Trader is assigned to IB introducingBrokerCommissionRate of Trader = defaultIntroducingBrokerCommissionRate of IB
	DefaultPocketCommissionRate            *int32                                     `protobuf:"varint,38,opt,name=defaultPocketCommissionRate" json:"defaultPocketCommissionRate,omitempty"`                                                                        // When Trader is assigned to IB pocketCommissionRate of Trader = defaultPocketCommissionRate of IB
	DefaultPocketMarkupRate                *int32                                     `protobuf:"varint,39,opt,name=defaultPocketMarkupRate" json:"defaultPocketMarkupRate,omitempty"`                                                                                // When Trader is assigned to IB pocketMarkupRate of Trader = defaultPocketMarkupRate of IB
	DefaultRebateRate                      *int32                                     `protobuf:"varint,43,opt,name=defaultRebateRate" json:"defaultRebateRate,omitempty"`                                                                                            // When Trader is assigned to IB rebateRate of Trader = defaultRebateRate of IB
	DefaultIbCommissionsType               *ProtoCommissionType                       `protobuf:"varint,44,opt,name=defaultIbCommissionsType,enum=ProtoCommissionType" json:"defaultIbCommissionsType,omitempty"`                                                     // When Trader is assigned to IB ibCommissionsType of Trader = defaultIbCommissionsType of IB
	IbCommissionsType                      *ProtoCommissionType                       `protobuf:"varint,45,opt,name=ibCommissionsType,enum=ProtoCommissionType" json:"ibCommissionsType,omitempty"`                                                                   // Determines how ibCommissionRate and pocketCommissionRate will be treated
	ManagerBonus                           *int64                                     `protobuf:"varint,47,opt,name=managerBonus" json:"managerBonus,omitempty"`                                                                                                      // Amount of Bonus, given by the Broker
	IbBonus                                *int64                                     `protobuf:"varint,48,opt,name=ibBonus" json:"ibBonus,omitempty"`                                                                                                                // Amount of Bonus, given by the IB
	ShowPersonalData                       *bool                                      `protobuf:"varint,49,opt,name=showPersonalData" json:"showPersonalData,omitempty"`                                                                                              // If FALSE personal data (Name, Email, Phone) is not sent for this Trader
	SplitRevenue                           *bool                                      `protobuf:"varint,50,opt,name=splitRevenue" json:"splitRevenue,omitempty"`                                                                                                      // IF TRUE then Partner will get some part of Price Stream Markup and Commissions, paid by Client to Broker, depending on the Rank of the IB
	RankIdIsNull                           *bool                                      `protobuf:"varint,51,opt,name=rankIdIsNull,def=0" json:"rankIdIsNull,omitempty"`                                                                                                // TRUE sets rankId=null
	RankId                                 *int32                                     `protobuf:"varint,52,opt,name=rankId" json:"rankId,omitempty"`                                                                                                                  // Refers to ID of rank entity. Rank - is some level of IB. Higher Rank gives more Bonuses to IB
	HasRank                                *bool                                      `protobuf:"varint,53,opt,name=hasRank,def=0" json:"hasRank,omitempty"`                                                                                                          // If True then Trader has IB rank
	Rank                                   []*ProtoTraderRank                         `protobuf:"bytes,54,rep,name=rank" json:"rank,omitempty"`                                                                                                                       // Refers to IB rank of IB. Higher Rank gives more Bonuses to IB
	LastName                               *string                                    `protobuf:"bytes,56,opt,name=lastName" json:"lastName,omitempty"`                                                                                                               // Last name of the Trader
	DefaultSplitRevenue                    *bool                                      `protobuf:"varint,57,opt,name=defaultSplitRevenue" json:"defaultSplitRevenue,omitempty"`                                                                                        // When Trader is assigned to IB splitRevenue of Trader = defaultSplitRevenue of IB
	AccessRights                           *ProtoAccessRights                         `protobuf:"varint,59,opt,name=accessRights,enum=ProtoAccessRights,def=0" json:"accessRights,omitempty"`                                                                         // Type of the access of the Account
	SendOwnStatement                       *bool                                      `protobuf:"varint,60,opt,name=sendOwnStatement" json:"sendOwnStatement,omitempty"`                                                                                              // Specifies whether EOD statement should be send to the Trader or not
	DepositAssetId                         *int64                                     `protobuf:"varint,61,opt,name=depositAssetId" json:"depositAssetId,omitempty"`                                                                                                  // ID of the deposit Asset
	SwapFree                               *bool                                      `protobuf:"varint,64,opt,name=swapFree" json:"swapFree,omitempty"`                                                                                                              // Specifies whether account is SWAP-free (Shariah compliant)
	NonWithdrawableBonus                   *int64                                     `protobuf:"varint,65,opt,name=nonWithdrawableBonus" json:"nonWithdrawableBonus,omitempty"`                                                                                      // Amount of non-withdrawable Bonus, given by the Broker
	LeverageInCents                        *uint32                                    `protobuf:"varint,66,opt,name=leverageInCents" json:"leverageInCents,omitempty"`                                                                                                // Trader's leverage in cents
	MoveToIBGroup                          *bool                                      `protobuf:"varint,67,opt,name=moveToIBGroup" json:"moveToIBGroup,omitempty"`                                                                                                    // If TRUE then Trader will be added into group where IB is at the moment of linking account to IB
	TotalMarginCalculationType             *ProtoTotalMarginCalculationType           `protobuf:"varint,68,opt,name=totalMarginCalculationType,enum=ProtoTotalMarginCalculationType" json:"totalMarginCalculationType,omitempty"`                                     // Total margin calculation type
	BrokerName                             *string                                    `protobuf:"bytes,69,opt,name=brokerName" json:"brokerName,omitempty"`                                                                                                           // Some whitelabel assigned to Trader by the Broker at the moment of Account creation
	MaxLeverage                            *uint32                                    `protobuf:"varint,70,opt,name=maxLeverage" json:"maxLeverage,omitempty"`                                                                                                        // Maximum allowed leverage for the Account. Used as validation when a Trader wants to change leverage value
	FreeTrades                             *bool                                      `protobuf:"varint,71,opt,name=freeTrades" json:"freeTrades,omitempty"`                                                                                                          // IF TRUE then commission rate = 0 will be applied to all trades
	Version                                *int64                                     `protobuf:"varint,74,opt,name=version" json:"version,omitempty"`                                                                                                                // When any parameter of ProtoTrader is changed (except balance, ibBonus, passwordHash, lastConnectTimestamp, online, balanceVersion, logoutTimestamp, equity) version is incremented
	SubAccountOf                           *int64                                     `protobuf:"varint,75,opt,name=subAccountOf" json:"subAccountOf,omitempty"`                                                                                                      // Determines parent account of account, if it is Subaccount. Used for Copy service
	MaxNOP                                 *uint32                                    `protobuf:"varint,76,opt,name=maxNOP" json:"maxNOP,omitempty"`                                                                                                                  // Maximum exposure per Account as % from total Trader's equity. Protocol value = 1 equals to 0.01% = 0.0001. Example: if MaxNOP = 8.0% for account with equity 100 000 USD maximum NOP will be 1 250 000 USD. An Order which breaches this limit will be rejected
	DisablePasswordLogin                   *bool                                      `protobuf:"varint,77,opt,name=disablePasswordLogin" json:"disablePasswordLogin,omitempty"`                                                                                      // If TRUE then login by a password for Trader is disabled. This password is not used to sign in to the trading applications. cTrader ID is used for this purpose. Password is only used for authenticating FIX API sessions
	IsLimitedRisk                          *bool                                      `protobuf:"varint,78,opt,name=isLimitedRisk" json:"isLimitedRisk,omitempty"`                                                                                                    // Specifies whether Trader is of Limited Risk type
	LimitedRiskMarginCalculationStrategy   *ProtoLimitedRiskMarginCalculationStrategy `protobuf:"varint,79,opt,name=limitedRiskMarginCalculationStrategy,enum=ProtoLimitedRiskMarginCalculationStrategy,def=0" json:"limitedRiskMarginCalculationStrategy,omitempty"` // Limited Risk type
	MoneyDigits                            *uint32                                    `protobuf:"varint,80,opt,name=moneyDigits" json:"moneyDigits,omitempty"`                                                                                                        // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects balance, managerBonus, ibBonus, nonWithdrawableBonus
	ManagementFee                          *int64                                     `protobuf:"varint,81,opt,name=managementFee" json:"managementFee,omitempty"`                                                                                                    // Management Fee used in Copy
	SendStatementToBroker                  *bool                                      `protobuf:"varint,82,opt,name=sendStatementToBroker" json:"sendStatementToBroker,omitempty"`                                                                                    // If TRUE then statement (report) is sent to the Broker
	DefaultIbCommissionSymbolCategory      []*ProtoIbCommissionSymbolCategory         `protobuf:"bytes,83,rep,name=defaultIbCommissionSymbolCategory" json:"defaultIbCommissionSymbolCategory,omitempty"`                                                             // ID of default applicable ProtoIbCommissionSymbolCategory which allows IB to have a different commission per Symbol
	IbCommissionSymbolCategory             []*ProtoIbCommissionSymbolCategory         `protobuf:"bytes,84,rep,name=ibCommissionSymbolCategory" json:"ibCommissionSymbolCategory,omitempty"`                                                                           // ID of applicable ProtoIbCommissionSymbolCategory which allows IB to have a different commission per Symbol Category
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

// Default values for ProtoTrader fields.
const (
	Default_ProtoTrader_AccountType                          = ProtoAccountType_HEDGED
	Default_ProtoTrader_ParentIntroducingBrokerIdIsNull      = bool(false)
	Default_ProtoTrader_RankIdIsNull                         = bool(false)
	Default_ProtoTrader_HasRank                              = bool(false)
	Default_ProtoTrader_AccessRights                         = ProtoAccessRights_FULL_ACCESS
	Default_ProtoTrader_LimitedRiskMarginCalculationStrategy = ProtoLimitedRiskMarginCalculationStrategy_ACCORDING_TO_LEVERAGE
)

func (x *ProtoTrader) Reset() {
	*x = ProtoTrader{}
	mi := &file_CSModelMessages_External_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTrader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTrader) ProtoMessage() {}

func (x *ProtoTrader) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTrader.ProtoReflect.Descriptor instead.
func (*ProtoTrader) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{8}
}

func (x *ProtoTrader) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoTrader) GetLogin() int64 {
	if x != nil && x.Login != nil {
		return *x.Login
	}
	return 0
}

func (x *ProtoTrader) GetGroupId() int64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *ProtoTrader) GetBalance() int64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *ProtoTrader) GetAccountType() ProtoAccountType {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return Default_ProtoTrader_AccountType
}

func (x *ProtoTrader) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoTrader) GetPasswordHash() string {
	if x != nil && x.PasswordHash != nil {
		return *x.PasswordHash
	}
	return ""
}

func (x *ProtoTrader) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoTrader) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *ProtoTrader) GetCountryId() int64 {
	if x != nil && x.CountryId != nil {
		return *x.CountryId
	}
	return 0
}

func (x *ProtoTrader) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *ProtoTrader) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *ProtoTrader) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *ProtoTrader) GetZipCode() string {
	if x != nil && x.ZipCode != nil {
		return *x.ZipCode
	}
	return ""
}

func (x *ProtoTrader) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *ProtoTrader) GetPhonePassword() string {
	if x != nil && x.PhonePassword != nil {
		return *x.PhonePassword
	}
	return ""
}

func (x *ProtoTrader) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *ProtoTrader) GetDocumentId() string {
	if x != nil && x.DocumentId != nil {
		return *x.DocumentId
	}
	return ""
}

func (x *ProtoTrader) GetRegistrationTimestamp() int64 {
	if x != nil && x.RegistrationTimestamp != nil {
		return *x.RegistrationTimestamp
	}
	return 0
}

func (x *ProtoTrader) GetLastConnectTimestamp() int64 {
	if x != nil && x.LastConnectTimestamp != nil {
		return *x.LastConnectTimestamp
	}
	return 0
}

func (x *ProtoTrader) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *ProtoTrader) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoTrader) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *ProtoTrader) GetBalanceVersion() int64 {
	if x != nil && x.BalanceVersion != nil {
		return *x.BalanceVersion
	}
	return 0
}

func (x *ProtoTrader) GetIntroducingBroker() bool {
	if x != nil && x.IntroducingBroker != nil {
		return *x.IntroducingBroker
	}
	return false
}

func (x *ProtoTrader) GetParentIntroducingBrokerIdIsNull() bool {
	if x != nil && x.ParentIntroducingBrokerIdIsNull != nil {
		return *x.ParentIntroducingBrokerIdIsNull
	}
	return Default_ProtoTrader_ParentIntroducingBrokerIdIsNull
}

func (x *ProtoTrader) GetParentIntroducingBrokerId() int64 {
	if x != nil && x.ParentIntroducingBrokerId != nil {
		return *x.ParentIntroducingBrokerId
	}
	return 0
}

func (x *ProtoTrader) GetIntroducingBrokerCommissionRate() int32 {
	if x != nil && x.IntroducingBrokerCommissionRate != nil {
		return *x.IntroducingBrokerCommissionRate
	}
	return 0
}

func (x *ProtoTrader) GetPocketCommissionRate() int32 {
	if x != nil && x.PocketCommissionRate != nil {
		return *x.PocketCommissionRate
	}
	return 0
}

func (x *ProtoTrader) GetPocketMarkupRate() int32 {
	if x != nil && x.PocketMarkupRate != nil {
		return *x.PocketMarkupRate
	}
	return 0
}

func (x *ProtoTrader) GetDefaultIntroducingBrokerCommissionRate() int32 {
	if x != nil && x.DefaultIntroducingBrokerCommissionRate != nil {
		return *x.DefaultIntroducingBrokerCommissionRate
	}
	return 0
}

func (x *ProtoTrader) GetDefaultPocketCommissionRate() int32 {
	if x != nil && x.DefaultPocketCommissionRate != nil {
		return *x.DefaultPocketCommissionRate
	}
	return 0
}

func (x *ProtoTrader) GetDefaultPocketMarkupRate() int32 {
	if x != nil && x.DefaultPocketMarkupRate != nil {
		return *x.DefaultPocketMarkupRate
	}
	return 0
}

func (x *ProtoTrader) GetDefaultRebateRate() int32 {
	if x != nil && x.DefaultRebateRate != nil {
		return *x.DefaultRebateRate
	}
	return 0
}

func (x *ProtoTrader) GetDefaultIbCommissionsType() ProtoCommissionType {
	if x != nil && x.DefaultIbCommissionsType != nil {
		return *x.DefaultIbCommissionsType
	}
	return ProtoCommissionType_USD_PER_MILLION_USD
}

func (x *ProtoTrader) GetIbCommissionsType() ProtoCommissionType {
	if x != nil && x.IbCommissionsType != nil {
		return *x.IbCommissionsType
	}
	return ProtoCommissionType_USD_PER_MILLION_USD
}

func (x *ProtoTrader) GetManagerBonus() int64 {
	if x != nil && x.ManagerBonus != nil {
		return *x.ManagerBonus
	}
	return 0
}

func (x *ProtoTrader) GetIbBonus() int64 {
	if x != nil && x.IbBonus != nil {
		return *x.IbBonus
	}
	return 0
}

func (x *ProtoTrader) GetShowPersonalData() bool {
	if x != nil && x.ShowPersonalData != nil {
		return *x.ShowPersonalData
	}
	return false
}

func (x *ProtoTrader) GetSplitRevenue() bool {
	if x != nil && x.SplitRevenue != nil {
		return *x.SplitRevenue
	}
	return false
}

func (x *ProtoTrader) GetRankIdIsNull() bool {
	if x != nil && x.RankIdIsNull != nil {
		return *x.RankIdIsNull
	}
	return Default_ProtoTrader_RankIdIsNull
}

func (x *ProtoTrader) GetRankId() int32 {
	if x != nil && x.RankId != nil {
		return *x.RankId
	}
	return 0
}

func (x *ProtoTrader) GetHasRank() bool {
	if x != nil && x.HasRank != nil {
		return *x.HasRank
	}
	return Default_ProtoTrader_HasRank
}

func (x *ProtoTrader) GetRank() []*ProtoTraderRank {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *ProtoTrader) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *ProtoTrader) GetDefaultSplitRevenue() bool {
	if x != nil && x.DefaultSplitRevenue != nil {
		return *x.DefaultSplitRevenue
	}
	return false
}

func (x *ProtoTrader) GetAccessRights() ProtoAccessRights {
	if x != nil && x.AccessRights != nil {
		return *x.AccessRights
	}
	return Default_ProtoTrader_AccessRights
}

func (x *ProtoTrader) GetSendOwnStatement() bool {
	if x != nil && x.SendOwnStatement != nil {
		return *x.SendOwnStatement
	}
	return false
}

func (x *ProtoTrader) GetDepositAssetId() int64 {
	if x != nil && x.DepositAssetId != nil {
		return *x.DepositAssetId
	}
	return 0
}

func (x *ProtoTrader) GetSwapFree() bool {
	if x != nil && x.SwapFree != nil {
		return *x.SwapFree
	}
	return false
}

func (x *ProtoTrader) GetNonWithdrawableBonus() int64 {
	if x != nil && x.NonWithdrawableBonus != nil {
		return *x.NonWithdrawableBonus
	}
	return 0
}

func (x *ProtoTrader) GetLeverageInCents() uint32 {
	if x != nil && x.LeverageInCents != nil {
		return *x.LeverageInCents
	}
	return 0
}

func (x *ProtoTrader) GetMoveToIBGroup() bool {
	if x != nil && x.MoveToIBGroup != nil {
		return *x.MoveToIBGroup
	}
	return false
}

func (x *ProtoTrader) GetTotalMarginCalculationType() ProtoTotalMarginCalculationType {
	if x != nil && x.TotalMarginCalculationType != nil {
		return *x.TotalMarginCalculationType
	}
	return ProtoTotalMarginCalculationType_MAX
}

func (x *ProtoTrader) GetBrokerName() string {
	if x != nil && x.BrokerName != nil {
		return *x.BrokerName
	}
	return ""
}

func (x *ProtoTrader) GetMaxLeverage() uint32 {
	if x != nil && x.MaxLeverage != nil {
		return *x.MaxLeverage
	}
	return 0
}

func (x *ProtoTrader) GetFreeTrades() bool {
	if x != nil && x.FreeTrades != nil {
		return *x.FreeTrades
	}
	return false
}

func (x *ProtoTrader) GetVersion() int64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *ProtoTrader) GetSubAccountOf() int64 {
	if x != nil && x.SubAccountOf != nil {
		return *x.SubAccountOf
	}
	return 0
}

func (x *ProtoTrader) GetMaxNOP() uint32 {
	if x != nil && x.MaxNOP != nil {
		return *x.MaxNOP
	}
	return 0
}

func (x *ProtoTrader) GetDisablePasswordLogin() bool {
	if x != nil && x.DisablePasswordLogin != nil {
		return *x.DisablePasswordLogin
	}
	return false
}

func (x *ProtoTrader) GetIsLimitedRisk() bool {
	if x != nil && x.IsLimitedRisk != nil {
		return *x.IsLimitedRisk
	}
	return false
}

func (x *ProtoTrader) GetLimitedRiskMarginCalculationStrategy() ProtoLimitedRiskMarginCalculationStrategy {
	if x != nil && x.LimitedRiskMarginCalculationStrategy != nil {
		return *x.LimitedRiskMarginCalculationStrategy
	}
	return Default_ProtoTrader_LimitedRiskMarginCalculationStrategy
}

func (x *ProtoTrader) GetMoneyDigits() uint32 {
	if x != nil && x.MoneyDigits != nil {
		return *x.MoneyDigits
	}
	return 0
}

func (x *ProtoTrader) GetManagementFee() int64 {
	if x != nil && x.ManagementFee != nil {
		return *x.ManagementFee
	}
	return 0
}

func (x *ProtoTrader) GetSendStatementToBroker() bool {
	if x != nil && x.SendStatementToBroker != nil {
		return *x.SendStatementToBroker
	}
	return false
}

func (x *ProtoTrader) GetDefaultIbCommissionSymbolCategory() []*ProtoIbCommissionSymbolCategory {
	if x != nil {
		return x.DefaultIbCommissionSymbolCategory
	}
	return nil
}

func (x *ProtoTrader) GetIbCommissionSymbolCategory() []*ProtoIbCommissionSymbolCategory {
	if x != nil {
		return x.IbCommissionSymbolCategory
	}
	return nil
}

// IB Rank entity. Higher Rank gives more Bonuses to IB
type ProtoTraderRank struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 *int32                 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`                                 // ID of Rank entity
	Name               *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                              // Rank name
	Volume             *int64                 `protobuf:"varint,3,req,name=volume" json:"volume,omitempty"`                         // Volume which is necessary to get this rank in cents
	ParentIbPercentage *int32                 `protobuf:"varint,4,req,name=parentIbPercentage" json:"parentIbPercentage,omitempty"` // How much IB will pay to their Parent IB in %, 35 means 35%
	BrokerPercentage   *int32                 `protobuf:"varint,5,req,name=brokerPercentage" json:"brokerPercentage,omitempty"`     // How much IB will pay to Broker in %, 30 means 30%
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProtoTraderRank) Reset() {
	*x = ProtoTraderRank{}
	mi := &file_CSModelMessages_External_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTraderRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTraderRank) ProtoMessage() {}

func (x *ProtoTraderRank) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTraderRank.ProtoReflect.Descriptor instead.
func (*ProtoTraderRank) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{9}
}

func (x *ProtoTraderRank) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ProtoTraderRank) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoTraderRank) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoTraderRank) GetParentIbPercentage() int32 {
	if x != nil && x.ParentIbPercentage != nil {
		return *x.ParentIbPercentage
	}
	return 0
}

func (x *ProtoTraderRank) GetBrokerPercentage() int32 {
	if x != nil && x.BrokerPercentage != nil {
		return *x.BrokerPercentage
	}
	return 0
}

// Spread Constraint entity - spread limit settings for quotes from LP
type ProtoMinimumSpreadConstraint struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Enabled         *bool                  `protobuf:"varint,1,req,name=enabled" json:"enabled,omitempty"`                 // Enables functionality
	ThresholdDigits *uint32                `protobuf:"varint,2,req,name=thresholdDigits" json:"thresholdDigits,omitempty"` // Determines minimum spread (in Symbol.digits, from 0 to 1000), quotes with smaller spread will be ignored
	Bias            *ProtoQuoteType        `protobuf:"varint,3,req,name=bias,enum=ProtoQuoteType" json:"bias,omitempty"`   // Bid/Ask
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ProtoMinimumSpreadConstraint) Reset() {
	*x = ProtoMinimumSpreadConstraint{}
	mi := &file_CSModelMessages_External_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoMinimumSpreadConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMinimumSpreadConstraint) ProtoMessage() {}

func (x *ProtoMinimumSpreadConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMinimumSpreadConstraint.ProtoReflect.Descriptor instead.
func (*ProtoMinimumSpreadConstraint) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{10}
}

func (x *ProtoMinimumSpreadConstraint) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ProtoMinimumSpreadConstraint) GetThresholdDigits() uint32 {
	if x != nil && x.ThresholdDigits != nil {
		return *x.ThresholdDigits
	}
	return 0
}

func (x *ProtoMinimumSpreadConstraint) GetBias() ProtoQuoteType {
	if x != nil && x.Bias != nil {
		return *x.Bias
	}
	return ProtoQuoteType_BID
}

// Symbol entity which is available to manager (Trader gets ProtoSymbolEntity with fewer fields)
type ProtoManagerSymbol struct {
	state                             protoimpl.MessageState        `protogen:"open.v1"`
	SymbolId                          *int64                        `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`                                                           // ID of the Symbol
	Name                              *string                       `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                                                    // Name of the Symbol
	Digits                            *int32                        `protobuf:"varint,4,req,name=digits" json:"digits,omitempty"`                                                               // Amount of available digits after comma in the price
	PipPosition                       *int32                        `protobuf:"varint,5,req,name=pipPosition" json:"pipPosition,omitempty"`                                                     // Specifies digit which is used for determining of Pip Position
	LpEnabled                         *bool                         `protobuf:"varint,7,opt,name=lpEnabled" json:"lpEnabled,omitempty"`                                                         // Specifies whether Symbol is turned on for price streaming or not
	Enabled                           *bool                         `protobuf:"varint,8,opt,name=enabled" json:"enabled,omitempty"`                                                             // Specifies ether Symbol is visible in cTrader or not
	BidMarkUp                         *int32                        `protobuf:"varint,12,opt,name=bidMarkUp" json:"bidMarkUp,omitempty"`                                                        // Bid markup value
	AskMarkUp                         *int32                        `protobuf:"varint,13,opt,name=askMarkUp" json:"askMarkUp,omitempty"`                                                        // Ask markup value
	Description                       *string                       `protobuf:"bytes,15,opt,name=description" json:"description,omitempty"`                                                     // Description for the Symbol
	UtcLastUpdateTimestamp            *int64                        `protobuf:"varint,16,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`                              // UNIX timestamp in milliseconds of the last update of the Symbol
	SortingNumber                     *float64                      `protobuf:"fixed64,23,opt,name=sortingNumber" json:"sortingNumber,omitempty"`                                               // Number used to sort Symbols in Symbol Lists responses
	MeasurementUnits                  *string                       `protobuf:"bytes,24,opt,name=measurementUnits" json:"measurementUnits,omitempty"`                                           // Specifies which unit is traded under base Asset
	QuoteExpirationTimeout            *int32                        `protobuf:"varint,27,opt,name=quoteExpirationTimeout" json:"quoteExpirationTimeout,omitempty"`                              // Timeout for last quote expiration
	MinimumSpreadConstraint           *ProtoMinimumSpreadConstraint `protobuf:"bytes,30,opt,name=minimumSpreadConstraint" json:"minimumSpreadConstraint,omitempty"`                             // Refers to the applicable Spread Constraint entity
	LotSize                           *int64                        `protobuf:"varint,32,opt,name=lotSize" json:"lotSize,omitempty"`                                                            // Amount of units of the base Asset in one lot
	EnableShortSelling                *bool                         `protobuf:"varint,33,opt,name=enableShortSelling" json:"enableShortSelling,omitempty"`                                      // Specifies whether short selling is allowed or not
	SymbolCategoryId                  *int64                        `protobuf:"varint,35,opt,name=symbolCategoryId" json:"symbolCategoryId,omitempty"`                                          // ID of the Symbol Category where Symbol is located
	Favorite                          *bool                         `protobuf:"varint,37,opt,name=favorite" json:"favorite,omitempty"`                                                          // Specifies whether Symbol is favorite
	Tags                              *string                       `protobuf:"bytes,49,opt,name=tags" json:"tags,omitempty"`                                                                   // Custom tags. Used for searching Symbols
	BaseAssetId                       *int64                        `protobuf:"varint,53,opt,name=baseAssetId" json:"baseAssetId,omitempty"`                                                    // ID of the base Asset
	QuoteAssetId                      *int64                        `protobuf:"varint,54,opt,name=quoteAssetId" json:"quoteAssetId,omitempty"`                                                  // ID of the quote Asset
	TradingMode                       *ProtoTradingMode             `protobuf:"varint,58,opt,name=tradingMode,enum=ProtoTradingMode" json:"tradingMode,omitempty"`                              // Specified trading mode for the Symbol that limits scope of trading operations Default: ENABLED
	DefaultSwapRollover3Days          *ProtoDayOfWeek               `protobuf:"varint,9,opt,name=defaultSwapRollover3Days,enum=ProtoDayOfWeek,def=1" json:"defaultSwapRollover3Days,omitempty"` // Default day of 3x Swap
	DefaultSwapLong                   *float64                      `protobuf:"fixed64,10,opt,name=defaultSwapLong" json:"defaultSwapLong,omitempty"`                                           // Default value of Swap for long Positions
	DefaultSwapShort                  *float64                      `protobuf:"fixed64,11,opt,name=defaultSwapShort" json:"defaultSwapShort,omitempty"`                                         // Default value of Swap for short Positions
	DefaultLeverageId                 *int64                        `protobuf:"varint,56,opt,name=defaultLeverageId" json:"defaultLeverageId,omitempty"`                                        // Refers to default Dynamic Leverage entity
	PriceLiquidityFeedId              *uint32                       `protobuf:"varint,59,opt,name=priceLiquidityFeedId" json:"priceLiquidityFeedId,omitempty"`                                  // ID of Liquidity Feed for market data
	TradeLiquidityFeedId              *uint32                       `protobuf:"varint,60,opt,name=tradeLiquidityFeedId" json:"tradeLiquidityFeedId,omitempty"`                                  // ID of Liquidity Feed for trading
	DefaultDividendTime               *int64                        `protobuf:"varint,61,opt,name=defaultDividendTime" json:"defaultDividendTime,omitempty"`                                    // Default time for paying dividends
	Translation                       []*ProtoLocalization          `protobuf:"bytes,62,rep,name=translation" json:"translation,omitempty"`                                                     // Localisation setting for Trader
	ScheduleProfileId                 *int64                        `protobuf:"varint,66,opt,name=scheduleProfileId" json:"scheduleProfileId,omitempty"`                                        // Schedule Profile for Symbol
	DefaultCommissionProfileId        *int64                        `protobuf:"varint,67,opt,name=defaultCommissionProfileId" json:"defaultCommissionProfileId,omitempty"`                      // Default Commission Profile for Symbol
	DefaultVolumeProfileId            *int64                        `protobuf:"varint,68,opt,name=defaultVolumeProfileId" json:"defaultVolumeProfileId,omitempty"`                              // Default Volume Profile for Symbol
	DefaultExecutionProfileId         *int64                        `protobuf:"varint,69,opt,name=defaultExecutionProfileId" json:"defaultExecutionProfileId,omitempty"`                        // Default Execution Profile for Symbol
	AutochartistAlias                 *string                       `protobuf:"bytes,70,opt,name=autochartistAlias" json:"autochartistAlias,omitempty"`                                         // Name of the Symbol in Autochartist service. Used if Autochartist is enabled
	TradingCentralAlias               *string                       `protobuf:"bytes,71,opt,name=tradingCentralAlias" json:"tradingCentralAlias,omitempty"`                                     // Name of the Symbol in Trading Central service. Used if Trading Central is enabled
	DefaultProtectionProfileId        *int64                        `protobuf:"varint,72,opt,name=defaultProtectionProfileId" json:"defaultProtectionProfileId,omitempty"`                      // Default Protection Profile for Symbol
	DefaultSwapFreeProfileId          *int64                        `protobuf:"varint,73,opt,name=defaultSwapFreeProfileId" json:"defaultSwapFreeProfileId,omitempty"`                          // Default Swap Free Profile for Symbol
	DefaultGSLScheduleId              *int64                        `protobuf:"varint,74,opt,name=defaultGSLScheduleId" json:"defaultGSLScheduleId,omitempty"`                                  // Default GSL (Guaranteed Stop Loss) Schedule ID for Symbol
	HolidayProfileId                  *int64                        `protobuf:"varint,75,opt,name=holidayProfileId" json:"holidayProfileId,omitempty"`                                          // Symbol Holiday Profile ID
	BbspAlias                         *string                       `protobuf:"bytes,76,opt,name=bbspAlias" json:"bbspAlias,omitempty"`                                                         // Name for the Symbol for integration with BBSP
	FuturesSettings                   *ProtoFuturesSettings         `protobuf:"bytes,77,opt,name=futuresSettings" json:"futuresSettings,omitempty"`                                             // Settings for futures
	DefaultTradeNotificationProfileId *int64                        `protobuf:"varint,78,opt,name=defaultTradeNotificationProfileId" json:"defaultTradeNotificationProfileId,omitempty"`        // Default Trade Notification Profile for Symbol
	DefaultSwapTime                   *int32                        `protobuf:"varint,79,req,name=defaultSwapTime" json:"defaultSwapTime,omitempty"`                                            // Time in minutes from 00:00 (UTC) from which Swap Period is calculated
	DefaultSwapPeriod                 *int32                        `protobuf:"varint,80,req,name=defaultSwapPeriod" json:"defaultSwapPeriod,omitempty"`                                        // Swap is calculated every Swap Period (in hours)
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

// Default values for ProtoManagerSymbol fields.
const (
	Default_ProtoManagerSymbol_DefaultSwapRollover3Days = ProtoDayOfWeek_MONDAY
)

func (x *ProtoManagerSymbol) Reset() {
	*x = ProtoManagerSymbol{}
	mi := &file_CSModelMessages_External_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerSymbol) ProtoMessage() {}

func (x *ProtoManagerSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerSymbol.ProtoReflect.Descriptor instead.
func (*ProtoManagerSymbol) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{11}
}

func (x *ProtoManagerSymbol) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoManagerSymbol) GetDigits() int32 {
	if x != nil && x.Digits != nil {
		return *x.Digits
	}
	return 0
}

func (x *ProtoManagerSymbol) GetPipPosition() int32 {
	if x != nil && x.PipPosition != nil {
		return *x.PipPosition
	}
	return 0
}

func (x *ProtoManagerSymbol) GetLpEnabled() bool {
	if x != nil && x.LpEnabled != nil {
		return *x.LpEnabled
	}
	return false
}

func (x *ProtoManagerSymbol) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ProtoManagerSymbol) GetBidMarkUp() int32 {
	if x != nil && x.BidMarkUp != nil {
		return *x.BidMarkUp
	}
	return 0
}

func (x *ProtoManagerSymbol) GetAskMarkUp() int32 {
	if x != nil && x.AskMarkUp != nil {
		return *x.AskMarkUp
	}
	return 0
}

func (x *ProtoManagerSymbol) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoManagerSymbol) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoManagerSymbol) GetSortingNumber() float64 {
	if x != nil && x.SortingNumber != nil {
		return *x.SortingNumber
	}
	return 0
}

func (x *ProtoManagerSymbol) GetMeasurementUnits() string {
	if x != nil && x.MeasurementUnits != nil {
		return *x.MeasurementUnits
	}
	return ""
}

func (x *ProtoManagerSymbol) GetQuoteExpirationTimeout() int32 {
	if x != nil && x.QuoteExpirationTimeout != nil {
		return *x.QuoteExpirationTimeout
	}
	return 0
}

func (x *ProtoManagerSymbol) GetMinimumSpreadConstraint() *ProtoMinimumSpreadConstraint {
	if x != nil {
		return x.MinimumSpreadConstraint
	}
	return nil
}

func (x *ProtoManagerSymbol) GetLotSize() int64 {
	if x != nil && x.LotSize != nil {
		return *x.LotSize
	}
	return 0
}

func (x *ProtoManagerSymbol) GetEnableShortSelling() bool {
	if x != nil && x.EnableShortSelling != nil {
		return *x.EnableShortSelling
	}
	return false
}

func (x *ProtoManagerSymbol) GetSymbolCategoryId() int64 {
	if x != nil && x.SymbolCategoryId != nil {
		return *x.SymbolCategoryId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetFavorite() bool {
	if x != nil && x.Favorite != nil {
		return *x.Favorite
	}
	return false
}

func (x *ProtoManagerSymbol) GetTags() string {
	if x != nil && x.Tags != nil {
		return *x.Tags
	}
	return ""
}

func (x *ProtoManagerSymbol) GetBaseAssetId() int64 {
	if x != nil && x.BaseAssetId != nil {
		return *x.BaseAssetId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetQuoteAssetId() int64 {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetTradingMode() ProtoTradingMode {
	if x != nil && x.TradingMode != nil {
		return *x.TradingMode
	}
	return ProtoTradingMode_ENABLED
}

func (x *ProtoManagerSymbol) GetDefaultSwapRollover3Days() ProtoDayOfWeek {
	if x != nil && x.DefaultSwapRollover3Days != nil {
		return *x.DefaultSwapRollover3Days
	}
	return Default_ProtoManagerSymbol_DefaultSwapRollover3Days
}

func (x *ProtoManagerSymbol) GetDefaultSwapLong() float64 {
	if x != nil && x.DefaultSwapLong != nil {
		return *x.DefaultSwapLong
	}
	return 0
}

func (x *ProtoManagerSymbol) GetDefaultSwapShort() float64 {
	if x != nil && x.DefaultSwapShort != nil {
		return *x.DefaultSwapShort
	}
	return 0
}

func (x *ProtoManagerSymbol) GetDefaultLeverageId() int64 {
	if x != nil && x.DefaultLeverageId != nil {
		return *x.DefaultLeverageId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetPriceLiquidityFeedId() uint32 {
	if x != nil && x.PriceLiquidityFeedId != nil {
		return *x.PriceLiquidityFeedId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetTradeLiquidityFeedId() uint32 {
	if x != nil && x.TradeLiquidityFeedId != nil {
		return *x.TradeLiquidityFeedId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetDefaultDividendTime() int64 {
	if x != nil && x.DefaultDividendTime != nil {
		return *x.DefaultDividendTime
	}
	return 0
}

func (x *ProtoManagerSymbol) GetTranslation() []*ProtoLocalization {
	if x != nil {
		return x.Translation
	}
	return nil
}

func (x *ProtoManagerSymbol) GetScheduleProfileId() int64 {
	if x != nil && x.ScheduleProfileId != nil {
		return *x.ScheduleProfileId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetDefaultCommissionProfileId() int64 {
	if x != nil && x.DefaultCommissionProfileId != nil {
		return *x.DefaultCommissionProfileId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetDefaultVolumeProfileId() int64 {
	if x != nil && x.DefaultVolumeProfileId != nil {
		return *x.DefaultVolumeProfileId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetDefaultExecutionProfileId() int64 {
	if x != nil && x.DefaultExecutionProfileId != nil {
		return *x.DefaultExecutionProfileId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetAutochartistAlias() string {
	if x != nil && x.AutochartistAlias != nil {
		return *x.AutochartistAlias
	}
	return ""
}

func (x *ProtoManagerSymbol) GetTradingCentralAlias() string {
	if x != nil && x.TradingCentralAlias != nil {
		return *x.TradingCentralAlias
	}
	return ""
}

func (x *ProtoManagerSymbol) GetDefaultProtectionProfileId() int64 {
	if x != nil && x.DefaultProtectionProfileId != nil {
		return *x.DefaultProtectionProfileId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetDefaultSwapFreeProfileId() int64 {
	if x != nil && x.DefaultSwapFreeProfileId != nil {
		return *x.DefaultSwapFreeProfileId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetDefaultGSLScheduleId() int64 {
	if x != nil && x.DefaultGSLScheduleId != nil {
		return *x.DefaultGSLScheduleId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetHolidayProfileId() int64 {
	if x != nil && x.HolidayProfileId != nil {
		return *x.HolidayProfileId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetBbspAlias() string {
	if x != nil && x.BbspAlias != nil {
		return *x.BbspAlias
	}
	return ""
}

func (x *ProtoManagerSymbol) GetFuturesSettings() *ProtoFuturesSettings {
	if x != nil {
		return x.FuturesSettings
	}
	return nil
}

func (x *ProtoManagerSymbol) GetDefaultTradeNotificationProfileId() int64 {
	if x != nil && x.DefaultTradeNotificationProfileId != nil {
		return *x.DefaultTradeNotificationProfileId
	}
	return 0
}

func (x *ProtoManagerSymbol) GetDefaultSwapTime() int32 {
	if x != nil && x.DefaultSwapTime != nil {
		return *x.DefaultSwapTime
	}
	return 0
}

func (x *ProtoManagerSymbol) GetDefaultSwapPeriod() int32 {
	if x != nil && x.DefaultSwapPeriod != nil {
		return *x.DefaultSwapPeriod
	}
	return 0
}

// Archived Symbol entity
type ProtoArchivedSymbol struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SymbolId               *int64                 `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`                             // Symbol ID
	Name                   *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                      // Symbol name
	UtcLastUpdateTimestamp *int64                 `protobuf:"varint,3,req,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"` // UNIX timestamp in milliseconds of the last update of the Symbol
	Description            *string                `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`                        // Symbol description
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProtoArchivedSymbol) Reset() {
	*x = ProtoArchivedSymbol{}
	mi := &file_CSModelMessages_External_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoArchivedSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoArchivedSymbol) ProtoMessage() {}

func (x *ProtoArchivedSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoArchivedSymbol.ProtoReflect.Descriptor instead.
func (*ProtoArchivedSymbol) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{12}
}

func (x *ProtoArchivedSymbol) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoArchivedSymbol) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoArchivedSymbol) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoArchivedSymbol) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// Localisation settings entity
type ProtoLocalization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Locale        *string                `protobuf:"bytes,1,req,name=locale" json:"locale,omitempty"` // Localisation short name (up to 8 characters)
	Title         *string                `protobuf:"bytes,2,req,name=title" json:"title,omitempty"`   // Localisation descriptive name (up to 128 characters)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoLocalization) Reset() {
	*x = ProtoLocalization{}
	mi := &file_CSModelMessages_External_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLocalization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLocalization) ProtoMessage() {}

func (x *ProtoLocalization) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLocalization.ProtoReflect.Descriptor instead.
func (*ProtoLocalization) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{13}
}

func (x *ProtoLocalization) GetLocale() string {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return ""
}

func (x *ProtoLocalization) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

// Group entity. Groups are used to manage Trader settings and Manager permission. Each Trader belongs to one Group which determines their trading parameters
type ProtoGroup struct {
	state                         protoimpl.MessageState    `protogen:"open.v1"`
	GroupId                       *int64                    `protobuf:"varint,1,req,name=groupId" json:"groupId,omitempty"`                                              // ID of the Group
	Name                          *string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`                                                     // Name of the Group
	Enabled                       *bool                     `protobuf:"varint,3,opt,name=enabled" json:"enabled,omitempty"`                                              // Specifies whether Group is enabled (Trader's login are allowed) or not
	SwapEnabled                   *bool                     `protobuf:"varint,4,opt,name=swapEnabled" json:"swapEnabled,omitempty"`                                      // Specifies whether SWAP charging is enabled or not
	SwapAndDividendProfileId      *int64                    `protobuf:"varint,5,opt,name=swapAndDividendProfileId" json:"swapAndDividendProfileId,omitempty"`            // ID of Swap and Dividend profile
	MarginStopout                 *float64                  `protobuf:"fixed64,9,opt,name=marginStopout" json:"marginStopout,omitempty"`                                 // Margin Stop Out percentage (e.g. 0.50 = 50%)
	Description                   *string                   `protobuf:"bytes,11,opt,name=description" json:"description,omitempty"`                                      // Group description
	UtcLastUpdateTimestamp        *int64                    `protobuf:"varint,12,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`               // UNIX timestamp in milliseconds of the last Group modification
	PriceStreamId                 *int64                    `protobuf:"varint,13,opt,name=priceStreamId" json:"priceStreamId,omitempty"`                                 // ID of the related Price Stream
	Deleted                       *bool                     `protobuf:"varint,14,opt,name=deleted" json:"deleted,omitempty"`                                             // Specifies whether Group is deleted or not
	HasAccess                     *bool                     `protobuf:"varint,15,opt,name=hasAccess,def=0" json:"hasAccess,omitempty"`                                   // If TRUE then Manager has access to the Group and if FALSE then Manager doesn't have access to the Group
	Symbol                        []*ProtoGroupSymbol       `protobuf:"bytes,17,rep,name=symbol" json:"symbol,omitempty"`                                                // List of per Symbol settings
	DynamicCommission             []*ProtoDynamicCommission `protobuf:"bytes,18,rep,name=dynamicCommission" json:"dynamicCommission,omitempty"`                          // Parameters of the related Dynamic Commissions
	BonusConversionRate           *int64                    `protobuf:"varint,19,opt,name=bonusConversionRate" json:"bonusConversionRate,omitempty"`                     // Amount of traded lots to convert one Bonus USD into one deposit USD. Used if bonusConvertLots = 1
	BonusConvertLots              *bool                     `protobuf:"varint,20,opt,name=bonusConvertLots" json:"bonusConvertLots,omitempty"`                           // Specifies Bonus conversion strategy (1 – Lots into USD; 0 – USD volume into USD) Default: BONUS_CONVERSION_TYPE_USD
	BonusConversionRateLots       *int64                    `protobuf:"varint,21,opt,name=bonusConversionRateLots" json:"bonusConversionRateLots,omitempty"`             // Amount of traded USD volume to convert one Bonus USD into one deposit USD. Used if bonusConvertLots = 0
	IsDealingDesk                 *bool                     `protobuf:"varint,23,opt,name=isDealingDesk" json:"isDealingDesk,omitempty"`                                 // Specifies whether Group is Dealing Desk or not
	MaxAutoExecutionSizeProfileId *int64                    `protobuf:"varint,24,opt,name=maxAutoExecutionSizeProfileId" json:"maxAutoExecutionSizeProfileId,omitempty"` // ID of Max Auto Execution Profile
	BlockedChannels               *string                   `protobuf:"bytes,25,opt,name=blockedChannels" json:"blockedChannels,omitempty"`                              // List of channels blocked for trading with ';' as a separator. Channel is sent with trading commands
	FairStopOut                   *bool                     `protobuf:"varint,26,opt,name=fairStopOut" json:"fairStopOut,omitempty"`                                     // If TRUE then Position is fully closed on Stop Out
	RegionId                      *int64                    `protobuf:"varint,27,opt,name=regionId" json:"regionId,omitempty"`                                           // ID of Region which will be used for GUI settings of the Trader
	CopyDisabled                  *bool                     `protobuf:"varint,28,opt,name=copyDisabled,def=0" json:"copyDisabled,omitempty"`                             // If TRUE then Traders of the Group are unable to create sub-accounts for Copy service
	StopoutDisabled               *bool                     `protobuf:"varint,29,opt,name=stopoutDisabled,def=0" json:"stopoutDisabled,omitempty"`                       // If TRUE then Traders is not checked for breaching Stop-Out level
	InactivityGracePeriod         *int32                    `protobuf:"varint,30,opt,name=inactivityGracePeriod" json:"inactivityGracePeriod,omitempty"`                 // Grace period in days during which an Inactivity Fee is not charged for an Account since last filled Deal
	InactivityChargePeriod        *int32                    `protobuf:"varint,31,opt,name=inactivityChargePeriod" json:"inactivityChargePeriod,omitempty"`               // Period in days after which an Inactivity Fee is charged
	InactivityFeeAmount           *int32                    `protobuf:"varint,32,opt,name=inactivityFeeAmount" json:"inactivityFeeAmount,omitempty"`                     // Inactivity Fee amount in cents, specified in USD and converted to Deposit currency of an Account
	CopyProvidingDisabled         *bool                     `protobuf:"varint,33,opt,name=copyProvidingDisabled,def=0" json:"copyProvidingDisabled,omitempty"`           // If TRUE then Traders of the Group are unable to become Copy Provider. Logic is on Copy side Default: FALSE
	LegalEntityId                 *int64                    `protobuf:"varint,35,opt,name=legalEntityId" json:"legalEntityId,omitempty"`                                 // ID of Legal Entity
	DisablePasswordLogin          *bool                     `protobuf:"varint,36,opt,name=disablePasswordLogin" json:"disablePasswordLogin,omitempty"`                   // If TRUE then login by a password for Accounts in this Group is disabled. This password is not used to sign in to the trading applications. cTrader ID is used for this purpose. Password is only used for authenticating FIX API sessions
	AllowWorseGSL                 *bool                     `protobuf:"varint,37,opt,name=allowWorseGSL,def=1" json:"allowWorseGSL,omitempty"`                           // If TRUE then Traders are allowed to increase risk for Positions with Guaranteed Stop Loss
	IsFakeSpreadBetting           *bool                     `protobuf:"varint,38,opt,name=isFakeSpreadBetting" json:"isFakeSpreadBetting,omitempty"`                     // Account type is treated as Spread Betting (ProtoAccountType=SPREAD_BETTING) if Group of the Trader has isFakeSpreadBetting = TRUE
	NegativeBalanceProtection     *bool                     `protobuf:"varint,39,opt,name=negativeBalanceProtection" json:"negativeBalanceProtection,omitempty"`         // IF TRUE then will get deposited to his balance = 0 when his balance becomes negative
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

// Default values for ProtoGroup fields.
const (
	Default_ProtoGroup_HasAccess             = bool(false)
	Default_ProtoGroup_CopyDisabled          = bool(false)
	Default_ProtoGroup_StopoutDisabled       = bool(false)
	Default_ProtoGroup_CopyProvidingDisabled = bool(false)
	Default_ProtoGroup_AllowWorseGSL         = bool(true)
)

func (x *ProtoGroup) Reset() {
	*x = ProtoGroup{}
	mi := &file_CSModelMessages_External_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGroup) ProtoMessage() {}

func (x *ProtoGroup) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGroup.ProtoReflect.Descriptor instead.
func (*ProtoGroup) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{14}
}

func (x *ProtoGroup) GetGroupId() int64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *ProtoGroup) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoGroup) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ProtoGroup) GetSwapEnabled() bool {
	if x != nil && x.SwapEnabled != nil {
		return *x.SwapEnabled
	}
	return false
}

func (x *ProtoGroup) GetSwapAndDividendProfileId() int64 {
	if x != nil && x.SwapAndDividendProfileId != nil {
		return *x.SwapAndDividendProfileId
	}
	return 0
}

func (x *ProtoGroup) GetMarginStopout() float64 {
	if x != nil && x.MarginStopout != nil {
		return *x.MarginStopout
	}
	return 0
}

func (x *ProtoGroup) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoGroup) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoGroup) GetPriceStreamId() int64 {
	if x != nil && x.PriceStreamId != nil {
		return *x.PriceStreamId
	}
	return 0
}

func (x *ProtoGroup) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *ProtoGroup) GetHasAccess() bool {
	if x != nil && x.HasAccess != nil {
		return *x.HasAccess
	}
	return Default_ProtoGroup_HasAccess
}

func (x *ProtoGroup) GetSymbol() []*ProtoGroupSymbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *ProtoGroup) GetDynamicCommission() []*ProtoDynamicCommission {
	if x != nil {
		return x.DynamicCommission
	}
	return nil
}

func (x *ProtoGroup) GetBonusConversionRate() int64 {
	if x != nil && x.BonusConversionRate != nil {
		return *x.BonusConversionRate
	}
	return 0
}

func (x *ProtoGroup) GetBonusConvertLots() bool {
	if x != nil && x.BonusConvertLots != nil {
		return *x.BonusConvertLots
	}
	return false
}

func (x *ProtoGroup) GetBonusConversionRateLots() int64 {
	if x != nil && x.BonusConversionRateLots != nil {
		return *x.BonusConversionRateLots
	}
	return 0
}

func (x *ProtoGroup) GetIsDealingDesk() bool {
	if x != nil && x.IsDealingDesk != nil {
		return *x.IsDealingDesk
	}
	return false
}

func (x *ProtoGroup) GetMaxAutoExecutionSizeProfileId() int64 {
	if x != nil && x.MaxAutoExecutionSizeProfileId != nil {
		return *x.MaxAutoExecutionSizeProfileId
	}
	return 0
}

func (x *ProtoGroup) GetBlockedChannels() string {
	if x != nil && x.BlockedChannels != nil {
		return *x.BlockedChannels
	}
	return ""
}

func (x *ProtoGroup) GetFairStopOut() bool {
	if x != nil && x.FairStopOut != nil {
		return *x.FairStopOut
	}
	return false
}

func (x *ProtoGroup) GetRegionId() int64 {
	if x != nil && x.RegionId != nil {
		return *x.RegionId
	}
	return 0
}

func (x *ProtoGroup) GetCopyDisabled() bool {
	if x != nil && x.CopyDisabled != nil {
		return *x.CopyDisabled
	}
	return Default_ProtoGroup_CopyDisabled
}

func (x *ProtoGroup) GetStopoutDisabled() bool {
	if x != nil && x.StopoutDisabled != nil {
		return *x.StopoutDisabled
	}
	return Default_ProtoGroup_StopoutDisabled
}

func (x *ProtoGroup) GetInactivityGracePeriod() int32 {
	if x != nil && x.InactivityGracePeriod != nil {
		return *x.InactivityGracePeriod
	}
	return 0
}

func (x *ProtoGroup) GetInactivityChargePeriod() int32 {
	if x != nil && x.InactivityChargePeriod != nil {
		return *x.InactivityChargePeriod
	}
	return 0
}

func (x *ProtoGroup) GetInactivityFeeAmount() int32 {
	if x != nil && x.InactivityFeeAmount != nil {
		return *x.InactivityFeeAmount
	}
	return 0
}

func (x *ProtoGroup) GetCopyProvidingDisabled() bool {
	if x != nil && x.CopyProvidingDisabled != nil {
		return *x.CopyProvidingDisabled
	}
	return Default_ProtoGroup_CopyProvidingDisabled
}

func (x *ProtoGroup) GetLegalEntityId() int64 {
	if x != nil && x.LegalEntityId != nil {
		return *x.LegalEntityId
	}
	return 0
}

func (x *ProtoGroup) GetDisablePasswordLogin() bool {
	if x != nil && x.DisablePasswordLogin != nil {
		return *x.DisablePasswordLogin
	}
	return false
}

func (x *ProtoGroup) GetAllowWorseGSL() bool {
	if x != nil && x.AllowWorseGSL != nil {
		return *x.AllowWorseGSL
	}
	return Default_ProtoGroup_AllowWorseGSL
}

func (x *ProtoGroup) GetIsFakeSpreadBetting() bool {
	if x != nil && x.IsFakeSpreadBetting != nil {
		return *x.IsFakeSpreadBetting
	}
	return false
}

func (x *ProtoGroup) GetNegativeBalanceProtection() bool {
	if x != nil && x.NegativeBalanceProtection != nil {
		return *x.NegativeBalanceProtection
	}
	return false
}

// Group Symbol entity - per Symbol settings inside a Group
type ProtoGroupSymbol struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	SymbolId                   *int64                 `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`                                      // ID of the Group Symbol
	Enabled                    *bool                  `protobuf:"varint,2,req,name=enabled" json:"enabled,omitempty"`                                        // Specifies if Symbol is available for the Traders of the Group
	LeverageId                 *uint64                `protobuf:"varint,32,opt,name=leverageId" json:"leverageId,omitempty"`                                 // ID of Dynamic Leverage
	GslScheduleId              *uint64                `protobuf:"varint,35,opt,name=gslScheduleId" json:"gslScheduleId,omitempty"`                           // ID of GSL (Guaranteed Stop Loss) Schedule
	CommissionProfileId        *int64                 `protobuf:"varint,42,opt,name=commissionProfileId" json:"commissionProfileId,omitempty"`               // ID of Commission Profile
	VolumeProfileId            *int64                 `protobuf:"varint,43,opt,name=volumeProfileId" json:"volumeProfileId,omitempty"`                       // ID of Volume Profile
	ExecutionProfileId         *int64                 `protobuf:"varint,44,opt,name=executionProfileId" json:"executionProfileId,omitempty"`                 // ID of Execution Profile
	ProtectionProfileId        *int64                 `protobuf:"varint,45,opt,name=protectionProfileId" json:"protectionProfileId,omitempty"`               // ID of Protection Profile
	SwapFreeProfileId          *int64                 `protobuf:"varint,46,opt,name=swapFreeProfileId" json:"swapFreeProfileId,omitempty"`                   // ID of Swap Free Profile
	TradeNotificationProfileId *int64                 `protobuf:"varint,47,opt,name=tradeNotificationProfileId" json:"tradeNotificationProfileId,omitempty"` // ID of Trade Notification Profile
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ProtoGroupSymbol) Reset() {
	*x = ProtoGroupSymbol{}
	mi := &file_CSModelMessages_External_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoGroupSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGroupSymbol) ProtoMessage() {}

func (x *ProtoGroupSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGroupSymbol.ProtoReflect.Descriptor instead.
func (*ProtoGroupSymbol) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{15}
}

func (x *ProtoGroupSymbol) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoGroupSymbol) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ProtoGroupSymbol) GetLeverageId() uint64 {
	if x != nil && x.LeverageId != nil {
		return *x.LeverageId
	}
	return 0
}

func (x *ProtoGroupSymbol) GetGslScheduleId() uint64 {
	if x != nil && x.GslScheduleId != nil {
		return *x.GslScheduleId
	}
	return 0
}

func (x *ProtoGroupSymbol) GetCommissionProfileId() int64 {
	if x != nil && x.CommissionProfileId != nil {
		return *x.CommissionProfileId
	}
	return 0
}

func (x *ProtoGroupSymbol) GetVolumeProfileId() int64 {
	if x != nil && x.VolumeProfileId != nil {
		return *x.VolumeProfileId
	}
	return 0
}

func (x *ProtoGroupSymbol) GetExecutionProfileId() int64 {
	if x != nil && x.ExecutionProfileId != nil {
		return *x.ExecutionProfileId
	}
	return 0
}

func (x *ProtoGroupSymbol) GetProtectionProfileId() int64 {
	if x != nil && x.ProtectionProfileId != nil {
		return *x.ProtectionProfileId
	}
	return 0
}

func (x *ProtoGroupSymbol) GetSwapFreeProfileId() int64 {
	if x != nil && x.SwapFreeProfileId != nil {
		return *x.SwapFreeProfileId
	}
	return 0
}

func (x *ProtoGroupSymbol) GetTradeNotificationProfileId() int64 {
	if x != nil && x.TradeNotificationProfileId != nil {
		return *x.TradeNotificationProfileId
	}
	return 0
}

// Group Symbol entity (with limited number of fields)
type ProtoLightGroup struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	GroupId                       *int64                 `protobuf:"varint,1,req,name=groupId" json:"groupId,omitempty"`                                              // ID of the Group
	Name                          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`                                                     // Name of the Group
	Enabled                       *bool                  `protobuf:"varint,3,req,name=enabled" json:"enabled,omitempty"`                                              // Specifies whether Group is enabled (Trader's login are allowed) or not
	SwapEnabled                   *bool                  `protobuf:"varint,4,opt,name=swapEnabled" json:"swapEnabled,omitempty"`                                      // Specifies whether SWAP charging is enabled or not
	MarginStopout                 *float64               `protobuf:"fixed64,9,opt,name=marginStopout" json:"marginStopout,omitempty"`                                 // Margin Stop Out percentage (e.g. 0.50 = 50%)
	Description                   *string                `protobuf:"bytes,11,opt,name=description" json:"description,omitempty"`                                      // Group description
	PriceStreamId                 *int64                 `protobuf:"varint,13,opt,name=priceStreamId" json:"priceStreamId,omitempty"`                                 // ID of the related Price Stream
	Deleted                       *bool                  `protobuf:"varint,14,opt,name=deleted" json:"deleted,omitempty"`                                             // Specifies whether Group is deleted or not
	HasAccess                     *bool                  `protobuf:"varint,15,opt,name=hasAccess,def=0" json:"hasAccess,omitempty"`                                   // If TRUE then Manager has access to the group and if FALSE then Manager doesn't have access to the group
	IsDealingDesk                 *bool                  `protobuf:"varint,23,opt,name=isDealingDesk" json:"isDealingDesk,omitempty"`                                 // Specifies whether Group is Dealing Desk or not
	MaxAutoExecutionSizeProfileId *int64                 `protobuf:"varint,24,opt,name=maxAutoExecutionSizeProfileId" json:"maxAutoExecutionSizeProfileId,omitempty"` // ID of Max Auto Execution Size Profile
	RegionId                      *int64                 `protobuf:"varint,25,opt,name=regionId" json:"regionId,omitempty"`                                           // ID of Region which will be used for GUI settings of the Trader
	CopyDisabled                  *bool                  `protobuf:"varint,26,opt,name=copyDisabled,def=0" json:"copyDisabled,omitempty"`                             // If TRUE then Traders of the Group are unable to create sub-accounts for Copy service
	CopyProvidingDisabled         *bool                  `protobuf:"varint,27,opt,name=copyProvidingDisabled,def=0" json:"copyProvidingDisabled,omitempty"`           // If TRUE then Traders of the Group are unable to become Copy Provider. Logic is on Copy side Default: FALSE
	IsFakeSpreadBetting           *bool                  `protobuf:"varint,28,opt,name=isFakeSpreadBetting" json:"isFakeSpreadBetting,omitempty"`                     // Account type is treated as Spread Betting (ProtoAccountType=SPREAD_BETTING) if Group of the Trader has isFakeSpreadBetting = TRUE
	NegativeBalanceProtection     *bool                  `protobuf:"varint,29,opt,name=negativeBalanceProtection" json:"negativeBalanceProtection,omitempty"`         // IF TRUE then will get deposited to his balance = 0 when his balance becomes negative
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

// Default values for ProtoLightGroup fields.
const (
	Default_ProtoLightGroup_HasAccess             = bool(false)
	Default_ProtoLightGroup_CopyDisabled          = bool(false)
	Default_ProtoLightGroup_CopyProvidingDisabled = bool(false)
)

func (x *ProtoLightGroup) Reset() {
	*x = ProtoLightGroup{}
	mi := &file_CSModelMessages_External_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLightGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLightGroup) ProtoMessage() {}

func (x *ProtoLightGroup) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLightGroup.ProtoReflect.Descriptor instead.
func (*ProtoLightGroup) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{16}
}

func (x *ProtoLightGroup) GetGroupId() int64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *ProtoLightGroup) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoLightGroup) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ProtoLightGroup) GetSwapEnabled() bool {
	if x != nil && x.SwapEnabled != nil {
		return *x.SwapEnabled
	}
	return false
}

func (x *ProtoLightGroup) GetMarginStopout() float64 {
	if x != nil && x.MarginStopout != nil {
		return *x.MarginStopout
	}
	return 0
}

func (x *ProtoLightGroup) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoLightGroup) GetPriceStreamId() int64 {
	if x != nil && x.PriceStreamId != nil {
		return *x.PriceStreamId
	}
	return 0
}

func (x *ProtoLightGroup) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *ProtoLightGroup) GetHasAccess() bool {
	if x != nil && x.HasAccess != nil {
		return *x.HasAccess
	}
	return Default_ProtoLightGroup_HasAccess
}

func (x *ProtoLightGroup) GetIsDealingDesk() bool {
	if x != nil && x.IsDealingDesk != nil {
		return *x.IsDealingDesk
	}
	return false
}

func (x *ProtoLightGroup) GetMaxAutoExecutionSizeProfileId() int64 {
	if x != nil && x.MaxAutoExecutionSizeProfileId != nil {
		return *x.MaxAutoExecutionSizeProfileId
	}
	return 0
}

func (x *ProtoLightGroup) GetRegionId() int64 {
	if x != nil && x.RegionId != nil {
		return *x.RegionId
	}
	return 0
}

func (x *ProtoLightGroup) GetCopyDisabled() bool {
	if x != nil && x.CopyDisabled != nil {
		return *x.CopyDisabled
	}
	return Default_ProtoLightGroup_CopyDisabled
}

func (x *ProtoLightGroup) GetCopyProvidingDisabled() bool {
	if x != nil && x.CopyProvidingDisabled != nil {
		return *x.CopyProvidingDisabled
	}
	return Default_ProtoLightGroup_CopyProvidingDisabled
}

func (x *ProtoLightGroup) GetIsFakeSpreadBetting() bool {
	if x != nil && x.IsFakeSpreadBetting != nil {
		return *x.IsFakeSpreadBetting
	}
	return false
}

func (x *ProtoLightGroup) GetNegativeBalanceProtection() bool {
	if x != nil && x.NegativeBalanceProtection != nil {
		return *x.NegativeBalanceProtection
	}
	return false
}

// Dynamic Commission type
type ProtoDynamicCommission struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MonthlyVolume *int64                 `protobuf:"varint,2,req,name=monthlyVolume" json:"monthlyVolume,omitempty"` // Monthly volume in cents
	Discount      *int64                 `protobuf:"varint,3,req,name=discount" json:"discount,omitempty"`           // Discount amount in % multiplied by 100: min = 0.01%, max = 100%, step = 0.01%. Value of 4321 means 43.21%
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoDynamicCommission) Reset() {
	*x = ProtoDynamicCommission{}
	mi := &file_CSModelMessages_External_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDynamicCommission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDynamicCommission) ProtoMessage() {}

func (x *ProtoDynamicCommission) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDynamicCommission.ProtoReflect.Descriptor instead.
func (*ProtoDynamicCommission) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{17}
}

func (x *ProtoDynamicCommission) GetMonthlyVolume() int64 {
	if x != nil && x.MonthlyVolume != nil {
		return *x.MonthlyVolume
	}
	return 0
}

func (x *ProtoDynamicCommission) GetDiscount() int64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

// Server Settings type
type ProtoServerSetting struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Key           *ProtoServerSettingType `protobuf:"varint,1,req,name=key,enum=ProtoServerSettingType" json:"key,omitempty"` // Setting type
	Value         *string                 `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`                          // Value of the setting
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoServerSetting) Reset() {
	*x = ProtoServerSetting{}
	mi := &file_CSModelMessages_External_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoServerSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoServerSetting) ProtoMessage() {}

func (x *ProtoServerSetting) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoServerSetting.ProtoReflect.Descriptor instead.
func (*ProtoServerSetting) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{18}
}

func (x *ProtoServerSetting) GetKey() ProtoServerSettingType {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ProtoServerSettingType_END_OF_DAY_TIME
}

func (x *ProtoServerSetting) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Manager entity
type ProtoManager struct {
	state                  protoimpl.MessageState   `protogen:"open.v1"`
	ManagerId              *int64                   `protobuf:"varint,1,req,name=managerId" json:"managerId,omitempty"`                               // ID of Manager
	Login                  *int64                   `protobuf:"varint,2,req,name=login" json:"login,omitempty"`                                       // Login of Manager
	Enabled                *bool                    `protobuf:"varint,3,req,name=enabled" json:"enabled,omitempty"`                                   // IF FALSE login is disabled
	Group                  []int64                  `protobuf:"varint,4,rep,packed,name=group" json:"group,omitempty"`                                // List of Groups available for Manager. Manager has access to Traders, Positions, Orders etc. only for Traders which are in their Groups
	Email                  *string                  `protobuf:"bytes,5,req,name=email" json:"email,omitempty"`                                        // Email of the Manager
	Name                   *string                  `protobuf:"bytes,6,req,name=name" json:"name,omitempty"`                                          // Name of the Manager
	PasswordHash           *string                  `protobuf:"bytes,7,opt,name=passwordHash" json:"passwordHash,omitempty"`                          // Hashed password of the manager (MD5 of password in lower case in utf-8)
	UtcLastUpdateTimestamp *int64                   `protobuf:"varint,8,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`     // UNIX timestamp in milliseconds of the last update of the Manager
	Permission             []ProtoManagerPermission `protobuf:"varint,9,rep,name=permission,enum=ProtoManagerPermission" json:"permission,omitempty"` // List of Manager permissions
	Deleted                *bool                    `protobuf:"varint,11,opt,name=deleted" json:"deleted,omitempty"`                                  // IF TRUE then Manager is deleted
	RegionId               []int64                  `protobuf:"varint,12,rep,packed,name=regionId" json:"regionId,omitempty"`                         // List of Jurisdictions that is used by the Client app (not server) to limit access to personal data of a user from another Legal Entity
	Manager                []int64                  `protobuf:"varint,13,rep,packed,name=manager" json:"manager,omitempty"`                           // List of Managers this Manager has access to
	SpecificGroupId        []int64                  `protobuf:"varint,14,rep,packed,name=specificGroupId" json:"specificGroupId,omitempty"`           // List of Manager's Groups
	GroupMask              *string                  `protobuf:"bytes,15,opt,name=groupMask" json:"groupMask,omitempty"`                               // Mask to specify access to Groups by pattern matching by Group name. Patterns are separated by ";" and "*" means from 0 to several symbols (any). Example groupMask: abc* corresponds to Groups with names abc, abcd, abcd45 etc
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProtoManager) Reset() {
	*x = ProtoManager{}
	mi := &file_CSModelMessages_External_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManager) ProtoMessage() {}

func (x *ProtoManager) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManager.ProtoReflect.Descriptor instead.
func (*ProtoManager) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{19}
}

func (x *ProtoManager) GetManagerId() int64 {
	if x != nil && x.ManagerId != nil {
		return *x.ManagerId
	}
	return 0
}

func (x *ProtoManager) GetLogin() int64 {
	if x != nil && x.Login != nil {
		return *x.Login
	}
	return 0
}

func (x *ProtoManager) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ProtoManager) GetGroup() []int64 {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ProtoManager) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *ProtoManager) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoManager) GetPasswordHash() string {
	if x != nil && x.PasswordHash != nil {
		return *x.PasswordHash
	}
	return ""
}

func (x *ProtoManager) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoManager) GetPermission() []ProtoManagerPermission {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *ProtoManager) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *ProtoManager) GetRegionId() []int64 {
	if x != nil {
		return x.RegionId
	}
	return nil
}

func (x *ProtoManager) GetManager() []int64 {
	if x != nil {
		return x.Manager
	}
	return nil
}

func (x *ProtoManager) GetSpecificGroupId() []int64 {
	if x != nil {
		return x.SpecificGroupId
	}
	return nil
}

func (x *ProtoManager) GetGroupMask() string {
	if x != nil && x.GroupMask != nil {
		return *x.GroupMask
	}
	return ""
}

// Country entity
type ProtoCountry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CountryId     *int64                 `protobuf:"varint,1,req,name=countryId" json:"countryId,omitempty"`        // ID of the Country
	Name          *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                   // Name of the Country
	CountryA2Code *string                `protobuf:"bytes,3,opt,name=countryA2Code" json:"countryA2Code,omitempty"` // ISO Code of the Country
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoCountry) Reset() {
	*x = ProtoCountry{}
	mi := &file_CSModelMessages_External_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCountry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCountry) ProtoMessage() {}

func (x *ProtoCountry) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCountry.ProtoReflect.Descriptor instead.
func (*ProtoCountry) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{20}
}

func (x *ProtoCountry) GetCountryId() int64 {
	if x != nil && x.CountryId != nil {
		return *x.CountryId
	}
	return 0
}

func (x *ProtoCountry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoCountry) GetCountryA2Code() string {
	if x != nil && x.CountryA2Code != nil {
		return *x.CountryA2Code
	}
	return ""
}

// Record with data about exposure per Symbol
type ProtoExposureSymbolRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SymbolId      *int64                 `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`                    // ID of the Symbol
	BookType      *ProtoBookType         `protobuf:"varint,2,req,name=bookType,enum=ProtoBookType" json:"bookType,omitempty"` // Book type
	PositionCount *int32                 `protobuf:"varint,3,req,name=positionCount" json:"positionCount,omitempty"`          // Number of Positions
	BuyVolume     *int64                 `protobuf:"varint,4,req,name=buyVolume" json:"buyVolume,omitempty"`                  // Volume for buy side in USD
	SellVolume    *int64                 `protobuf:"varint,5,req,name=sellVolume" json:"sellVolume,omitempty"`                // Sell volume in USD
	BuyVwap       *float64               `protobuf:"fixed64,6,req,name=buyVwap" json:"buyVwap,omitempty"`                     // VWAP (volume weighted average price) for buy side
	SellVwap      *float64               `protobuf:"fixed64,7,req,name=sellVwap" json:"sellVwap,omitempty"`                   // VWAP (volume weighted average price) for sell side
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoExposureSymbolRecord) Reset() {
	*x = ProtoExposureSymbolRecord{}
	mi := &file_CSModelMessages_External_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoExposureSymbolRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoExposureSymbolRecord) ProtoMessage() {}

func (x *ProtoExposureSymbolRecord) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoExposureSymbolRecord.ProtoReflect.Descriptor instead.
func (*ProtoExposureSymbolRecord) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{21}
}

func (x *ProtoExposureSymbolRecord) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoExposureSymbolRecord) GetBookType() ProtoBookType {
	if x != nil && x.BookType != nil {
		return *x.BookType
	}
	return ProtoBookType_BOOK_A
}

func (x *ProtoExposureSymbolRecord) GetPositionCount() int32 {
	if x != nil && x.PositionCount != nil {
		return *x.PositionCount
	}
	return 0
}

func (x *ProtoExposureSymbolRecord) GetBuyVolume() int64 {
	if x != nil && x.BuyVolume != nil {
		return *x.BuyVolume
	}
	return 0
}

func (x *ProtoExposureSymbolRecord) GetSellVolume() int64 {
	if x != nil && x.SellVolume != nil {
		return *x.SellVolume
	}
	return 0
}

func (x *ProtoExposureSymbolRecord) GetBuyVwap() float64 {
	if x != nil && x.BuyVwap != nil {
		return *x.BuyVwap
	}
	return 0
}

func (x *ProtoExposureSymbolRecord) GetSellVwap() float64 {
	if x != nil && x.SellVwap != nil {
		return *x.SellVwap
	}
	return 0
}

// Asset entity
type ProtoAsset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AssetId       *int64                 `protobuf:"varint,1,req,name=assetId" json:"assetId,omitempty"`               // Asset ID
	Name          *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                      // Asset name
	Description   *string                `protobuf:"bytes,3,req,name=description" json:"description,omitempty"`        // Asset description
	Type          *ProtoAssetType        `protobuf:"varint,4,req,name=type,enum=ProtoAssetType" json:"type,omitempty"` // Asset type
	DepositAsset  *bool                  `protobuf:"varint,5,req,name=depositAsset" json:"depositAsset,omitempty"`     // Asset is used as a deposit Asset
	Depositable   *bool                  `protobuf:"varint,6,req,name=depositable" json:"depositable,omitempty"`       // Asset could be used as a deposit currency
	DisplayName   *string                `protobuf:"bytes,7,opt,name=displayName" json:"displayName,omitempty"`        // Name of the Asset to be used on UI
	Major         *bool                  `protobuf:"varint,8,opt,name=major" json:"major,omitempty"`                   // If TRUE then Asset will be used for conversion chains
	Digits        *int32                 `protobuf:"varint,9,opt,name=digits" json:"digits,omitempty"`                 // Number of digits allowed for Asset. Precision of the Asset
	CalendarAlias *string                `protobuf:"bytes,10,opt,name=calendarAlias" json:"calendarAlias,omitempty"`   // Alias to subscribe to Calendar News for the Asset News
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoAsset) Reset() {
	*x = ProtoAsset{}
	mi := &file_CSModelMessages_External_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoAsset) ProtoMessage() {}

func (x *ProtoAsset) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoAsset.ProtoReflect.Descriptor instead.
func (*ProtoAsset) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{22}
}

func (x *ProtoAsset) GetAssetId() int64 {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return 0
}

func (x *ProtoAsset) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoAsset) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoAsset) GetType() ProtoAssetType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ProtoAssetType_PROTO_FOREX
}

func (x *ProtoAsset) GetDepositAsset() bool {
	if x != nil && x.DepositAsset != nil {
		return *x.DepositAsset
	}
	return false
}

func (x *ProtoAsset) GetDepositable() bool {
	if x != nil && x.Depositable != nil {
		return *x.Depositable
	}
	return false
}

func (x *ProtoAsset) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *ProtoAsset) GetMajor() bool {
	if x != nil && x.Major != nil {
		return *x.Major
	}
	return false
}

func (x *ProtoAsset) GetDigits() int32 {
	if x != nil && x.Digits != nil {
		return *x.Digits
	}
	return 0
}

func (x *ProtoAsset) GetCalendarAlias() string {
	if x != nil && x.CalendarAlias != nil {
		return *x.CalendarAlias
	}
	return ""
}

// Price Stream entity
type ProtoPriceStream struct {
	state                  protoimpl.MessageState    `protogen:"open.v1"`
	PriceStreamId          *int64                    `protobuf:"varint,1,req,name=priceStreamId" json:"priceStreamId,omitempty"`                   // ID of Price Stream
	Name                   *string                   `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                      // Name of Price Stream
	Description            *string                   `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`                        // Description of Price Stream
	Deleted                *bool                     `protobuf:"varint,4,opt,name=deleted" json:"deleted,omitempty"`                               // If TRUE then Price Stream is deleted
	UtcLastUpdateTimestamp *int64                    `protobuf:"varint,5,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"` // UNIX timestamp of the last update of the Price Stream
	PriceStreamSymbol      []*ProtoPriceStreamSymbol `protobuf:"bytes,6,rep,name=priceStreamSymbol" json:"priceStreamSymbol,omitempty"`            // Price Stream Symbols
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProtoPriceStream) Reset() {
	*x = ProtoPriceStream{}
	mi := &file_CSModelMessages_External_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPriceStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPriceStream) ProtoMessage() {}

func (x *ProtoPriceStream) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPriceStream.ProtoReflect.Descriptor instead.
func (*ProtoPriceStream) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{23}
}

func (x *ProtoPriceStream) GetPriceStreamId() int64 {
	if x != nil && x.PriceStreamId != nil {
		return *x.PriceStreamId
	}
	return 0
}

func (x *ProtoPriceStream) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoPriceStream) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoPriceStream) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *ProtoPriceStream) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoPriceStream) GetPriceStreamSymbol() []*ProtoPriceStreamSymbol {
	if x != nil {
		return x.PriceStreamSymbol
	}
	return nil
}

// Price Stream settings per Symbol
type ProtoPriceStreamSymbol struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SymbolId         *int64                 `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`                 // ID of the Symbol
	BidMarkup        *int32                 `protobuf:"varint,2,req,name=bidMarkup" json:"bidMarkup,omitempty"`               // Bid markup value (according to markup type)
	AskMarkup        *int32                 `protobuf:"varint,3,req,name=askMarkup" json:"askMarkup,omitempty"`               // Ask markup value (according to markup type)
	MarkupIsRelative *bool                  `protobuf:"varint,4,opt,name=markupIsRelative" json:"markupIsRelative,omitempty"` // Specifies type of the markup (1 = relative; 0 = absolute)
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProtoPriceStreamSymbol) Reset() {
	*x = ProtoPriceStreamSymbol{}
	mi := &file_CSModelMessages_External_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoPriceStreamSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPriceStreamSymbol) ProtoMessage() {}

func (x *ProtoPriceStreamSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPriceStreamSymbol.ProtoReflect.Descriptor instead.
func (*ProtoPriceStreamSymbol) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{24}
}

func (x *ProtoPriceStreamSymbol) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoPriceStreamSymbol) GetBidMarkup() int32 {
	if x != nil && x.BidMarkup != nil {
		return *x.BidMarkup
	}
	return 0
}

func (x *ProtoPriceStreamSymbol) GetAskMarkup() int32 {
	if x != nil && x.AskMarkup != nil {
		return *x.AskMarkup
	}
	return 0
}

func (x *ProtoPriceStreamSymbol) GetMarkupIsRelative() bool {
	if x != nil && x.MarkupIsRelative != nil {
		return *x.MarkupIsRelative
	}
	return false
}

// Represents time frame of Symbol Session
type ProtoInterval struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	StartSecond          *uint32                `protobuf:"varint,3,req,name=startSecond" json:"startSecond,omitempty"`                   // Start time of the Session. Seconds from the beginning of Sunday 00:00:00
	EndSecond            *uint32                `protobuf:"varint,4,req,name=endSecond" json:"endSecond,omitempty"`                       // End time of the Session. Seconds from the beginning of Sunday 00:00:00
	IsGlobalSessionStart *bool                  `protobuf:"varint,5,opt,name=isGlobalSessionStart" json:"isGlobalSessionStart,omitempty"` // If TRUE then Session start is considered as a start of the Global Session. Used for MOO desired timestamp validation
	IsGlobalSessionEnd   *bool                  `protobuf:"varint,6,opt,name=isGlobalSessionEnd" json:"isGlobalSessionEnd,omitempty"`     // If TRUE then Session end is considered as end of the Global session. SpotEvent.sessionClose, high, low will be regenerated
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ProtoInterval) Reset() {
	*x = ProtoInterval{}
	mi := &file_CSModelMessages_External_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoInterval) ProtoMessage() {}

func (x *ProtoInterval) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoInterval.ProtoReflect.Descriptor instead.
func (*ProtoInterval) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{25}
}

func (x *ProtoInterval) GetStartSecond() uint32 {
	if x != nil && x.StartSecond != nil {
		return *x.StartSecond
	}
	return 0
}

func (x *ProtoInterval) GetEndSecond() uint32 {
	if x != nil && x.EndSecond != nil {
		return *x.EndSecond
	}
	return 0
}

func (x *ProtoInterval) GetIsGlobalSessionStart() bool {
	if x != nil && x.IsGlobalSessionStart != nil {
		return *x.IsGlobalSessionStart
	}
	return false
}

func (x *ProtoInterval) GetIsGlobalSessionEnd() bool {
	if x != nil && x.IsGlobalSessionEnd != nil {
		return *x.IsGlobalSessionEnd
	}
	return false
}

// Liquidity Feed per Symbol settings
type ProtoLiquidityFeedSymbol struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	SymbolId              *int32                 `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`                           // ID of the Liquidity Feed Symbol
	PriceAlias            *string                `protobuf:"bytes,2,opt,name=priceAlias" json:"priceAlias,omitempty"`                        // Symbol Name or ID on LP side for pricing. Should be provided by the LP
	TradeAlias            *string                `protobuf:"bytes,3,opt,name=tradeAlias" json:"tradeAlias,omitempty"`                        // Symbol Name or ID on LP side for trading. Should be provided by the LP
	LiquidityFeedSymbolId *int64                 `protobuf:"varint,4,req,name=liquidityFeedSymbolId" json:"liquidityFeedSymbolId,omitempty"` // ID of Liquidity Feed Symbol
	LiquidityFeedId       *int64                 `protobuf:"varint,5,req,name=liquidityFeedId" json:"liquidityFeedId,omitempty"`             // ID of Liquidity Feed
	SendInLots            *bool                  `protobuf:"varint,6,req,name=sendInLots" json:"sendInLots,omitempty"`                       // Determines if Volume in Order requests to LP should be sent in Lots. Also determines logic of interpretation of volume in execution events from LP
	DealExpirationTimeout *int64                 `protobuf:"varint,7,req,name=dealExpirationTimeout" json:"dealExpirationTimeout,omitempty"` // Timeout in milliseconds for receiving execution result from LP
	NoQuoteTimeout        *int64                 `protobuf:"varint,8,req,name=noQuoteTimeout" json:"noQuoteTimeout,omitempty"`               // Timeout in milliseconds for receiving quotes from LP
	LpLotSize             *int64                 `protobuf:"varint,9,opt,name=lpLotSize" json:"lpLotSize,omitempty"`                         // Lot size on LP side
	Product               *int32                 `protobuf:"varint,10,opt,name=product" json:"product,omitempty"`                            // Specific value used by some LPs for different purposes. Get details for specific LP from Spotware support
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ProtoLiquidityFeedSymbol) Reset() {
	*x = ProtoLiquidityFeedSymbol{}
	mi := &file_CSModelMessages_External_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLiquidityFeedSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLiquidityFeedSymbol) ProtoMessage() {}

func (x *ProtoLiquidityFeedSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLiquidityFeedSymbol.ProtoReflect.Descriptor instead.
func (*ProtoLiquidityFeedSymbol) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{26}
}

func (x *ProtoLiquidityFeedSymbol) GetSymbolId() int32 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoLiquidityFeedSymbol) GetPriceAlias() string {
	if x != nil && x.PriceAlias != nil {
		return *x.PriceAlias
	}
	return ""
}

func (x *ProtoLiquidityFeedSymbol) GetTradeAlias() string {
	if x != nil && x.TradeAlias != nil {
		return *x.TradeAlias
	}
	return ""
}

func (x *ProtoLiquidityFeedSymbol) GetLiquidityFeedSymbolId() int64 {
	if x != nil && x.LiquidityFeedSymbolId != nil {
		return *x.LiquidityFeedSymbolId
	}
	return 0
}

func (x *ProtoLiquidityFeedSymbol) GetLiquidityFeedId() int64 {
	if x != nil && x.LiquidityFeedId != nil {
		return *x.LiquidityFeedId
	}
	return 0
}

func (x *ProtoLiquidityFeedSymbol) GetSendInLots() bool {
	if x != nil && x.SendInLots != nil {
		return *x.SendInLots
	}
	return false
}

func (x *ProtoLiquidityFeedSymbol) GetDealExpirationTimeout() int64 {
	if x != nil && x.DealExpirationTimeout != nil {
		return *x.DealExpirationTimeout
	}
	return 0
}

func (x *ProtoLiquidityFeedSymbol) GetNoQuoteTimeout() int64 {
	if x != nil && x.NoQuoteTimeout != nil {
		return *x.NoQuoteTimeout
	}
	return 0
}

func (x *ProtoLiquidityFeedSymbol) GetLpLotSize() int64 {
	if x != nil && x.LpLotSize != nil {
		return *x.LpLotSize
	}
	return 0
}

func (x *ProtoLiquidityFeedSymbol) GetProduct() int32 {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return 0
}

// Liquidity feed entity
type ProtoLiquidityFeed struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	LiquidityFeedId     *int64                 `protobuf:"varint,1,req,name=liquidityFeedId" json:"liquidityFeedId,omitempty"`         // ID of Liquidity Feed
	Type                *string                `protobuf:"bytes,2,req,name=type" json:"type,omitempty"`                                // Type of Liquidity Feed
	Name                *string                `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`                                // Name of Liquidity Feed
	ConfigurationSuffix *string                `protobuf:"bytes,10,opt,name=configurationSuffix" json:"configurationSuffix,omitempty"` // Suffix for configuration settings
	Enabled             *bool                  `protobuf:"varint,12,opt,name=enabled" json:"enabled,omitempty"`                        // Enables Liquidity Feed
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProtoLiquidityFeed) Reset() {
	*x = ProtoLiquidityFeed{}
	mi := &file_CSModelMessages_External_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLiquidityFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLiquidityFeed) ProtoMessage() {}

func (x *ProtoLiquidityFeed) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLiquidityFeed.ProtoReflect.Descriptor instead.
func (*ProtoLiquidityFeed) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{27}
}

func (x *ProtoLiquidityFeed) GetLiquidityFeedId() int64 {
	if x != nil && x.LiquidityFeedId != nil {
		return *x.LiquidityFeedId
	}
	return 0
}

func (x *ProtoLiquidityFeed) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ProtoLiquidityFeed) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoLiquidityFeed) GetConfigurationSuffix() string {
	if x != nil && x.ConfigurationSuffix != nil {
		return *x.ConfigurationSuffix
	}
	return ""
}

func (x *ProtoLiquidityFeed) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

// Deal (execution) entity
type ProtoDeal struct {
	state                       protoimpl.MessageState    `protogen:"open.v1"`
	DealId                      *int64                    `protobuf:"varint,1,req,name=dealId" json:"dealId,omitempty"`                                            // ID of the Deal
	OrderId                     *int64                    `protobuf:"varint,2,req,name=orderId" json:"orderId,omitempty"`                                          // ID of corresponding trade Order
	PositionId                  *int64                    `protobuf:"varint,3,req,name=positionId" json:"positionId,omitempty"`                                    // ID of corresponding Position
	TraderId                    *int64                    `protobuf:"varint,4,req,name=traderId" json:"traderId,omitempty"`                                        // ID of the Trader
	Volume                      *int64                    `protobuf:"varint,5,req,name=volume" json:"volume,omitempty"`                                            // Requested volume
	FilledVolume                *int64                    `protobuf:"varint,6,req,name=filledVolume" json:"filledVolume,omitempty"`                                // Volume, filled under this Deal
	SymbolId                    *int64                    `protobuf:"varint,7,req,name=symbolId" json:"symbolId,omitempty"`                                        // Symbol ID
	CreateTimestamp             *int64                    `protobuf:"varint,8,req,name=createTimestamp" json:"createTimestamp,omitempty"`                          // UNIX timestamp in milliseconds of the Deal creation
	ExecutionTimestamp          *int64                    `protobuf:"varint,9,req,name=executionTimestamp" json:"executionTimestamp,omitempty"`                    // UNIX timestamp in milliseconds of the Deal execution
	UtcLastUpdateTimestamp      *int64                    `protobuf:"varint,10,req,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`           // UNIX timestamp in milliseconds of the last update of the Deal
	ExecutionPrice              *float64                  `protobuf:"fixed64,11,opt,name=executionPrice" json:"executionPrice,omitempty"`                          // Execution price of the Deal, including all markups
	LimitPrice                  *float64                  `protobuf:"fixed64,12,opt,name=limitPrice" json:"limitPrice,omitempty"`                                  // Limit price for Deals from Market Orders
	TradeSide                   *ProtoTradeSide           `protobuf:"varint,13,req,name=tradeSide,enum=ProtoTradeSide" json:"tradeSide,omitempty"`                 // Trade side of the Deal Default: TRADE_SIDE_BUY
	DealStatus                  *ProtoDealStatus          `protobuf:"varint,14,req,name=dealStatus,enum=ProtoDealStatus" json:"dealStatus,omitempty"`              // Status of the Deal Default: DEAL_STATUS_FILLED
	DealType                    *ProtoDealType            `protobuf:"varint,15,req,name=dealType,enum=ProtoDealType" json:"dealType,omitempty"`                    // Type of the Deal Default: DEAL_TYPE_MARKET
	MarginRate                  *float64                  `protobuf:"fixed64,16,opt,name=marginRate" json:"marginRate,omitempty"`                                  // Base Asset to deposit Asset conversion rate
	Commission                  *int64                    `protobuf:"varint,17,opt,name=commission" json:"commission,omitempty"`                                   // Amount of trading commission associated with the Deal
	ClientRequestId             *string                   `protobuf:"bytes,18,opt,name=clientRequestId" json:"clientRequestId,omitempty"`                          // ClientRequestId value specified in the Order
	BookType                    *ProtoBookType            `protobuf:"varint,19,opt,name=bookType,enum=ProtoBookType,def=1" json:"bookType,omitempty"`              // Book type
	LpExecutionPrice            *float64                  `protobuf:"fixed64,20,opt,name=lpExecutionPrice" json:"lpExecutionPrice,omitempty"`                      // Execution price of the Deal, excluding all markups
	LpOrderId                   *string                   `protobuf:"bytes,21,opt,name=lpOrderId" json:"lpOrderId,omitempty"`                                      // Order ID in the LP's side
	Label                       *string                   `protobuf:"bytes,22,opt,name=label" json:"label,omitempty"`                                              // Label value specified in the corresponding Order request
	Channel                     *string                   `protobuf:"bytes,23,opt,name=channel" json:"channel,omitempty"`                                          // Channel value specified in the corresponding Order request
	Comment                     *string                   `protobuf:"bytes,24,opt,name=comment" json:"comment,omitempty"`                                          // Comment value specified in the corresponding Order request
	PriceSnapshotId             *int64                    `protobuf:"varint,25,opt,name=priceSnapshotId" json:"priceSnapshotId,omitempty"`                         // ID of the related Price Snapshot (snapshot of the prices at the moment of creation of the Deal)
	BaseToUsdConversionRate     *float64                  `protobuf:"fixed64,26,opt,name=baseToUsdConversionRate" json:"baseToUsdConversionRate,omitempty"`        // Base Asset to USD conversion rate
	FeedId                      *int64                    `protobuf:"varint,31,opt,name=feedId" json:"feedId,omitempty"`                                           // Liquidity Feed ID
	ClosePositionDetail         *ProtoClosePositionDetail `protobuf:"bytes,32,opt,name=closePositionDetail" json:"closePositionDetail,omitempty"`                  // Related trading details for Closing Deal
	ServerOrderId               *string                   `protobuf:"bytes,33,opt,name=serverOrderId" json:"serverOrderId,omitempty"`                              // ClientOrderId from LP
	IntroducingBrokerCommission *int64                    `protobuf:"varint,35,opt,name=introducingBrokerCommission" json:"introducingBrokerCommission,omitempty"` // Additional commission which will be paid to the IB for the Deal
	PocketCommission            *int64                    `protobuf:"varint,36,opt,name=pocketCommission" json:"pocketCommission,omitempty"`                       // Commission which Broker will pay to IB for the Deal. Always in USD (cents)
	PocketMarkup                *int64                    `protobuf:"varint,37,opt,name=pocketMarkup" json:"pocketMarkup,omitempty"`                               // Markup (in terms of the price) which Broker will pay to IB for the Deal. Always in USD (cents)
	IntroducedByBrokerId        *int64                    `protobuf:"varint,39,opt,name=introducedByBrokerId" json:"introducedByBrokerId,omitempty"`               // ID of the IB who will get IB commissions for the Deal
	MirroringCommission         *int64                    `protobuf:"varint,40,opt,name=mirroringCommission" json:"mirroringCommission,omitempty"`                 // Amount of commission which Trader pays to Spotware for providing some strategy in Copy service
	MeasurementUnits            *string                   `protobuf:"bytes,41,opt,name=measurementUnits" json:"measurementUnits,omitempty"`                        // Specifies which unit is traded under base Asset
	LotSize                     *int64                    `protobuf:"varint,42,opt,name=lotSize" json:"lotSize,omitempty"`                                         // Amount of units of the base Asset in one lot of the Symbol
	Markup                      *int64                    `protobuf:"varint,43,opt,name=markup" json:"markup,omitempty"`                                           // Markup value (in USD) of the Deal
	InnerMirroringFee           *bool                     `protobuf:"varint,44,opt,name=innerMirroringFee" json:"innerMirroringFee,omitempty"`                     // Mirroring Fee rate, used by Copy functionality
	TotalVolumeInUsd            *int64                    `protobuf:"varint,45,opt,name=totalVolumeInUsd" json:"totalVolumeInUsd,omitempty"`                       // Total USD volume of the Trader from the beginning of time
	SpreadBetting               *bool                     `protobuf:"varint,46,opt,name=spreadBetting" json:"spreadBetting,omitempty"`                             // TRUE for Spread Betting Traders
	Stake                       *int64                    `protobuf:"varint,47,opt,name=stake" json:"stake,omitempty"`                                             // Stake, filled under this Deal (for Spread Betting)
	DesiredVWAP                 *float64                  `protobuf:"fixed64,48,opt,name=desiredVWAP" json:"desiredVWAP,omitempty"`                                // Price desired by the Trader as an execution price
	MarketVWAP                  *float64                  `protobuf:"fixed64,49,opt,name=marketVWAP" json:"marketVWAP,omitempty"`                                  // Real market VWAP at the moment of execution of the Deal
	Tolerance                   *int32                    `protobuf:"varint,50,opt,name=tolerance" json:"tolerance,omitempty"`                                     // Tolerance distance
	RejectReason                *string                   `protobuf:"bytes,51,opt,name=rejectReason" json:"rejectReason,omitempty"`                                // Reason why Order was rejected
	Manual                      *bool                     `protobuf:"varint,52,opt,name=manual" json:"manual,omitempty"`                                           // If TRUE then Deal is Manual Deal
	FilledEurVolume             *int64                    `protobuf:"varint,55,opt,name=filledEurVolume" json:"filledEurVolume,omitempty"`                         // Filled volume in EUR
	FilledGbpVolume             *int64                    `protobuf:"varint,56,opt,name=filledGbpVolume" json:"filledGbpVolume,omitempty"`                         // Filled volume in GBP
	Equity                      *int64                    `protobuf:"varint,57,opt,name=equity" json:"equity,omitempty"`                                           // Trader's equity
	MoneyDigits                 *uint32                   `protobuf:"varint,58,opt,name=moneyDigits" json:"moneyDigits,omitempty"`                                 // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects commission, mirroringCommission, pocketCommission
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

// Default values for ProtoDeal fields.
const (
	Default_ProtoDeal_BookType = ProtoBookType_BOOK_A
)

func (x *ProtoDeal) Reset() {
	*x = ProtoDeal{}
	mi := &file_CSModelMessages_External_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDeal) ProtoMessage() {}

func (x *ProtoDeal) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDeal.ProtoReflect.Descriptor instead.
func (*ProtoDeal) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{28}
}

func (x *ProtoDeal) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

func (x *ProtoDeal) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *ProtoDeal) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoDeal) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoDeal) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoDeal) GetFilledVolume() int64 {
	if x != nil && x.FilledVolume != nil {
		return *x.FilledVolume
	}
	return 0
}

func (x *ProtoDeal) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoDeal) GetCreateTimestamp() int64 {
	if x != nil && x.CreateTimestamp != nil {
		return *x.CreateTimestamp
	}
	return 0
}

func (x *ProtoDeal) GetExecutionTimestamp() int64 {
	if x != nil && x.ExecutionTimestamp != nil {
		return *x.ExecutionTimestamp
	}
	return 0
}

func (x *ProtoDeal) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoDeal) GetExecutionPrice() float64 {
	if x != nil && x.ExecutionPrice != nil {
		return *x.ExecutionPrice
	}
	return 0
}

func (x *ProtoDeal) GetLimitPrice() float64 {
	if x != nil && x.LimitPrice != nil {
		return *x.LimitPrice
	}
	return 0
}

func (x *ProtoDeal) GetTradeSide() ProtoTradeSide {
	if x != nil && x.TradeSide != nil {
		return *x.TradeSide
	}
	return ProtoTradeSide_BUY
}

func (x *ProtoDeal) GetDealStatus() ProtoDealStatus {
	if x != nil && x.DealStatus != nil {
		return *x.DealStatus
	}
	return ProtoDealStatus_FILLED
}

func (x *ProtoDeal) GetDealType() ProtoDealType {
	if x != nil && x.DealType != nil {
		return *x.DealType
	}
	return ProtoDealType_MARKET_DEAL
}

func (x *ProtoDeal) GetMarginRate() float64 {
	if x != nil && x.MarginRate != nil {
		return *x.MarginRate
	}
	return 0
}

func (x *ProtoDeal) GetCommission() int64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *ProtoDeal) GetClientRequestId() string {
	if x != nil && x.ClientRequestId != nil {
		return *x.ClientRequestId
	}
	return ""
}

func (x *ProtoDeal) GetBookType() ProtoBookType {
	if x != nil && x.BookType != nil {
		return *x.BookType
	}
	return Default_ProtoDeal_BookType
}

func (x *ProtoDeal) GetLpExecutionPrice() float64 {
	if x != nil && x.LpExecutionPrice != nil {
		return *x.LpExecutionPrice
	}
	return 0
}

func (x *ProtoDeal) GetLpOrderId() string {
	if x != nil && x.LpOrderId != nil {
		return *x.LpOrderId
	}
	return ""
}

func (x *ProtoDeal) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ProtoDeal) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ProtoDeal) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoDeal) GetPriceSnapshotId() int64 {
	if x != nil && x.PriceSnapshotId != nil {
		return *x.PriceSnapshotId
	}
	return 0
}

func (x *ProtoDeal) GetBaseToUsdConversionRate() float64 {
	if x != nil && x.BaseToUsdConversionRate != nil {
		return *x.BaseToUsdConversionRate
	}
	return 0
}

func (x *ProtoDeal) GetFeedId() int64 {
	if x != nil && x.FeedId != nil {
		return *x.FeedId
	}
	return 0
}

func (x *ProtoDeal) GetClosePositionDetail() *ProtoClosePositionDetail {
	if x != nil {
		return x.ClosePositionDetail
	}
	return nil
}

func (x *ProtoDeal) GetServerOrderId() string {
	if x != nil && x.ServerOrderId != nil {
		return *x.ServerOrderId
	}
	return ""
}

func (x *ProtoDeal) GetIntroducingBrokerCommission() int64 {
	if x != nil && x.IntroducingBrokerCommission != nil {
		return *x.IntroducingBrokerCommission
	}
	return 0
}

func (x *ProtoDeal) GetPocketCommission() int64 {
	if x != nil && x.PocketCommission != nil {
		return *x.PocketCommission
	}
	return 0
}

func (x *ProtoDeal) GetPocketMarkup() int64 {
	if x != nil && x.PocketMarkup != nil {
		return *x.PocketMarkup
	}
	return 0
}

func (x *ProtoDeal) GetIntroducedByBrokerId() int64 {
	if x != nil && x.IntroducedByBrokerId != nil {
		return *x.IntroducedByBrokerId
	}
	return 0
}

func (x *ProtoDeal) GetMirroringCommission() int64 {
	if x != nil && x.MirroringCommission != nil {
		return *x.MirroringCommission
	}
	return 0
}

func (x *ProtoDeal) GetMeasurementUnits() string {
	if x != nil && x.MeasurementUnits != nil {
		return *x.MeasurementUnits
	}
	return ""
}

func (x *ProtoDeal) GetLotSize() int64 {
	if x != nil && x.LotSize != nil {
		return *x.LotSize
	}
	return 0
}

func (x *ProtoDeal) GetMarkup() int64 {
	if x != nil && x.Markup != nil {
		return *x.Markup
	}
	return 0
}

func (x *ProtoDeal) GetInnerMirroringFee() bool {
	if x != nil && x.InnerMirroringFee != nil {
		return *x.InnerMirroringFee
	}
	return false
}

func (x *ProtoDeal) GetTotalVolumeInUsd() int64 {
	if x != nil && x.TotalVolumeInUsd != nil {
		return *x.TotalVolumeInUsd
	}
	return 0
}

func (x *ProtoDeal) GetSpreadBetting() bool {
	if x != nil && x.SpreadBetting != nil {
		return *x.SpreadBetting
	}
	return false
}

func (x *ProtoDeal) GetStake() int64 {
	if x != nil && x.Stake != nil {
		return *x.Stake
	}
	return 0
}

func (x *ProtoDeal) GetDesiredVWAP() float64 {
	if x != nil && x.DesiredVWAP != nil {
		return *x.DesiredVWAP
	}
	return 0
}

func (x *ProtoDeal) GetMarketVWAP() float64 {
	if x != nil && x.MarketVWAP != nil {
		return *x.MarketVWAP
	}
	return 0
}

func (x *ProtoDeal) GetTolerance() int32 {
	if x != nil && x.Tolerance != nil {
		return *x.Tolerance
	}
	return 0
}

func (x *ProtoDeal) GetRejectReason() string {
	if x != nil && x.RejectReason != nil {
		return *x.RejectReason
	}
	return ""
}

func (x *ProtoDeal) GetManual() bool {
	if x != nil && x.Manual != nil {
		return *x.Manual
	}
	return false
}

func (x *ProtoDeal) GetFilledEurVolume() int64 {
	if x != nil && x.FilledEurVolume != nil {
		return *x.FilledEurVolume
	}
	return 0
}

func (x *ProtoDeal) GetFilledGbpVolume() int64 {
	if x != nil && x.FilledGbpVolume != nil {
		return *x.FilledGbpVolume
	}
	return 0
}

func (x *ProtoDeal) GetEquity() int64 {
	if x != nil && x.Equity != nil {
		return *x.Equity
	}
	return 0
}

func (x *ProtoDeal) GetMoneyDigits() uint32 {
	if x != nil && x.MoneyDigits != nil {
		return *x.MoneyDigits
	}
	return 0
}

// Closing Deal entity
type ProtoLightClosingDeal struct {
	state                       protoimpl.MessageState         `protogen:"open.v1"`
	DealId                      *int64                         `protobuf:"varint,1,req,name=dealId" json:"dealId,omitempty"`                                            // ID of Closing Deal
	OrderId                     *int64                         `protobuf:"varint,2,req,name=orderId" json:"orderId,omitempty"`                                          // ID or related Order
	PositionId                  *int64                         `protobuf:"varint,3,req,name=positionId" json:"positionId,omitempty"`                                    // ID of related Position
	Volume                      *int64                         `protobuf:"varint,4,req,name=volume" json:"volume,omitempty"`                                            // Requested volume
	FilledVolume                *int64                         `protobuf:"varint,5,req,name=filledVolume" json:"filledVolume,omitempty"`                                // Volume, filled under this Deal
	SymbolId                    *int64                         `protobuf:"varint,6,req,name=symbolId" json:"symbolId,omitempty"`                                        // ID of Symbol
	CreateTimestamp             *int64                         `protobuf:"varint,7,req,name=createTimestamp" json:"createTimestamp,omitempty"`                          // UNIX timestamp in milliseconds of the Deal creation
	ExecutionTimestamp          *int64                         `protobuf:"varint,8,req,name=executionTimestamp" json:"executionTimestamp,omitempty"`                    // UNIX timestamp in milliseconds of the Deal execution
	ExecutionPrice              *float64                       `protobuf:"fixed64,9,opt,name=executionPrice" json:"executionPrice,omitempty"`                           // Execution price of the Deal, including all markups
	TradeSide                   *ProtoTradeSide                `protobuf:"varint,10,req,name=tradeSide,enum=ProtoTradeSide" json:"tradeSide,omitempty"`                 // Side of the Deal
	DealStatus                  *ProtoDealStatus               `protobuf:"varint,11,req,name=dealStatus,enum=ProtoDealStatus" json:"dealStatus,omitempty"`              // Status of the Deal Default: DEAL_STATUS_FILLED
	DealType                    *ProtoDealType                 `protobuf:"varint,12,req,name=dealType,enum=ProtoDealType" json:"dealType,omitempty"`                    // Type of the Deal Default: DEAL_TYPE_MARKET
	Commission                  *int64                         `protobuf:"varint,13,opt,name=commission" json:"commission,omitempty"`                                   // Amount of trading commission associated with the Deal
	Label                       *string                        `protobuf:"bytes,14,opt,name=label" json:"label,omitempty"`                                              // Label field value from corresponding Order
	Channel                     *string                        `protobuf:"bytes,15,opt,name=channel" json:"channel,omitempty"`                                          // Channel value specified in the corresponding Order request
	Comment                     *string                        `protobuf:"bytes,16,opt,name=comment" json:"comment,omitempty"`                                          // Comment value specified in the corresponding Order request
	PriceSnapshotId             *int64                         `protobuf:"varint,17,opt,name=priceSnapshotId" json:"priceSnapshotId,omitempty"`                         // ID of the related Price Snapshot (snapshot of the prices at the moment of creation of the Deal)
	BaseToUsdConversionRate     *float64                       `protobuf:"fixed64,18,opt,name=baseToUsdConversionRate" json:"baseToUsdConversionRate,omitempty"`        // Base Asset to USD conversion rate
	ClosePositionDetail         *ProtoLightClosePositionDetail `protobuf:"bytes,19,opt,name=closePositionDetail" json:"closePositionDetail,omitempty"`                  // Related trading details for Closing Deal
	IntroducingBrokerCommission *int64                         `protobuf:"varint,20,opt,name=introducingBrokerCommission" json:"introducingBrokerCommission,omitempty"` // Additional commission which will be paid to the IB for the Deal
	MirroringCommission         *int64                         `protobuf:"varint,21,opt,name=mirroringCommission" json:"mirroringCommission,omitempty"`                 // Amount of commission which Trader pays to Spotware for providing some Strategy in Copy
	LotSize                     *int64                         `protobuf:"varint,22,opt,name=lotSize" json:"lotSize,omitempty"`                                         // Amount of units of the base Asset in one lot of the Symbol
	Stake                       *int64                         `protobuf:"varint,23,opt,name=stake" json:"stake,omitempty"`                                             // Stake, filled under this Deal (for Spread Betting)
	OffsetDeals                 []*ProtoLightOffsetDeal        `protobuf:"bytes,24,rep,name=offsetDeals" json:"offsetDeals,omitempty"`                                  // Deals that were offset by a this Deal and that are offsetting this Deal
	MoneyDigits                 *uint32                        `protobuf:"varint,25,opt,name=moneyDigits" json:"moneyDigits,omitempty"`                                 // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects commission,mirroringCommission, introducingBrokerCommission
	MarginRate                  *float64                       `protobuf:"fixed64,26,opt,name=marginRate" json:"marginRate,omitempty"`                                  // Base Asset to deposit Asset conversion rate
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *ProtoLightClosingDeal) Reset() {
	*x = ProtoLightClosingDeal{}
	mi := &file_CSModelMessages_External_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLightClosingDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLightClosingDeal) ProtoMessage() {}

func (x *ProtoLightClosingDeal) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLightClosingDeal.ProtoReflect.Descriptor instead.
func (*ProtoLightClosingDeal) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{29}
}

func (x *ProtoLightClosingDeal) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetFilledVolume() int64 {
	if x != nil && x.FilledVolume != nil {
		return *x.FilledVolume
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetCreateTimestamp() int64 {
	if x != nil && x.CreateTimestamp != nil {
		return *x.CreateTimestamp
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetExecutionTimestamp() int64 {
	if x != nil && x.ExecutionTimestamp != nil {
		return *x.ExecutionTimestamp
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetExecutionPrice() float64 {
	if x != nil && x.ExecutionPrice != nil {
		return *x.ExecutionPrice
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetTradeSide() ProtoTradeSide {
	if x != nil && x.TradeSide != nil {
		return *x.TradeSide
	}
	return ProtoTradeSide_BUY
}

func (x *ProtoLightClosingDeal) GetDealStatus() ProtoDealStatus {
	if x != nil && x.DealStatus != nil {
		return *x.DealStatus
	}
	return ProtoDealStatus_FILLED
}

func (x *ProtoLightClosingDeal) GetDealType() ProtoDealType {
	if x != nil && x.DealType != nil {
		return *x.DealType
	}
	return ProtoDealType_MARKET_DEAL
}

func (x *ProtoLightClosingDeal) GetCommission() int64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ProtoLightClosingDeal) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ProtoLightClosingDeal) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoLightClosingDeal) GetPriceSnapshotId() int64 {
	if x != nil && x.PriceSnapshotId != nil {
		return *x.PriceSnapshotId
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetBaseToUsdConversionRate() float64 {
	if x != nil && x.BaseToUsdConversionRate != nil {
		return *x.BaseToUsdConversionRate
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetClosePositionDetail() *ProtoLightClosePositionDetail {
	if x != nil {
		return x.ClosePositionDetail
	}
	return nil
}

func (x *ProtoLightClosingDeal) GetIntroducingBrokerCommission() int64 {
	if x != nil && x.IntroducingBrokerCommission != nil {
		return *x.IntroducingBrokerCommission
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetMirroringCommission() int64 {
	if x != nil && x.MirroringCommission != nil {
		return *x.MirroringCommission
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetLotSize() int64 {
	if x != nil && x.LotSize != nil {
		return *x.LotSize
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetStake() int64 {
	if x != nil && x.Stake != nil {
		return *x.Stake
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetOffsetDeals() []*ProtoLightOffsetDeal {
	if x != nil {
		return x.OffsetDeals
	}
	return nil
}

func (x *ProtoLightClosingDeal) GetMoneyDigits() uint32 {
	if x != nil && x.MoneyDigits != nil {
		return *x.MoneyDigits
	}
	return 0
}

func (x *ProtoLightClosingDeal) GetMarginRate() float64 {
	if x != nil && x.MarginRate != nil {
		return *x.MarginRate
	}
	return 0
}

// Trading details for Closing Deal (with limited number of fields)
type ProtoLightClosePositionDetail struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	EntryPrice                   *float64               `protobuf:"fixed64,1,req,name=entryPrice" json:"entryPrice,omitempty"`                                     // Position price at the moment of filling the closing Order
	Profit                       *int64                 `protobuf:"varint,2,req,name=profit" json:"profit,omitempty"`                                              // Amount of realized gross profit after Closing Deal execution
	Swap                         *int64                 `protobuf:"varint,3,req,name=swap" json:"swap,omitempty"`                                                  // Amount of realized Swap related to closed volume
	Commission                   *int64                 `protobuf:"varint,4,req,name=commission" json:"commission,omitempty"`                                      // Amount of realized commission related to closed volume
	Balance                      *int64                 `protobuf:"varint,5,req,name=balance" json:"balance,omitempty"`                                            // Trader's balance after Closing Deal execution
	QuoteToDepositConversionRate *float64               `protobuf:"fixed64,6,opt,name=quoteToDepositConversionRate" json:"quoteToDepositConversionRate,omitempty"` // Quote/Deposit currency conversion rate on the time of Closing Deal execution
	ClosedVolume                 *int64                 `protobuf:"varint,7,opt,name=closedVolume" json:"closedVolume,omitempty"`                                  // Closed volume in cents
	BalanceVersion               *int64                 `protobuf:"varint,8,opt,name=balanceVersion" json:"balanceVersion,omitempty"`                              // Balance version of the Account related to Closing Deal operation
	IntroducingBrokerCommission  *int64                 `protobuf:"varint,9,opt,name=introducingBrokerCommission" json:"introducingBrokerCommission,omitempty"`    // Additional commission which will be paid to the IB for the Deal
	MirroringCommission          *int64                 `protobuf:"varint,10,opt,name=mirroringCommission" json:"mirroringCommission,omitempty"`                   // Amount of commission which Trader pays to Spotware for providing some Strategy in Copy
	MinEquity                    *int64                 `protobuf:"varint,11,opt,name=minEquity" json:"minEquity,omitempty"`                                       // Minimum Equity value starting from the last previous balance history operation and before applying close Position balance history operation
	MaxEquity                    *int64                 `protobuf:"varint,12,opt,name=maxEquity" json:"maxEquity,omitempty"`                                       // Maximum Equity value starting from the last previous balance history operation and before applying close Position balance history operation
	OffsetDealTimestamp          *int64                 `protobuf:"varint,13,opt,name=offsetDealTimestamp" json:"offsetDealTimestamp,omitempty"`                   // UNIX timestamp in milliseconds of execution of the first offset opening Deal for the Closing Deal
	ClosedStake                  *int64                 `protobuf:"varint,16,opt,name=closedStake" json:"closedStake,omitempty"`                                   // Stake, realized by the related Deal
	MoneyDigits                  *uint32                `protobuf:"varint,17,opt,name=moneyDigits" json:"moneyDigits,omitempty"`                                   // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects grossProfit, swap, commission, mirroringCommission, introducingBrokerCommission, balance, pnlConversionFee
	PnlConversionFee             *int64                 `protobuf:"varint,18,opt,name=pnlConversionFee" json:"pnlConversionFee,omitempty"`                         // Conversion Fee applied to the Deal in account's ccy when Trader symbol's quote Asset ID <> ProtoOATrader.depositAssetId
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ProtoLightClosePositionDetail) Reset() {
	*x = ProtoLightClosePositionDetail{}
	mi := &file_CSModelMessages_External_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLightClosePositionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLightClosePositionDetail) ProtoMessage() {}

func (x *ProtoLightClosePositionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLightClosePositionDetail.ProtoReflect.Descriptor instead.
func (*ProtoLightClosePositionDetail) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{30}
}

func (x *ProtoLightClosePositionDetail) GetEntryPrice() float64 {
	if x != nil && x.EntryPrice != nil {
		return *x.EntryPrice
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetProfit() int64 {
	if x != nil && x.Profit != nil {
		return *x.Profit
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetSwap() int64 {
	if x != nil && x.Swap != nil {
		return *x.Swap
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetCommission() int64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetBalance() int64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetQuoteToDepositConversionRate() float64 {
	if x != nil && x.QuoteToDepositConversionRate != nil {
		return *x.QuoteToDepositConversionRate
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetClosedVolume() int64 {
	if x != nil && x.ClosedVolume != nil {
		return *x.ClosedVolume
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetBalanceVersion() int64 {
	if x != nil && x.BalanceVersion != nil {
		return *x.BalanceVersion
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetIntroducingBrokerCommission() int64 {
	if x != nil && x.IntroducingBrokerCommission != nil {
		return *x.IntroducingBrokerCommission
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetMirroringCommission() int64 {
	if x != nil && x.MirroringCommission != nil {
		return *x.MirroringCommission
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetMinEquity() int64 {
	if x != nil && x.MinEquity != nil {
		return *x.MinEquity
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetMaxEquity() int64 {
	if x != nil && x.MaxEquity != nil {
		return *x.MaxEquity
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetOffsetDealTimestamp() int64 {
	if x != nil && x.OffsetDealTimestamp != nil {
		return *x.OffsetDealTimestamp
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetClosedStake() int64 {
	if x != nil && x.ClosedStake != nil {
		return *x.ClosedStake
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetMoneyDigits() uint32 {
	if x != nil && x.MoneyDigits != nil {
		return *x.MoneyDigits
	}
	return 0
}

func (x *ProtoLightClosePositionDetail) GetPnlConversionFee() int64 {
	if x != nil && x.PnlConversionFee != nil {
		return *x.PnlConversionFee
	}
	return 0
}

// Offset Deal entity
type ProtoLightOffsetDeal struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	DealId             *int64                 `protobuf:"varint,1,req,name=dealId" json:"dealId,omitempty"`                         // ID of offset Deal
	FilledVolume       *int64                 `protobuf:"varint,2,req,name=filledVolume" json:"filledVolume,omitempty"`             // Volume, filled under this Deal
	ExecutionTimestamp *int64                 `protobuf:"varint,3,req,name=executionTimestamp" json:"executionTimestamp,omitempty"` // UNIX timestamp in milliseconds of the Deal creation
	ExecutionPrice     *float64               `protobuf:"fixed64,4,opt,name=executionPrice" json:"executionPrice,omitempty"`        // Execution price of the Deal, including all markups
	Stake              *uint64                `protobuf:"varint,5,opt,name=stake" json:"stake,omitempty"`                           // Stake, filled under this Deal (for Spread Betting)
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProtoLightOffsetDeal) Reset() {
	*x = ProtoLightOffsetDeal{}
	mi := &file_CSModelMessages_External_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLightOffsetDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLightOffsetDeal) ProtoMessage() {}

func (x *ProtoLightOffsetDeal) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLightOffsetDeal.ProtoReflect.Descriptor instead.
func (*ProtoLightOffsetDeal) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{31}
}

func (x *ProtoLightOffsetDeal) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

func (x *ProtoLightOffsetDeal) GetFilledVolume() int64 {
	if x != nil && x.FilledVolume != nil {
		return *x.FilledVolume
	}
	return 0
}

func (x *ProtoLightOffsetDeal) GetExecutionTimestamp() int64 {
	if x != nil && x.ExecutionTimestamp != nil {
		return *x.ExecutionTimestamp
	}
	return 0
}

func (x *ProtoLightOffsetDeal) GetExecutionPrice() float64 {
	if x != nil && x.ExecutionPrice != nil {
		return *x.ExecutionPrice
	}
	return 0
}

func (x *ProtoLightOffsetDeal) GetStake() uint64 {
	if x != nil && x.Stake != nil {
		return *x.Stake
	}
	return 0
}

// Asset Class entity
type ProtoAssetClass struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *int64                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                        // ID of Asset Class
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`                     // Name of Asset class
	SortingNumber *float64               `protobuf:"fixed64,3,opt,name=sortingNumber" json:"sortingNumber,omitempty"` // Number used for sorting of Asset Classes in UI
	DefaultLots   *bool                  `protobuf:"varint,6,opt,name=defaultLots" json:"defaultLots,omitempty"`      // Specifies what is the default trading unit for the Symbols of the Asset Class (TRUE=Lots; FALSE=Units)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoAssetClass) Reset() {
	*x = ProtoAssetClass{}
	mi := &file_CSModelMessages_External_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoAssetClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoAssetClass) ProtoMessage() {}

func (x *ProtoAssetClass) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoAssetClass.ProtoReflect.Descriptor instead.
func (*ProtoAssetClass) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{32}
}

func (x *ProtoAssetClass) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ProtoAssetClass) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoAssetClass) GetSortingNumber() float64 {
	if x != nil && x.SortingNumber != nil {
		return *x.SortingNumber
	}
	return 0
}

func (x *ProtoAssetClass) GetDefaultLots() bool {
	if x != nil && x.DefaultLots != nil {
		return *x.DefaultLots
	}
	return false
}

// Details of a Deal that was offset by a specific Deal or is offsetting a specific Deal
type ProtoDealOffset struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	DealId             *int64                 `protobuf:"varint,1,req,name=dealId" json:"dealId,omitempty"`                         // The unique ID of the execution Deal
	Volume             *int64                 `protobuf:"varint,2,req,name=volume" json:"volume,omitempty"`                         // Matched volume, in cents
	Stake              *uint64                `protobuf:"varint,3,opt,name=stake" json:"stake,omitempty"`                           // Stake for Spread Betting
	ExecutionTimestamp *int64                 `protobuf:"varint,4,opt,name=executionTimestamp" json:"executionTimestamp,omitempty"` // UNIX timestamp in milliseconds of execution of the offset Deal
	ExecutionPrice     *float64               `protobuf:"fixed64,5,opt,name=executionPrice" json:"executionPrice,omitempty"`        // Execution price of the offset Deal
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProtoDealOffset) Reset() {
	*x = ProtoDealOffset{}
	mi := &file_CSModelMessages_External_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDealOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDealOffset) ProtoMessage() {}

func (x *ProtoDealOffset) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDealOffset.ProtoReflect.Descriptor instead.
func (*ProtoDealOffset) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{33}
}

func (x *ProtoDealOffset) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

func (x *ProtoDealOffset) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoDealOffset) GetStake() uint64 {
	if x != nil && x.Stake != nil {
		return *x.Stake
	}
	return 0
}

func (x *ProtoDealOffset) GetExecutionTimestamp() int64 {
	if x != nil && x.ExecutionTimestamp != nil {
		return *x.ExecutionTimestamp
	}
	return 0
}

func (x *ProtoDealOffset) GetExecutionPrice() float64 {
	if x != nil && x.ExecutionPrice != nil {
		return *x.ExecutionPrice
	}
	return 0
}

// Record with info about changes in SL/TP for specific Order
type ProtoStopLossTakeProfitChangeRecord struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NewStopLoss     *float64               `protobuf:"fixed64,1,opt,name=newStopLoss" json:"newStopLoss,omitempty"`        // New value of Stop Loss
	NewTakeProfit   *float64               `protobuf:"fixed64,2,opt,name=newTakeProfit" json:"newTakeProfit,omitempty"`    // New value of Take Profit
	CreateTimestamp *int64                 `protobuf:"varint,3,req,name=createTimestamp" json:"createTimestamp,omitempty"` // UNIX timestamp in milliseconds of when the record was created
	OrderId         *int64                 `protobuf:"varint,4,opt,name=orderId" json:"orderId,omitempty"`                 // ID of related Order
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ProtoStopLossTakeProfitChangeRecord) Reset() {
	*x = ProtoStopLossTakeProfitChangeRecord{}
	mi := &file_CSModelMessages_External_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoStopLossTakeProfitChangeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoStopLossTakeProfitChangeRecord) ProtoMessage() {}

func (x *ProtoStopLossTakeProfitChangeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoStopLossTakeProfitChangeRecord.ProtoReflect.Descriptor instead.
func (*ProtoStopLossTakeProfitChangeRecord) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{34}
}

func (x *ProtoStopLossTakeProfitChangeRecord) GetNewStopLoss() float64 {
	if x != nil && x.NewStopLoss != nil {
		return *x.NewStopLoss
	}
	return 0
}

func (x *ProtoStopLossTakeProfitChangeRecord) GetNewTakeProfit() float64 {
	if x != nil && x.NewTakeProfit != nil {
		return *x.NewTakeProfit
	}
	return 0
}

func (x *ProtoStopLossTakeProfitChangeRecord) GetCreateTimestamp() int64 {
	if x != nil && x.CreateTimestamp != nil {
		return *x.CreateTimestamp
	}
	return 0
}

func (x *ProtoStopLossTakeProfitChangeRecord) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

// Swap calculation record
type ProtoSwapCalculationRecord struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ChargedSwap     *int64                 `protobuf:"varint,1,req,name=chargedSwap" json:"chargedSwap,omitempty"`         // Amount of SWAP charged for the specified Position
	CurrentSwap     *int64                 `protobuf:"varint,2,req,name=currentSwap" json:"currentSwap,omitempty"`         // Full amount of SWAP for the specified Position
	CreateTimestamp *int64                 `protobuf:"varint,3,req,name=createTimestamp" json:"createTimestamp,omitempty"` // UNIX timestamp in milliseconds of Swap calculation
	DepositCurrency *string                `protobuf:"bytes,4,opt,name=depositCurrency" json:"depositCurrency,omitempty"`  // Deposit currency of the Trader
	MoneyDigits     *uint32                `protobuf:"varint,5,opt,name=moneyDigits" json:"moneyDigits,omitempty"`         // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects chargedSwap, currentSwap
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ProtoSwapCalculationRecord) Reset() {
	*x = ProtoSwapCalculationRecord{}
	mi := &file_CSModelMessages_External_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSwapCalculationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSwapCalculationRecord) ProtoMessage() {}

func (x *ProtoSwapCalculationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSwapCalculationRecord.ProtoReflect.Descriptor instead.
func (*ProtoSwapCalculationRecord) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{35}
}

func (x *ProtoSwapCalculationRecord) GetChargedSwap() int64 {
	if x != nil && x.ChargedSwap != nil {
		return *x.ChargedSwap
	}
	return 0
}

func (x *ProtoSwapCalculationRecord) GetCurrentSwap() int64 {
	if x != nil && x.CurrentSwap != nil {
		return *x.CurrentSwap
	}
	return 0
}

func (x *ProtoSwapCalculationRecord) GetCreateTimestamp() int64 {
	if x != nil && x.CreateTimestamp != nil {
		return *x.CreateTimestamp
	}
	return 0
}

func (x *ProtoSwapCalculationRecord) GetDepositCurrency() string {
	if x != nil && x.DepositCurrency != nil {
		return *x.DepositCurrency
	}
	return ""
}

func (x *ProtoSwapCalculationRecord) GetMoneyDigits() uint32 {
	if x != nil && x.MoneyDigits != nil {
		return *x.MoneyDigits
	}
	return 0
}

// Trader session info
type ProtoTraderSessionInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SessionId       *uint64                `protobuf:"varint,1,req,name=sessionId" json:"sessionId,omitempty"`            // ID of Trader Session
	TraderId        *uint64                `protobuf:"varint,2,req,name=traderId" json:"traderId,omitempty"`              // ID of Trader
	ProxyId         *string                `protobuf:"bytes,3,req,name=proxyId" json:"proxyId,omitempty"`                 // ID of Proxy
	GeoInfo         *ProtoGeoInfo          `protobuf:"bytes,4,opt,name=geoInfo" json:"geoInfo,omitempty"`                 // Info about Trader geolocation (based on their ip address)
	ApplicationType *string                `protobuf:"bytes,5,opt,name=applicationType" json:"applicationType,omitempty"` // Application used by Trader
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ProtoTraderSessionInfo) Reset() {
	*x = ProtoTraderSessionInfo{}
	mi := &file_CSModelMessages_External_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTraderSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTraderSessionInfo) ProtoMessage() {}

func (x *ProtoTraderSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTraderSessionInfo.ProtoReflect.Descriptor instead.
func (*ProtoTraderSessionInfo) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{36}
}

func (x *ProtoTraderSessionInfo) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *ProtoTraderSessionInfo) GetTraderId() uint64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoTraderSessionInfo) GetProxyId() string {
	if x != nil && x.ProxyId != nil {
		return *x.ProxyId
	}
	return ""
}

func (x *ProtoTraderSessionInfo) GetGeoInfo() *ProtoGeoInfo {
	if x != nil {
		return x.GeoInfo
	}
	return nil
}

func (x *ProtoTraderSessionInfo) GetApplicationType() string {
	if x != nil && x.ApplicationType != nil {
		return *x.ApplicationType
	}
	return ""
}

// Symbol Category
type ProtoSymbolCategory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *int64                 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`                        // ID of the Symbol Category
	AssetClassId  *int64                 `protobuf:"varint,2,req,name=assetClassId" json:"assetClassId,omitempty"`    // ID of the Asset Class which contains Symbol Category
	Name          *string                `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`                     // Name of the Symbol Category
	Color         *string                `protobuf:"bytes,4,req,name=color" json:"color,omitempty"`                   // Color used in UI for the Symbol Category
	SortingNumber *float64               `protobuf:"fixed64,5,req,name=sortingNumber" json:"sortingNumber,omitempty"` // Sorting number used in UI for the Symbol Category
	Expanded      *bool                  `protobuf:"varint,6,req,name=expanded" json:"expanded,omitempty"`            // If TRUE then Category is displayed in UI expanded, otherwise - collapsed
	IsDefault     *bool                  `protobuf:"varint,7,req,name=isDefault" json:"isDefault,omitempty"`          // IF TRUE then Category is shown by default in UI
	IsDomEnabled  *bool                  `protobuf:"varint,8,opt,name=isDomEnabled" json:"isDomEnabled,omitempty"`    // IF TRUE then Depth of market is displayed in UI for Symbols in this Category
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoSymbolCategory) Reset() {
	*x = ProtoSymbolCategory{}
	mi := &file_CSModelMessages_External_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSymbolCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSymbolCategory) ProtoMessage() {}

func (x *ProtoSymbolCategory) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSymbolCategory.ProtoReflect.Descriptor instead.
func (*ProtoSymbolCategory) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{37}
}

func (x *ProtoSymbolCategory) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ProtoSymbolCategory) GetAssetClassId() int64 {
	if x != nil && x.AssetClassId != nil {
		return *x.AssetClassId
	}
	return 0
}

func (x *ProtoSymbolCategory) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoSymbolCategory) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *ProtoSymbolCategory) GetSortingNumber() float64 {
	if x != nil && x.SortingNumber != nil {
		return *x.SortingNumber
	}
	return 0
}

func (x *ProtoSymbolCategory) GetExpanded() bool {
	if x != nil && x.Expanded != nil {
		return *x.Expanded
	}
	return false
}

func (x *ProtoSymbolCategory) GetIsDefault() bool {
	if x != nil && x.IsDefault != nil {
		return *x.IsDefault
	}
	return false
}

func (x *ProtoSymbolCategory) GetIsDomEnabled() bool {
	if x != nil && x.IsDomEnabled != nil {
		return *x.IsDomEnabled
	}
	return false
}

// Max Auto Execution settings for specific Symbol. Applied for Dealing Desk Groups
type ProtoMaxAutoExecutionSizeSymbol struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SymbolId             *uint64                `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`                         // Symbol ID
	MaxAutoExecutionSize *uint64                `protobuf:"varint,2,req,name=maxAutoExecutionSize" json:"maxAutoExecutionSize,omitempty"` // If Order size is larger than this value it will be passed to the Dealer, in cents
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ProtoMaxAutoExecutionSizeSymbol) Reset() {
	*x = ProtoMaxAutoExecutionSizeSymbol{}
	mi := &file_CSModelMessages_External_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoMaxAutoExecutionSizeSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMaxAutoExecutionSizeSymbol) ProtoMessage() {}

func (x *ProtoMaxAutoExecutionSizeSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMaxAutoExecutionSizeSymbol.ProtoReflect.Descriptor instead.
func (*ProtoMaxAutoExecutionSizeSymbol) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{38}
}

func (x *ProtoMaxAutoExecutionSizeSymbol) GetSymbolId() uint64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoMaxAutoExecutionSizeSymbol) GetMaxAutoExecutionSize() uint64 {
	if x != nil && x.MaxAutoExecutionSize != nil {
		return *x.MaxAutoExecutionSize
	}
	return 0
}

// Profile with Max Auto execution settings. Applied for Dealing Desk Groups
type ProtoMaxAutoExecutionSizeProfile struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	ProfileId     *uint64                            `protobuf:"varint,1,req,name=profileId" json:"profileId,omitempty"`    // Profile ID
	Name          *string                            `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`               // Profile name
	Description   *string                            `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"` // Profile description
	Symbol        []*ProtoMaxAutoExecutionSizeSymbol `protobuf:"bytes,4,rep,name=symbol" json:"symbol,omitempty"`           // Symbol setting entity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoMaxAutoExecutionSizeProfile) Reset() {
	*x = ProtoMaxAutoExecutionSizeProfile{}
	mi := &file_CSModelMessages_External_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoMaxAutoExecutionSizeProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMaxAutoExecutionSizeProfile) ProtoMessage() {}

func (x *ProtoMaxAutoExecutionSizeProfile) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMaxAutoExecutionSizeProfile.ProtoReflect.Descriptor instead.
func (*ProtoMaxAutoExecutionSizeProfile) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{39}
}

func (x *ProtoMaxAutoExecutionSizeProfile) GetProfileId() uint64 {
	if x != nil && x.ProfileId != nil {
		return *x.ProfileId
	}
	return 0
}

func (x *ProtoMaxAutoExecutionSizeProfile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoMaxAutoExecutionSizeProfile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoMaxAutoExecutionSizeProfile) GetSymbol() []*ProtoMaxAutoExecutionSizeSymbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

// Symbol setting for manual execution
type ProtoDealingSymbol struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SymbolId      *int64                 `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`         // Symbol ID
	AlwaysManual  *bool                  `protobuf:"varint,2,req,name=alwaysManual" json:"alwaysManual,omitempty"` // If TRUE then execution for this Symbol is always manual
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoDealingSymbol) Reset() {
	*x = ProtoDealingSymbol{}
	mi := &file_CSModelMessages_External_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDealingSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDealingSymbol) ProtoMessage() {}

func (x *ProtoDealingSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDealingSymbol.ProtoReflect.Descriptor instead.
func (*ProtoDealingSymbol) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{40}
}

func (x *ProtoDealingSymbol) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoDealingSymbol) GetAlwaysManual() bool {
	if x != nil && x.AlwaysManual != nil {
		return *x.AlwaysManual
	}
	return false
}

// Manual Deal
type ProtoManualDeal struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TraderId           *int64                 `protobuf:"varint,1,req,name=traderId" json:"traderId,omitempty"`                         // ID of the Trader
	TraderLogin        *int64                 `protobuf:"varint,2,req,name=traderLogin" json:"traderLogin,omitempty"`                   // Login of the Trader
	TraderName         *string                `protobuf:"bytes,3,opt,name=traderName" json:"traderName,omitempty"`                      // Name of the Trader
	PositionId         *int64                 `protobuf:"varint,5,req,name=positionId" json:"positionId,omitempty"`                     // Position ID
	SymbolId           *int64                 `protobuf:"varint,6,req,name=symbolId" json:"symbolId,omitempty"`                         // Symbol ID
	OrderId            *int64                 `protobuf:"varint,7,req,name=orderId" json:"orderId,omitempty"`                           // Order ID
	OrderType          *ProtoOrderType        `protobuf:"varint,8,req,name=orderType,enum=ProtoOrderType" json:"orderType,omitempty"`   // Order type
	TradeSide          *ProtoTradeSide        `protobuf:"varint,9,req,name=tradeSide,enum=ProtoTradeSide" json:"tradeSide,omitempty"`   // Trade side of the Deal Default: TRADE_SIDE_BUY
	BookType           *ProtoBookType         `protobuf:"varint,10,req,name=bookType,enum=ProtoBookType" json:"bookType,omitempty"`     // Book type
	ClosingOrder       *bool                  `protobuf:"varint,11,req,name=closingOrder" json:"closingOrder,omitempty"`                // Related closing Order
	GuaranteedStopLoss *bool                  `protobuf:"varint,12,req,name=guaranteedStopLoss" json:"guaranteedStopLoss,omitempty"`    // If TRUE then Stop Loss is Guaranteed
	CheckTolerance     *bool                  `protobuf:"varint,13,req,name=checkTolerance" json:"checkTolerance,omitempty"`            // Specifies whether tolerance check should be applied at the moment of execution or not
	LimitPrice         *int64                 `protobuf:"varint,14,opt,name=limitPrice" json:"limitPrice,omitempty"`                    // Limit price for Deals from Market Range Orders
	DesiredVWAP        *int64                 `protobuf:"varint,15,opt,name=desiredVWAP" json:"desiredVWAP,omitempty"`                  // Price desired by the Trader as an execution price
	DealId             *int64                 `protobuf:"varint,16,req,name=dealId" json:"dealId,omitempty"`                            // ID of the Deal
	Volume             *int64                 `protobuf:"varint,17,req,name=volume" json:"volume,omitempty"`                            // Volume in cents
	Stake              *int64                 `protobuf:"varint,18,opt,name=stake" json:"stake,omitempty"`                              // Stake (for Spread Betting)
	TriggerPrice       *int64                 `protobuf:"varint,19,opt,name=triggerPrice" json:"triggerPrice,omitempty"`                // Price which triggered the Deal
	GroupId            *int64                 `protobuf:"varint,20,req,name=groupId" json:"groupId,omitempty"`                          // ID of Trader's Group
	Reason             *ProtoManualDealReason `protobuf:"varint,21,req,name=reason,enum=ProtoManualDealReason" json:"reason,omitempty"` // Reason for manual execution
	Timestamp          *int64                 `protobuf:"varint,22,req,name=timestamp" json:"timestamp,omitempty"`                      // UNIX timestamp in milliseconds of the Manual Deal
	ManagerId          *int64                 `protobuf:"varint,23,opt,name=managerId" json:"managerId,omitempty"`                      // ID of the Manager, who processed the Deal
	ManagerLogin       *int64                 `protobuf:"varint,24,opt,name=managerLogin" json:"managerLogin,omitempty"`                // Login of the Manager, who processed the Deal
	Markup             *int64                 `protobuf:"varint,25,req,name=markup" json:"markup,omitempty"`                            // Total (Symbol + Price Stream) absolute amount of points of markup for the moment of generating of the Deal
	StopOut            *bool                  `protobuf:"varint,26,opt,name=stopOut" json:"stopOut,omitempty"`                          // If TRUE then Deal was generated by Stop Out
	CloseWithPID       *int64                 `protobuf:"varint,27,opt,name=closeWithPID" json:"closeWithPID,omitempty"`                // Some number which may be used to aggregate Deals into Positions on the hedged accounts in UI
	DepositAssetId     *int64                 `protobuf:"varint,28,req,name=depositAssetId" json:"depositAssetId,omitempty"`            // ID of the deposit Asset of the Trader
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProtoManualDeal) Reset() {
	*x = ProtoManualDeal{}
	mi := &file_CSModelMessages_External_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManualDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManualDeal) ProtoMessage() {}

func (x *ProtoManualDeal) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManualDeal.ProtoReflect.Descriptor instead.
func (*ProtoManualDeal) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{41}
}

func (x *ProtoManualDeal) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoManualDeal) GetTraderLogin() int64 {
	if x != nil && x.TraderLogin != nil {
		return *x.TraderLogin
	}
	return 0
}

func (x *ProtoManualDeal) GetTraderName() string {
	if x != nil && x.TraderName != nil {
		return *x.TraderName
	}
	return ""
}

func (x *ProtoManualDeal) GetPositionId() int64 {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return 0
}

func (x *ProtoManualDeal) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoManualDeal) GetOrderId() int64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *ProtoManualDeal) GetOrderType() ProtoOrderType {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return ProtoOrderType_MARKET
}

func (x *ProtoManualDeal) GetTradeSide() ProtoTradeSide {
	if x != nil && x.TradeSide != nil {
		return *x.TradeSide
	}
	return ProtoTradeSide_BUY
}

func (x *ProtoManualDeal) GetBookType() ProtoBookType {
	if x != nil && x.BookType != nil {
		return *x.BookType
	}
	return ProtoBookType_BOOK_A
}

func (x *ProtoManualDeal) GetClosingOrder() bool {
	if x != nil && x.ClosingOrder != nil {
		return *x.ClosingOrder
	}
	return false
}

func (x *ProtoManualDeal) GetGuaranteedStopLoss() bool {
	if x != nil && x.GuaranteedStopLoss != nil {
		return *x.GuaranteedStopLoss
	}
	return false
}

func (x *ProtoManualDeal) GetCheckTolerance() bool {
	if x != nil && x.CheckTolerance != nil {
		return *x.CheckTolerance
	}
	return false
}

func (x *ProtoManualDeal) GetLimitPrice() int64 {
	if x != nil && x.LimitPrice != nil {
		return *x.LimitPrice
	}
	return 0
}

func (x *ProtoManualDeal) GetDesiredVWAP() int64 {
	if x != nil && x.DesiredVWAP != nil {
		return *x.DesiredVWAP
	}
	return 0
}

func (x *ProtoManualDeal) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return 0
}

func (x *ProtoManualDeal) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoManualDeal) GetStake() int64 {
	if x != nil && x.Stake != nil {
		return *x.Stake
	}
	return 0
}

func (x *ProtoManualDeal) GetTriggerPrice() int64 {
	if x != nil && x.TriggerPrice != nil {
		return *x.TriggerPrice
	}
	return 0
}

func (x *ProtoManualDeal) GetGroupId() int64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *ProtoManualDeal) GetReason() ProtoManualDealReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ProtoManualDealReason_MANUAL_DEAL_REASON_ALWAYS_MANUAL
}

func (x *ProtoManualDeal) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *ProtoManualDeal) GetManagerId() int64 {
	if x != nil && x.ManagerId != nil {
		return *x.ManagerId
	}
	return 0
}

func (x *ProtoManualDeal) GetManagerLogin() int64 {
	if x != nil && x.ManagerLogin != nil {
		return *x.ManagerLogin
	}
	return 0
}

func (x *ProtoManualDeal) GetMarkup() int64 {
	if x != nil && x.Markup != nil {
		return *x.Markup
	}
	return 0
}

func (x *ProtoManualDeal) GetStopOut() bool {
	if x != nil && x.StopOut != nil {
		return *x.StopOut
	}
	return false
}

func (x *ProtoManualDeal) GetCloseWithPID() int64 {
	if x != nil && x.CloseWithPID != nil {
		return *x.CloseWithPID
	}
	return 0
}

func (x *ProtoManualDeal) GetDepositAssetId() int64 {
	if x != nil && x.DepositAssetId != nil {
		return *x.DepositAssetId
	}
	return 0
}

// Symbol entity (with limited number of fields)
type ProtoLightSymbol struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               *int64                 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`                             // Symbol ID
	SymbolCategoryId *int64                 `protobuf:"varint,2,req,name=symbolCategoryId" json:"symbolCategoryId,omitempty"` // Symbol Category ID
	SortingNumber    *float64               `protobuf:"fixed64,3,req,name=sortingNumber" json:"sortingNumber,omitempty"`      // Number used to sort Symbols in Symbol Lists responses
	Name             *string                `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`                          // Symbol name
	Description      *string                `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`            // Symbol description
	Tags             *string                `protobuf:"bytes,6,opt,name=tags" json:"tags,omitempty"`                          // Custom tags. Used for searching Symbols
	Favorite         *bool                  `protobuf:"varint,7,opt,name=favorite" json:"favorite,omitempty"`                 // Specifies whether Symbol is favorite
	Enabled          *bool                  `protobuf:"varint,8,opt,name=enabled" json:"enabled,omitempty"`                   // Specifies if Symbol is available for the tTraders
	BaseAssetId      *int64                 `protobuf:"varint,9,opt,name=baseAssetId" json:"baseAssetId,omitempty"`           // ID of base Asset
	QuoteAssetId     *int64                 `protobuf:"varint,10,opt,name=quoteAssetId" json:"quoteAssetId,omitempty"`        // ID of quote Asset
	Translation      *string                `protobuf:"bytes,11,opt,name=translation" json:"translation,omitempty"`           // Localisation setting for Trader
	UnifiedSymbolId  *int32                 `protobuf:"varint,12,opt,name=unifiedSymbolId" json:"unifiedSymbolId,omitempty"`  // Additional Symbol ID used for matching symbols of different Brokers
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProtoLightSymbol) Reset() {
	*x = ProtoLightSymbol{}
	mi := &file_CSModelMessages_External_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLightSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLightSymbol) ProtoMessage() {}

func (x *ProtoLightSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLightSymbol.ProtoReflect.Descriptor instead.
func (*ProtoLightSymbol) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{42}
}

func (x *ProtoLightSymbol) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ProtoLightSymbol) GetSymbolCategoryId() int64 {
	if x != nil && x.SymbolCategoryId != nil {
		return *x.SymbolCategoryId
	}
	return 0
}

func (x *ProtoLightSymbol) GetSortingNumber() float64 {
	if x != nil && x.SortingNumber != nil {
		return *x.SortingNumber
	}
	return 0
}

func (x *ProtoLightSymbol) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoLightSymbol) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoLightSymbol) GetTags() string {
	if x != nil && x.Tags != nil {
		return *x.Tags
	}
	return ""
}

func (x *ProtoLightSymbol) GetFavorite() bool {
	if x != nil && x.Favorite != nil {
		return *x.Favorite
	}
	return false
}

func (x *ProtoLightSymbol) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ProtoLightSymbol) GetBaseAssetId() int64 {
	if x != nil && x.BaseAssetId != nil {
		return *x.BaseAssetId
	}
	return 0
}

func (x *ProtoLightSymbol) GetQuoteAssetId() int64 {
	if x != nil && x.QuoteAssetId != nil {
		return *x.QuoteAssetId
	}
	return 0
}

func (x *ProtoLightSymbol) GetTranslation() string {
	if x != nil && x.Translation != nil {
		return *x.Translation
	}
	return ""
}

func (x *ProtoLightSymbol) GetUnifiedSymbolId() int32 {
	if x != nil && x.UnifiedSymbolId != nil {
		return *x.UnifiedSymbolId
	}
	return 0
}

// Symbol description
type ProtoSymbolDescription struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SymbolId        *int64                 `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`              // Symbol ID
	LongDescription *string                `protobuf:"bytes,2,opt,name=longDescription" json:"longDescription,omitempty"` // Long description of the symbol. Max length = 5120 symbols
	SymbolLogo      []byte                 `protobuf:"bytes,3,opt,name=symbolLogo" json:"symbolLogo,omitempty"`           // PNG file that contains Symbol logo. Max bytes = 65536
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ProtoSymbolDescription) Reset() {
	*x = ProtoSymbolDescription{}
	mi := &file_CSModelMessages_External_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSymbolDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSymbolDescription) ProtoMessage() {}

func (x *ProtoSymbolDescription) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSymbolDescription.ProtoReflect.Descriptor instead.
func (*ProtoSymbolDescription) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{43}
}

func (x *ProtoSymbolDescription) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoSymbolDescription) GetLongDescription() string {
	if x != nil && x.LongDescription != nil {
		return *x.LongDescription
	}
	return ""
}

func (x *ProtoSymbolDescription) GetSymbolLogo() []byte {
	if x != nil {
		return x.SymbolLogo
	}
	return nil
}

// Dynamic Leverage entity (see https://help.ctrader.com/ctrader/trading/dynamic-leverage)
type ProtoDynamicLeverage struct {
	state                  protoimpl.MessageState      `protogen:"open.v1"`
	LeverageId             *int64                      `protobuf:"varint,1,req,name=leverageId" json:"leverageId,omitempty"`                         // ID of Dynamic Leverage
	Name                   *string                     `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                      // Name of Dynamic Leverage
	Description            *string                     `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`                        // Description of Dynamic Leverage
	Tiers                  []*ProtoDynamicLeverageTier `protobuf:"bytes,4,rep,name=tiers" json:"tiers,omitempty"`                                    // Tier of Dynamic Leverage
	UtcLastUpdateTimestamp *int64                      `protobuf:"varint,5,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"` // UNIX timestamp in milliseconds when record was updated
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProtoDynamicLeverage) Reset() {
	*x = ProtoDynamicLeverage{}
	mi := &file_CSModelMessages_External_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDynamicLeverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDynamicLeverage) ProtoMessage() {}

func (x *ProtoDynamicLeverage) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDynamicLeverage.ProtoReflect.Descriptor instead.
func (*ProtoDynamicLeverage) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{44}
}

func (x *ProtoDynamicLeverage) GetLeverageId() int64 {
	if x != nil && x.LeverageId != nil {
		return *x.LeverageId
	}
	return 0
}

func (x *ProtoDynamicLeverage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoDynamicLeverage) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoDynamicLeverage) GetTiers() []*ProtoDynamicLeverageTier {
	if x != nil {
		return x.Tiers
	}
	return nil
}

func (x *ProtoDynamicLeverage) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

// Dynamic Leverage tier entity
type ProtoDynamicLeverageTier struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Volume        *int64                 `protobuf:"varint,1,req,name=volume" json:"volume,omitempty"`     // Volume of Tier as max USD volume of the Open Position (per side) to apply specified Leverage
	Leverage      *int32                 `protobuf:"varint,2,req,name=leverage" json:"leverage,omitempty"` // Leverage of Tier
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoDynamicLeverageTier) Reset() {
	*x = ProtoDynamicLeverageTier{}
	mi := &file_CSModelMessages_External_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoDynamicLeverageTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDynamicLeverageTier) ProtoMessage() {}

func (x *ProtoDynamicLeverageTier) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDynamicLeverageTier.ProtoReflect.Descriptor instead.
func (*ProtoDynamicLeverageTier) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{45}
}

func (x *ProtoDynamicLeverageTier) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *ProtoDynamicLeverageTier) GetLeverage() int32 {
	if x != nil && x.Leverage != nil {
		return *x.Leverage
	}
	return 0
}

// GSL Schedule entity
type ProtoGSLSchedule struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	ScheduleId    *int64                  `protobuf:"varint,1,req,name=scheduleId" json:"scheduleId,omitempty"` // ID of GSL Schedule
	Name          *string                 `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`              // Name of this GSL Schedule
	Tiers         []*ProtoGSLScheduleTier `protobuf:"bytes,3,rep,name=tiers" json:"tiers,omitempty"`            // List of (time -> multiplier) Schedule Tiers
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoGSLSchedule) Reset() {
	*x = ProtoGSLSchedule{}
	mi := &file_CSModelMessages_External_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoGSLSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGSLSchedule) ProtoMessage() {}

func (x *ProtoGSLSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGSLSchedule.ProtoReflect.Descriptor instead.
func (*ProtoGSLSchedule) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{46}
}

func (x *ProtoGSLSchedule) GetScheduleId() int64 {
	if x != nil && x.ScheduleId != nil {
		return *x.ScheduleId
	}
	return 0
}

func (x *ProtoGSLSchedule) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoGSLSchedule) GetTiers() []*ProtoGSLScheduleTier {
	if x != nil {
		return x.Tiers
	}
	return nil
}

// GSL Tier entity
type ProtoGSLScheduleTier struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     *int32                 `protobuf:"varint,1,req,name=startTime" json:"startTime,omitempty"`   // This Tier is active from startTime (Count of seconds from 00:00:00)
	Multiplier    *int32                 `protobuf:"varint,2,req,name=multiplier" json:"multiplier,omitempty"` // Tier's multiplier (in percents): 34 means 34%
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtoGSLScheduleTier) Reset() {
	*x = ProtoGSLScheduleTier{}
	mi := &file_CSModelMessages_External_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoGSLScheduleTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGSLScheduleTier) ProtoMessage() {}

func (x *ProtoGSLScheduleTier) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGSLScheduleTier.ProtoReflect.Descriptor instead.
func (*ProtoGSLScheduleTier) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{47}
}

func (x *ProtoGSLScheduleTier) GetStartTime() int32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *ProtoGSLScheduleTier) GetMultiplier() int32 {
	if x != nil && x.Multiplier != nil {
		return *x.Multiplier
	}
	return 0
}

// Records with info about ip address related with specific Order action
type ProtoOrderActionIP struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ActionId        *int64                 `protobuf:"varint,1,req,name=actionId" json:"actionId,omitempty"`              // Action ID
	ActionIPAddress *string                `protobuf:"bytes,2,req,name=actionIPAddress" json:"actionIPAddress,omitempty"` // IP address
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ProtoOrderActionIP) Reset() {
	*x = ProtoOrderActionIP{}
	mi := &file_CSModelMessages_External_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoOrderActionIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOrderActionIP) ProtoMessage() {}

func (x *ProtoOrderActionIP) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOrderActionIP.ProtoReflect.Descriptor instead.
func (*ProtoOrderActionIP) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{48}
}

func (x *ProtoOrderActionIP) GetActionId() int64 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *ProtoOrderActionIP) GetActionIPAddress() string {
	if x != nil && x.ActionIPAddress != nil {
		return *x.ActionIPAddress
	}
	return ""
}

// Withdrawal Request entity
type ProtoWithdrawRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     *uint64                `protobuf:"varint,2,req,name=id" json:"id,omitempty"`                                               // ID of Withdrawal Request
	TraderId               *uint64                `protobuf:"varint,3,req,name=traderId" json:"traderId,omitempty"`                                   // Trader ID
	CreateTimestamp        *uint64                `protobuf:"varint,4,req,name=createTimestamp" json:"createTimestamp,omitempty"`                     // UNIX timestamp in milliseconds of the Withdrawal Request creation
	UtcLastUpdateTimestamp *uint64                `protobuf:"varint,5,req,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`       // UNIX timestamp in milliseconds when the the Withdrawal Request was updated
	Amount                 *uint64                `protobuf:"varint,6,req,name=amount" json:"amount,omitempty"`                                       // Amount of operation
	Comment                *string                `protobuf:"bytes,7,opt,name=comment" json:"comment,omitempty"`                                      // Comment specified by the Trader
	RequestStatus          *ProtoRequestStatus    `protobuf:"varint,8,req,name=requestStatus,enum=ProtoRequestStatus" json:"requestStatus,omitempty"` // Status of the Withdrawal Request
	AssignedTo             *uint64                `protobuf:"varint,9,opt,name=assignedTo" json:"assignedTo,omitempty"`                               // ID of the Manager who processed this request
	BrokerComment          *string                `protobuf:"bytes,10,opt,name=brokerComment" json:"brokerComment,omitempty"`                         // Comment specified by the Manager
	MoneyDigits            *uint32                `protobuf:"varint,11,opt,name=moneyDigits" json:"moneyDigits,omitempty"`                            // Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpreted as business value multiplied by 10^8, then real value would be 10053099944 / 10^8 = 100.53099944. Affects amount
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProtoWithdrawRequest) Reset() {
	*x = ProtoWithdrawRequest{}
	mi := &file_CSModelMessages_External_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoWithdrawRequest) ProtoMessage() {}

func (x *ProtoWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoWithdrawRequest.ProtoReflect.Descriptor instead.
func (*ProtoWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{49}
}

func (x *ProtoWithdrawRequest) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ProtoWithdrawRequest) GetTraderId() uint64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoWithdrawRequest) GetCreateTimestamp() uint64 {
	if x != nil && x.CreateTimestamp != nil {
		return *x.CreateTimestamp
	}
	return 0
}

func (x *ProtoWithdrawRequest) GetUtcLastUpdateTimestamp() uint64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoWithdrawRequest) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *ProtoWithdrawRequest) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ProtoWithdrawRequest) GetRequestStatus() ProtoRequestStatus {
	if x != nil && x.RequestStatus != nil {
		return *x.RequestStatus
	}
	return ProtoRequestStatus_NEW
}

func (x *ProtoWithdrawRequest) GetAssignedTo() uint64 {
	if x != nil && x.AssignedTo != nil {
		return *x.AssignedTo
	}
	return 0
}

func (x *ProtoWithdrawRequest) GetBrokerComment() string {
	if x != nil && x.BrokerComment != nil {
		return *x.BrokerComment
	}
	return ""
}

func (x *ProtoWithdrawRequest) GetMoneyDigits() uint32 {
	if x != nil && x.MoneyDigits != nil {
		return *x.MoneyDigits
	}
	return 0
}

// Trading Schedule Profile entity
type ProtoScheduleProfile struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ScheduleProfileId      *int64                 `protobuf:"varint,1,req,name=scheduleProfileId" json:"scheduleProfileId,omitempty"`           // ID of the Schedule Profile
	Name                   *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                      // Name of the Schedule Profile
	Description            *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`                        // Description of Schedule Profile
	ScheduleTimeZone       *string                `protobuf:"bytes,4,req,name=scheduleTimeZone" json:"scheduleTimeZone,omitempty"`              // Profile time zone
	Interval               []*ProtoInterval       `protobuf:"bytes,5,rep,name=interval" json:"interval,omitempty"`                              // Schedule Profile intervals
	UtcLastUpdateTimestamp *int64                 `protobuf:"varint,6,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"` // UNIX timestamp in milliseconds when the Schedule was last updated
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProtoScheduleProfile) Reset() {
	*x = ProtoScheduleProfile{}
	mi := &file_CSModelMessages_External_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoScheduleProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoScheduleProfile) ProtoMessage() {}

func (x *ProtoScheduleProfile) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoScheduleProfile.ProtoReflect.Descriptor instead.
func (*ProtoScheduleProfile) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{50}
}

func (x *ProtoScheduleProfile) GetScheduleProfileId() int64 {
	if x != nil && x.ScheduleProfileId != nil {
		return *x.ScheduleProfileId
	}
	return 0
}

func (x *ProtoScheduleProfile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoScheduleProfile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoScheduleProfile) GetScheduleTimeZone() string {
	if x != nil && x.ScheduleTimeZone != nil {
		return *x.ScheduleTimeZone
	}
	return ""
}

func (x *ProtoScheduleProfile) GetInterval() []*ProtoInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *ProtoScheduleProfile) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

// Commission Profile entity
type ProtoCommissionProfile struct {
	state                        protoimpl.MessageState  `protogen:"open.v1"`
	CommissionProfileId          *int64                  `protobuf:"varint,1,req,name=commissionProfileId" json:"commissionProfileId,omitempty"`                               // ID of the Commission Profile
	Name                         *string                 `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                                              // Name of the Commission Profile
	Description                  *string                 `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`                                                // Description of Commission Profile
	CommissionType               *ProtoCommissionType    `protobuf:"varint,5,req,name=commissionType,enum=ProtoCommissionType,def=1" json:"commissionType,omitempty"`          // Commission Type to interpret preciseTradingCommissionRate
	MinCommissionType            *ProtoMinCommissionType `protobuf:"varint,7,req,name=minCommissionType,enum=ProtoMinCommissionType,def=1" json:"minCommissionType,omitempty"` // Commission Type to interpret preciseMinCommission
	MinCommissionAssetId         *int64                  `protobuf:"varint,8,req,name=minCommissionAssetId" json:"minCommissionAssetId,omitempty"`                             // Asset of the minimal commission. Used when minCommissionType = 0
	PreciseTradingCommissionRate *int64                  `protobuf:"varint,9,opt,name=preciseTradingCommissionRate" json:"preciseTradingCommissionRate,omitempty"`             // Commission rate for the Profile
	PreciseMinCommission         *int64                  `protobuf:"varint,10,opt,name=preciseMinCommission" json:"preciseMinCommission,omitempty"`                            // Amount of minimal commission to be paid for each Order, multiplied by 10^8: 10053099944 = 100.53099944 USD
	AvoidMinCommissionOnStopOut  *bool                   `protobuf:"varint,11,opt,name=avoidMinCommissionOnStopOut,def=0" json:"avoidMinCommissionOnStopOut,omitempty"`        // If TRUE then minimal commission is not charged on Stop Out
	UtcLastUpdateTimestamp       *int64                  `protobuf:"varint,12,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`                        // UNIX timestamp in milliseconds when the Profile was last updated
	PnlConversionFeeRate         *int32                  `protobuf:"varint,13,opt,name=pnlConversionFeeRate" json:"pnlConversionFeeRate,omitempty"`                            // Conversion Fee in percentage cents, 1234 means 12.34%
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

// Default values for ProtoCommissionProfile fields.
const (
	Default_ProtoCommissionProfile_CommissionType              = ProtoCommissionType_USD_PER_MILLION_USD
	Default_ProtoCommissionProfile_MinCommissionType           = ProtoMinCommissionType_CURRENCY
	Default_ProtoCommissionProfile_AvoidMinCommissionOnStopOut = bool(false)
)

func (x *ProtoCommissionProfile) Reset() {
	*x = ProtoCommissionProfile{}
	mi := &file_CSModelMessages_External_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoCommissionProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCommissionProfile) ProtoMessage() {}

func (x *ProtoCommissionProfile) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCommissionProfile.ProtoReflect.Descriptor instead.
func (*ProtoCommissionProfile) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{51}
}

func (x *ProtoCommissionProfile) GetCommissionProfileId() int64 {
	if x != nil && x.CommissionProfileId != nil {
		return *x.CommissionProfileId
	}
	return 0
}

func (x *ProtoCommissionProfile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoCommissionProfile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoCommissionProfile) GetCommissionType() ProtoCommissionType {
	if x != nil && x.CommissionType != nil {
		return *x.CommissionType
	}
	return Default_ProtoCommissionProfile_CommissionType
}

func (x *ProtoCommissionProfile) GetMinCommissionType() ProtoMinCommissionType {
	if x != nil && x.MinCommissionType != nil {
		return *x.MinCommissionType
	}
	return Default_ProtoCommissionProfile_MinCommissionType
}

func (x *ProtoCommissionProfile) GetMinCommissionAssetId() int64 {
	if x != nil && x.MinCommissionAssetId != nil {
		return *x.MinCommissionAssetId
	}
	return 0
}

func (x *ProtoCommissionProfile) GetPreciseTradingCommissionRate() int64 {
	if x != nil && x.PreciseTradingCommissionRate != nil {
		return *x.PreciseTradingCommissionRate
	}
	return 0
}

func (x *ProtoCommissionProfile) GetPreciseMinCommission() int64 {
	if x != nil && x.PreciseMinCommission != nil {
		return *x.PreciseMinCommission
	}
	return 0
}

func (x *ProtoCommissionProfile) GetAvoidMinCommissionOnStopOut() bool {
	if x != nil && x.AvoidMinCommissionOnStopOut != nil {
		return *x.AvoidMinCommissionOnStopOut
	}
	return Default_ProtoCommissionProfile_AvoidMinCommissionOnStopOut
}

func (x *ProtoCommissionProfile) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoCommissionProfile) GetPnlConversionFeeRate() int32 {
	if x != nil && x.PnlConversionFeeRate != nil {
		return *x.PnlConversionFeeRate
	}
	return 0
}

// Volume Profile entity
type ProtoVolumeProfile struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	VolumeProfileId        *int64                 `protobuf:"varint,1,req,name=volumeProfileId" json:"volumeProfileId,omitempty"`                // ID of the Volume Profile
	Name                   *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                       // Name of the Volume Profile
	Description            *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`                         // Description of Volume Profile
	MinVolume              *int64                 `protobuf:"varint,4,req,name=minVolume" json:"minVolume,omitempty"`                            // Minimum volume in base Asset of the Symbol
	StepVolume             *int64                 `protobuf:"varint,5,req,name=stepVolume" json:"stepVolume,omitempty"`                          // Allowed volume step in base Asset of the Symbol
	MaxVolume              *int64                 `protobuf:"varint,6,req,name=maxVolume" json:"maxVolume,omitempty"`                            // Maximum volume in base Asset of the Symbol
	MinStake               *int64                 `protobuf:"varint,7,req,name=minStake" json:"minStake,omitempty"`                              // Minimal stake (for Spread Betting) in Deposit currency. MinVolume is ignored for Spread Betting Accounts
	StepStake              *int64                 `protobuf:"varint,8,req,name=stepStake" json:"stepStake,omitempty"`                            // Step of stake (for Spread Betting) in Deposit currency. StepVolume is ignored for Spread Betting Accounts
	MaxStake               *int64                 `protobuf:"varint,9,req,name=maxStake" json:"maxStake,omitempty"`                              // Maximum stake (for Spread Betting) in Deposit currency. MaxVolume is ignored for Spread Betting Accounts
	MaxExposure            *uint64                `protobuf:"varint,10,req,name=maxExposure" json:"maxExposure,omitempty"`                       // Maximum exposure as volume in USD cents
	UtcLastUpdateTimestamp *int64                 `protobuf:"varint,11,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"` // UNIX timestamp in milliseconds when the Profile was last updated
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProtoVolumeProfile) Reset() {
	*x = ProtoVolumeProfile{}
	mi := &file_CSModelMessages_External_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoVolumeProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoVolumeProfile) ProtoMessage() {}

func (x *ProtoVolumeProfile) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoVolumeProfile.ProtoReflect.Descriptor instead.
func (*ProtoVolumeProfile) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{52}
}

func (x *ProtoVolumeProfile) GetVolumeProfileId() int64 {
	if x != nil && x.VolumeProfileId != nil {
		return *x.VolumeProfileId
	}
	return 0
}

func (x *ProtoVolumeProfile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoVolumeProfile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoVolumeProfile) GetMinVolume() int64 {
	if x != nil && x.MinVolume != nil {
		return *x.MinVolume
	}
	return 0
}

func (x *ProtoVolumeProfile) GetStepVolume() int64 {
	if x != nil && x.StepVolume != nil {
		return *x.StepVolume
	}
	return 0
}

func (x *ProtoVolumeProfile) GetMaxVolume() int64 {
	if x != nil && x.MaxVolume != nil {
		return *x.MaxVolume
	}
	return 0
}

func (x *ProtoVolumeProfile) GetMinStake() int64 {
	if x != nil && x.MinStake != nil {
		return *x.MinStake
	}
	return 0
}

func (x *ProtoVolumeProfile) GetStepStake() int64 {
	if x != nil && x.StepStake != nil {
		return *x.StepStake
	}
	return 0
}

func (x *ProtoVolumeProfile) GetMaxStake() int64 {
	if x != nil && x.MaxStake != nil {
		return *x.MaxStake
	}
	return 0
}

func (x *ProtoVolumeProfile) GetMaxExposure() uint64 {
	if x != nil && x.MaxExposure != nil {
		return *x.MaxExposure
	}
	return 0
}

func (x *ProtoVolumeProfile) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

// Execution Profile entity
type ProtoExecutionProfile struct {
	state                  protoimpl.MessageState   `protogen:"open.v1"`
	ExecutionProfileId     *int64                   `protobuf:"varint,1,req,name=executionProfileId" json:"executionProfileId,omitempty"`                                    // ID of the Execution Profile
	Name                   *string                  `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                                                 // Name of the Execution Profile
	Description            *string                  `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`                                                   // Description of Execution Profile
	MinBookBDelay          *uint32                  `protobuf:"varint,4,req,name=minBookBDelay" json:"minBookBDelay,omitempty"`                                              // Minimal Book B execution delay in milliseconds
	MaxBookBDelay          *uint32                  `protobuf:"varint,5,req,name=maxBookBDelay" json:"maxBookBDelay,omitempty"`                                              // Maximum Book B execution delay in milliseconds
	ExecutionPolicy        *ProtoExecutionPolicy    `protobuf:"varint,6,req,name=executionPolicy,enum=ProtoExecutionPolicy" json:"executionPolicy,omitempty"`                // Determines execution policy for all opening Orders
	GslExecutionPolicy     *ProtoGSLExecutionPolicy `protobuf:"varint,7,req,name=gslExecutionPolicy,enum=ProtoGSLExecutionPolicy,def=0" json:"gslExecutionPolicy,omitempty"` // Type of execution policy
	UtcLastUpdateTimestamp *int64                   `protobuf:"varint,8,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`                            // UNIX timestamp in milliseconds when the Profile was last updated
	ConditionVolumeUsd     *int64                   `protobuf:"varint,9,opt,name=conditionVolumeUsd" json:"conditionVolumeUsd,omitempty"`                                    // Used only if executionPolicy = BOOK_A_WITH_CONDITION. If usdVolume >= conditionVolumeUsd then BOOK_A is used, otherwise BOOK_B is used
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for ProtoExecutionProfile fields.
const (
	Default_ProtoExecutionProfile_GslExecutionPolicy = ProtoGSLExecutionPolicy_DISABLED
)

func (x *ProtoExecutionProfile) Reset() {
	*x = ProtoExecutionProfile{}
	mi := &file_CSModelMessages_External_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoExecutionProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoExecutionProfile) ProtoMessage() {}

func (x *ProtoExecutionProfile) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoExecutionProfile.ProtoReflect.Descriptor instead.
func (*ProtoExecutionProfile) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{53}
}

func (x *ProtoExecutionProfile) GetExecutionProfileId() int64 {
	if x != nil && x.ExecutionProfileId != nil {
		return *x.ExecutionProfileId
	}
	return 0
}

func (x *ProtoExecutionProfile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoExecutionProfile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoExecutionProfile) GetMinBookBDelay() uint32 {
	if x != nil && x.MinBookBDelay != nil {
		return *x.MinBookBDelay
	}
	return 0
}

func (x *ProtoExecutionProfile) GetMaxBookBDelay() uint32 {
	if x != nil && x.MaxBookBDelay != nil {
		return *x.MaxBookBDelay
	}
	return 0
}

func (x *ProtoExecutionProfile) GetExecutionPolicy() ProtoExecutionPolicy {
	if x != nil && x.ExecutionPolicy != nil {
		return *x.ExecutionPolicy
	}
	return ProtoExecutionPolicy_BOOKA
}

func (x *ProtoExecutionProfile) GetGslExecutionPolicy() ProtoGSLExecutionPolicy {
	if x != nil && x.GslExecutionPolicy != nil {
		return *x.GslExecutionPolicy
	}
	return Default_ProtoExecutionProfile_GslExecutionPolicy
}

func (x *ProtoExecutionProfile) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoExecutionProfile) GetConditionVolumeUsd() int64 {
	if x != nil && x.ConditionVolumeUsd != nil {
		return *x.ConditionVolumeUsd
	}
	return 0
}

// Protection Profile Entity
type ProtoProtectionProfile struct {
	state               protoimpl.MessageState   `protogen:"open.v1"`
	ProtectionProfileId *int64                   `protobuf:"varint,1,req,name=protectionProfileId" json:"protectionProfileId,omitempty"`                        // ID of the Protection Profile
	Name                *string                  `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                                       // Name of the Protection Profile
	Description         *string                  `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`                                         // Description of Protection Profile
	GslCharge           *int64                   `protobuf:"varint,4,req,name=gslCharge" json:"gslCharge,omitempty"`                                            // Charge (additional commission) for Guaranteed Stop Loss placement
	SlDistance          *uint32                  `protobuf:"varint,5,req,name=slDistance" json:"slDistance,omitempty"`                                          // Minimal distance between current market price and Stop Loss specified in units as per distanceSetIn
	TpDistance          *uint32                  `protobuf:"varint,6,req,name=tpDistance" json:"tpDistance,omitempty"`                                          // Minimal distance between current market price and Stop Loss Take Profit specified in units as per distanceSetIn
	GslDistance         *uint32                  `protobuf:"varint,7,req,name=gslDistance" json:"gslDistance,omitempty"`                                        // Minimal distance for placing Guaranteed Stop Loss specified in units as per distanceSetIn
	DistanceSetIn       *ProtoSymbolDistanceType `protobuf:"varint,8,req,name=distanceSetIn,enum=ProtoSymbolDistanceType,def=1" json:"distanceSetIn,omitempty"` // Distance in points (15 means 15 points) or percentage (15 means 0.15%)
	Tolerance           *int32                   `protobuf:"varint,9,req,name=tolerance" json:"tolerance,omitempty"`                                            // Tolerance distance(max slippage for instant Orders) specified in units as per distanceSetIn. If slippage is more than tolerance and price is better for the Trader Order will be executed at market price. If slippage is more than tolerance and price is worse for the Trader Order will be cancelled
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for ProtoProtectionProfile fields.
const (
	Default_ProtoProtectionProfile_DistanceSetIn = ProtoSymbolDistanceType_SYMBOL_DISTANCE_IN_POINTS
)

func (x *ProtoProtectionProfile) Reset() {
	*x = ProtoProtectionProfile{}
	mi := &file_CSModelMessages_External_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoProtectionProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoProtectionProfile) ProtoMessage() {}

func (x *ProtoProtectionProfile) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoProtectionProfile.ProtoReflect.Descriptor instead.
func (*ProtoProtectionProfile) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{54}
}

func (x *ProtoProtectionProfile) GetProtectionProfileId() int64 {
	if x != nil && x.ProtectionProfileId != nil {
		return *x.ProtectionProfileId
	}
	return 0
}

func (x *ProtoProtectionProfile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoProtectionProfile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoProtectionProfile) GetGslCharge() int64 {
	if x != nil && x.GslCharge != nil {
		return *x.GslCharge
	}
	return 0
}

func (x *ProtoProtectionProfile) GetSlDistance() uint32 {
	if x != nil && x.SlDistance != nil {
		return *x.SlDistance
	}
	return 0
}

func (x *ProtoProtectionProfile) GetTpDistance() uint32 {
	if x != nil && x.TpDistance != nil {
		return *x.TpDistance
	}
	return 0
}

func (x *ProtoProtectionProfile) GetGslDistance() uint32 {
	if x != nil && x.GslDistance != nil {
		return *x.GslDistance
	}
	return 0
}

func (x *ProtoProtectionProfile) GetDistanceSetIn() ProtoSymbolDistanceType {
	if x != nil && x.DistanceSetIn != nil {
		return *x.DistanceSetIn
	}
	return Default_ProtoProtectionProfile_DistanceSetIn
}

func (x *ProtoProtectionProfile) GetTolerance() int32 {
	if x != nil && x.Tolerance != nil {
		return *x.Tolerance
	}
	return 0
}

// Swap Free Profile (with Administrative Fee instead of Swaps)
type ProtoSwapFreeProfile struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	SwapFreeProfileId       *int64                 `protobuf:"varint,1,req,name=swapFreeProfileId" json:"swapFreeProfileId,omitempty"`                                       // ID of the Swap Free Profile
	Name                    *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                                                  // Name of the Swap Free Profile
	Description             *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`                                                    // Description of Swap Free Profile
	RolloverCommission      *int64                 `protobuf:"varint,4,req,name=rolloverCommission" json:"rolloverCommission,omitempty"`                                     // Kind of Swap for Swap free Accounts (USD per million USD in cents)
	SkipRolloverDays        *int32                 `protobuf:"varint,5,req,name=skipRolloverDays" json:"skipRolloverDays,omitempty"`                                         // Count of nights before first Rollover Commission is charged
	RolloverChargePeriod    *int32                 `protobuf:"varint,6,req,name=rolloverChargePeriod" json:"rolloverChargePeriod,omitempty"`                                 // Payment period of Rollover Commission in days (default = 1). 1 (or 0) means daily payments, 2 each second day. 3x rollover is applied only for daily payments
	RolloverCommission3Days *ProtoDayOfWeek        `protobuf:"varint,7,req,name=rolloverCommission3Days,enum=ProtoDayOfWeek,def=1" json:"rolloverCommission3Days,omitempty"` // Day of the week (in UTC) when Administrative Fee charge amount will be tripled. Applied only if rollover charge period = 0 or 1
	UtcLastUpdateTimestamp  *int64                 `protobuf:"varint,8,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`                             // UNIX timestamp in milliseconds when the Profile was last updated
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for ProtoSwapFreeProfile fields.
const (
	Default_ProtoSwapFreeProfile_RolloverCommission3Days = ProtoDayOfWeek_MONDAY
)

func (x *ProtoSwapFreeProfile) Reset() {
	*x = ProtoSwapFreeProfile{}
	mi := &file_CSModelMessages_External_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSwapFreeProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSwapFreeProfile) ProtoMessage() {}

func (x *ProtoSwapFreeProfile) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSwapFreeProfile.ProtoReflect.Descriptor instead.
func (*ProtoSwapFreeProfile) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{55}
}

func (x *ProtoSwapFreeProfile) GetSwapFreeProfileId() int64 {
	if x != nil && x.SwapFreeProfileId != nil {
		return *x.SwapFreeProfileId
	}
	return 0
}

func (x *ProtoSwapFreeProfile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoSwapFreeProfile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoSwapFreeProfile) GetRolloverCommission() int64 {
	if x != nil && x.RolloverCommission != nil {
		return *x.RolloverCommission
	}
	return 0
}

func (x *ProtoSwapFreeProfile) GetSkipRolloverDays() int32 {
	if x != nil && x.SkipRolloverDays != nil {
		return *x.SkipRolloverDays
	}
	return 0
}

func (x *ProtoSwapFreeProfile) GetRolloverChargePeriod() int32 {
	if x != nil && x.RolloverChargePeriod != nil {
		return *x.RolloverChargePeriod
	}
	return 0
}

func (x *ProtoSwapFreeProfile) GetRolloverCommission3Days() ProtoDayOfWeek {
	if x != nil && x.RolloverCommission3Days != nil {
		return *x.RolloverCommission3Days
	}
	return Default_ProtoSwapFreeProfile_RolloverCommission3Days
}

func (x *ProtoSwapFreeProfile) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

// Holiday entity
type ProtoHoliday struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	HolidayId        *int64                 `protobuf:"varint,1,req,name=holidayId" json:"holidayId,omitempty"`              // ID of Holiday
	Name             *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                         // Name of the Holiday
	Description      *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`           // Description of the Holiday
	ScheduleTimeZone *string                `protobuf:"bytes,4,req,name=scheduleTimeZone" json:"scheduleTimeZone,omitempty"` // Timezone of the Holiday
	HolidayDate      *int64                 `protobuf:"varint,5,req,name=holidayDate" json:"holidayDate,omitempty"`          // Holiday date. EpochMillis / 86400000 (ms * sec * min * hours)
	IsRecurring      *bool                  `protobuf:"varint,6,req,name=isRecurring" json:"isRecurring,omitempty"`          // If TRUE then Holiday's date considered as annual event at the same date, so year is not important anymore
	StartSecond      *int32                 `protobuf:"varint,7,opt,name=startSecond" json:"startSecond,omitempty"`          // Amount of seconds from 00:00:00 of the Holiday day when Holiday actually starts
	EndSecond        *int32                 `protobuf:"varint,8,opt,name=endSecond" json:"endSecond,omitempty"`              // Amount of seconds from 00:00:00 of the Holiday day when Holiday actually finished
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProtoHoliday) Reset() {
	*x = ProtoHoliday{}
	mi := &file_CSModelMessages_External_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoHoliday) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHoliday) ProtoMessage() {}

func (x *ProtoHoliday) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHoliday.ProtoReflect.Descriptor instead.
func (*ProtoHoliday) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{56}
}

func (x *ProtoHoliday) GetHolidayId() int64 {
	if x != nil && x.HolidayId != nil {
		return *x.HolidayId
	}
	return 0
}

func (x *ProtoHoliday) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoHoliday) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoHoliday) GetScheduleTimeZone() string {
	if x != nil && x.ScheduleTimeZone != nil {
		return *x.ScheduleTimeZone
	}
	return ""
}

func (x *ProtoHoliday) GetHolidayDate() int64 {
	if x != nil && x.HolidayDate != nil {
		return *x.HolidayDate
	}
	return 0
}

func (x *ProtoHoliday) GetIsRecurring() bool {
	if x != nil && x.IsRecurring != nil {
		return *x.IsRecurring
	}
	return false
}

func (x *ProtoHoliday) GetStartSecond() int32 {
	if x != nil && x.StartSecond != nil {
		return *x.StartSecond
	}
	return 0
}

func (x *ProtoHoliday) GetEndSecond() int32 {
	if x != nil && x.EndSecond != nil {
		return *x.EndSecond
	}
	return 0
}

// Holiday Profile - profile with set of Holidays
type ProtoHolidayProfile struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	HolidayProfileId       *int64                 `protobuf:"varint,1,req,name=holidayProfileId" json:"holidayProfileId,omitempty"`             // ID of Holiday Profile
	Name                   *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                      // Name of the Holiday Profile
	Description            *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`                        // Description of the Holiday Profile
	HolidayId              []int64                `protobuf:"varint,4,rep,packed,name=holidayId" json:"holidayId,omitempty"`                    // List of IDs of Holidays
	UtcLastUpdateTimestamp *int64                 `protobuf:"varint,5,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"` // UNIX timestamp in milliseconds when the Profile was last updated
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProtoHolidayProfile) Reset() {
	*x = ProtoHolidayProfile{}
	mi := &file_CSModelMessages_External_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoHolidayProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHolidayProfile) ProtoMessage() {}

func (x *ProtoHolidayProfile) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHolidayProfile.ProtoReflect.Descriptor instead.
func (*ProtoHolidayProfile) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{57}
}

func (x *ProtoHolidayProfile) GetHolidayProfileId() int64 {
	if x != nil && x.HolidayProfileId != nil {
		return *x.HolidayProfileId
	}
	return 0
}

func (x *ProtoHolidayProfile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoHolidayProfile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoHolidayProfile) GetHolidayId() []int64 {
	if x != nil {
		return x.HolidayId
	}
	return nil
}

func (x *ProtoHolidayProfile) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

// Swap and Dividends settings for symbol
type ProtoSwapAndDividendSymbol struct {
	state               protoimpl.MessageState    `protogen:"open.v1"`
	SymbolId            *int64                    `protobuf:"varint,1,req,name=symbolId" json:"symbolId,omitempty"`                                                           // Symbol ID
	SwapRollover3Days   *ProtoDayOfWeek           `protobuf:"varint,2,opt,name=swapRollover3Days,enum=ProtoDayOfWeek,def=1" json:"swapRollover3Days,omitempty"`               // Day of the week when SWAP charge amount will be tripled. Doesn't impact Rollover Commission. If unspecified, default parameter from Symbol is used
	SwapLong            *float64                  `protobuf:"fixed64,3,opt,name=swapLong" json:"swapLong,omitempty"`                                                          // SWAP value for long Positions If unspecified, default parameter from Symbol is used
	SwapShort           *float64                  `protobuf:"fixed64,4,opt,name=swapShort" json:"swapShort,omitempty"`                                                        // SWAP value for short Positions If unspecified, default parameter from Symbol is used
	SwapCalculationType *ProtoSwapCalculationType `protobuf:"varint,5,opt,name=swapCalculationType,enum=ProtoSwapCalculationType,def=0" json:"swapCalculationType,omitempty"` // Specifies type of SWAP computation as PIPS (0) or PERCENTAGE (1, annual, in percent). If unspecified, default parameter from Symbol is used Default: PIPS
	DividendsLong       *int64                    `protobuf:"varint,6,opt,name=dividendsLong" json:"dividendsLong,omitempty"`                                                 // Amount of dividends for Long Positions. If unspecified, default parameter from Symbol is used
	DividendsShort      *int64                    `protobuf:"varint,7,opt,name=dividendsShort" json:"dividendsShort,omitempty"`                                               // Amount of dividends for Short positions. If unspecified, default parameter from Symbol is used
	DividendTime        *int64                    `protobuf:"varint,8,opt,name=dividendTime" json:"dividendTime,omitempty"`                                                   // UNIX timestamp in milliseconds of charging dividends
	SwapTime            *int32                    `protobuf:"varint,9,opt,name=swapTime" json:"swapTime,omitempty"`                                                           // Time from which Swap Period is calculated, in minutes from 00:00. If unspecified, default parameter from Symbol is used
	SwapPeriod          *int32                    `protobuf:"varint,10,opt,name=swapPeriod" json:"swapPeriod,omitempty"`                                                      // SWAP is calculated every Swap Period (in hours). If unspecified, default parameter from Symbol is used
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for ProtoSwapAndDividendSymbol fields.
const (
	Default_ProtoSwapAndDividendSymbol_SwapRollover3Days   = ProtoDayOfWeek_MONDAY
	Default_ProtoSwapAndDividendSymbol_SwapCalculationType = ProtoSwapCalculationType_PIPS
)

func (x *ProtoSwapAndDividendSymbol) Reset() {
	*x = ProtoSwapAndDividendSymbol{}
	mi := &file_CSModelMessages_External_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSwapAndDividendSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSwapAndDividendSymbol) ProtoMessage() {}

func (x *ProtoSwapAndDividendSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSwapAndDividendSymbol.ProtoReflect.Descriptor instead.
func (*ProtoSwapAndDividendSymbol) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{58}
}

func (x *ProtoSwapAndDividendSymbol) GetSymbolId() int64 {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return 0
}

func (x *ProtoSwapAndDividendSymbol) GetSwapRollover3Days() ProtoDayOfWeek {
	if x != nil && x.SwapRollover3Days != nil {
		return *x.SwapRollover3Days
	}
	return Default_ProtoSwapAndDividendSymbol_SwapRollover3Days
}

func (x *ProtoSwapAndDividendSymbol) GetSwapLong() float64 {
	if x != nil && x.SwapLong != nil {
		return *x.SwapLong
	}
	return 0
}

func (x *ProtoSwapAndDividendSymbol) GetSwapShort() float64 {
	if x != nil && x.SwapShort != nil {
		return *x.SwapShort
	}
	return 0
}

func (x *ProtoSwapAndDividendSymbol) GetSwapCalculationType() ProtoSwapCalculationType {
	if x != nil && x.SwapCalculationType != nil {
		return *x.SwapCalculationType
	}
	return Default_ProtoSwapAndDividendSymbol_SwapCalculationType
}

func (x *ProtoSwapAndDividendSymbol) GetDividendsLong() int64 {
	if x != nil && x.DividendsLong != nil {
		return *x.DividendsLong
	}
	return 0
}

func (x *ProtoSwapAndDividendSymbol) GetDividendsShort() int64 {
	if x != nil && x.DividendsShort != nil {
		return *x.DividendsShort
	}
	return 0
}

func (x *ProtoSwapAndDividendSymbol) GetDividendTime() int64 {
	if x != nil && x.DividendTime != nil {
		return *x.DividendTime
	}
	return 0
}

func (x *ProtoSwapAndDividendSymbol) GetSwapTime() int32 {
	if x != nil && x.SwapTime != nil {
		return *x.SwapTime
	}
	return 0
}

func (x *ProtoSwapAndDividendSymbol) GetSwapPeriod() int32 {
	if x != nil && x.SwapPeriod != nil {
		return *x.SwapPeriod
	}
	return 0
}

// Swap and Dividends Profile
type ProtoSwapAndDividendProfile struct {
	state                    protoimpl.MessageState        `protogen:"open.v1"`
	SwapAndDividendProfileId *int64                        `protobuf:"varint,1,req,name=swapAndDividendProfileId" json:"swapAndDividendProfileId,omitempty"` // Profile ID
	Name                     *string                       `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                          // Profile name
	Description              *string                       `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`                            // Profile description
	UtcLastUpdateTimestamp   *int64                        `protobuf:"varint,4,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`     // UNIX timestamp in milliseconds of modification time
	Symbol                   []*ProtoSwapAndDividendSymbol `protobuf:"bytes,5,rep,name=symbol" json:"symbol,omitempty"`                                      // List of associated Symbols specific settings
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ProtoSwapAndDividendProfile) Reset() {
	*x = ProtoSwapAndDividendProfile{}
	mi := &file_CSModelMessages_External_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoSwapAndDividendProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSwapAndDividendProfile) ProtoMessage() {}

func (x *ProtoSwapAndDividendProfile) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSwapAndDividendProfile.ProtoReflect.Descriptor instead.
func (*ProtoSwapAndDividendProfile) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{59}
}

func (x *ProtoSwapAndDividendProfile) GetSwapAndDividendProfileId() int64 {
	if x != nil && x.SwapAndDividendProfileId != nil {
		return *x.SwapAndDividendProfileId
	}
	return 0
}

func (x *ProtoSwapAndDividendProfile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoSwapAndDividendProfile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoSwapAndDividendProfile) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoSwapAndDividendProfile) GetSymbol() []*ProtoSwapAndDividendSymbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

// Swap and Dividends Profile (with limited number of fields)
type ProtoLightSwapAndDividendProfile struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	SwapAndDividendProfileId *int64                 `protobuf:"varint,1,req,name=swapAndDividendProfileId" json:"swapAndDividendProfileId,omitempty"` // Profile ID
	Name                     *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                          // Profile name
	Description              *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`                            // Profile description
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ProtoLightSwapAndDividendProfile) Reset() {
	*x = ProtoLightSwapAndDividendProfile{}
	mi := &file_CSModelMessages_External_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoLightSwapAndDividendProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLightSwapAndDividendProfile) ProtoMessage() {}

func (x *ProtoLightSwapAndDividendProfile) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLightSwapAndDividendProfile.ProtoReflect.Descriptor instead.
func (*ProtoLightSwapAndDividendProfile) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{60}
}

func (x *ProtoLightSwapAndDividendProfile) GetSwapAndDividendProfileId() int64 {
	if x != nil && x.SwapAndDividendProfileId != nil {
		return *x.SwapAndDividendProfileId
	}
	return 0
}

func (x *ProtoLightSwapAndDividendProfile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoLightSwapAndDividendProfile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// Futures settings
type ProtoFuturesSettings struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	DatesTimeZone                *string                `protobuf:"bytes,1,req,name=datesTimeZone" json:"datesTimeZone,omitempty"`                                // Time zone for parameters lastTradeTimestampInMinutes and expirationTimestampInMinutes
	LastTradeTimestampInMinutes  *uint32                `protobuf:"varint,2,req,name=lastTradeTimestampInMinutes" json:"lastTradeTimestampInMinutes,omitempty"`   // Amount of minutes passed since 01.01.1970 00:00 at specified datesTimeZone (for UTC+5 01:23 3rd July 2021 would be 27087923, so as for UTC+2) of the last Trade (Positions can not be opened after this time, trading mode will be CLOSE_ONLY). For example zone is UTC+2 and value is 27519286, then trigger will happen at 27519406 UTC+0 (120 minutes less)
	ExpirationTimestampInMinutes *uint32                `protobuf:"varint,3,req,name=expirationTimestampInMinutes" json:"expirationTimestampInMinutes,omitempty"` // Amount of minutes passed since 01.01.1970 00:00 at specified datesTimeZone (for UTC+5 01:23 3rd July 2021 would be 27087923, so as for UTC+2) of the future expiration (trading will be disabled, Positions closed, Orders cancelled, trading mode will be FULLY_DISABLED). For example zone is UTC+2 and value is 27519286, then trigger will happen at 27519406 UTC+0 (120 minutes less)
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ProtoFuturesSettings) Reset() {
	*x = ProtoFuturesSettings{}
	mi := &file_CSModelMessages_External_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoFuturesSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoFuturesSettings) ProtoMessage() {}

func (x *ProtoFuturesSettings) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoFuturesSettings.ProtoReflect.Descriptor instead.
func (*ProtoFuturesSettings) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{61}
}

func (x *ProtoFuturesSettings) GetDatesTimeZone() string {
	if x != nil && x.DatesTimeZone != nil {
		return *x.DatesTimeZone
	}
	return ""
}

func (x *ProtoFuturesSettings) GetLastTradeTimestampInMinutes() uint32 {
	if x != nil && x.LastTradeTimestampInMinutes != nil {
		return *x.LastTradeTimestampInMinutes
	}
	return 0
}

func (x *ProtoFuturesSettings) GetExpirationTimestampInMinutes() uint32 {
	if x != nil && x.ExpirationTimestampInMinutes != nil {
		return *x.ExpirationTimestampInMinutes
	}
	return 0
}

// Introducing Broker default commissions per Symbol Category
type ProtoIbCommissionSymbolCategory struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	SymbolCategoryId                *int64                 `protobuf:"varint,1,req,name=symbolCategoryId" json:"symbolCategoryId,omitempty"`                               // ID of Symbol Category
	IntroducingBrokerCommissionRate *int32                 `protobuf:"varint,2,req,name=introducingBrokerCommissionRate" json:"introducingBrokerCommissionRate,omitempty"` // Commission rate of IB
	PocketCommissionRate            *int32                 `protobuf:"varint,3,req,name=pocketCommissionRate" json:"pocketCommissionRate,omitempty"`                       // Commission rate which Broker will pay to IB for the Deal of the Trader
	PocketMarkupRate                *int32                 `protobuf:"varint,4,req,name=pocketMarkupRate" json:"pocketMarkupRate,omitempty"`                               // Markup which Broker will pay to IB
	IbCommissionsType               *ProtoCommissionType   `protobuf:"varint,5,req,name=ibCommissionsType,enum=ProtoCommissionType" json:"ibCommissionsType,omitempty"`    // Default Commission Type for IB
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *ProtoIbCommissionSymbolCategory) Reset() {
	*x = ProtoIbCommissionSymbolCategory{}
	mi := &file_CSModelMessages_External_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoIbCommissionSymbolCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoIbCommissionSymbolCategory) ProtoMessage() {}

func (x *ProtoIbCommissionSymbolCategory) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoIbCommissionSymbolCategory.ProtoReflect.Descriptor instead.
func (*ProtoIbCommissionSymbolCategory) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{62}
}

func (x *ProtoIbCommissionSymbolCategory) GetSymbolCategoryId() int64 {
	if x != nil && x.SymbolCategoryId != nil {
		return *x.SymbolCategoryId
	}
	return 0
}

func (x *ProtoIbCommissionSymbolCategory) GetIntroducingBrokerCommissionRate() int32 {
	if x != nil && x.IntroducingBrokerCommissionRate != nil {
		return *x.IntroducingBrokerCommissionRate
	}
	return 0
}

func (x *ProtoIbCommissionSymbolCategory) GetPocketCommissionRate() int32 {
	if x != nil && x.PocketCommissionRate != nil {
		return *x.PocketCommissionRate
	}
	return 0
}

func (x *ProtoIbCommissionSymbolCategory) GetPocketMarkupRate() int32 {
	if x != nil && x.PocketMarkupRate != nil {
		return *x.PocketMarkupRate
	}
	return 0
}

func (x *ProtoIbCommissionSymbolCategory) GetIbCommissionsType() ProtoCommissionType {
	if x != nil && x.IbCommissionsType != nil {
		return *x.IbCommissionsType
	}
	return ProtoCommissionType_USD_PER_MILLION_USD
}

// Trade Notification Profile (notification of big volume trades)
type ProtoTradeNotificationProfile struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	TradeNotificationProfileId *int64                 `protobuf:"varint,1,req,name=tradeNotificationProfileId" json:"tradeNotificationProfileId,omitempty"` // Profile ID
	Name                       *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                              // Profile name
	Description                *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`                                // Profile description
	BookType                   *ProtoBookRequestType  `protobuf:"varint,4,req,name=bookType,enum=ProtoBookRequestType" json:"bookType,omitempty"`           // Book type for which Profile is applied
	NotifyAtCbroker            *bool                  `protobuf:"varint,5,req,name=notifyAtCbroker" json:"notifyAtCbroker,omitempty"`                       // If TRUE then notification is displayed in cBroker application
	NotifyAtEmail              *bool                  `protobuf:"varint,6,req,name=notifyAtEmail" json:"notifyAtEmail,omitempty"`                           // If TRUE then Manager is notified by email
	UsdVolumeCbroker           *int64                 `protobuf:"varint,7,req,name=usdVolumeCbroker" json:"usdVolumeCbroker,omitempty"`                     // Volume threshold for notification in cBroker
	UsdVolumeEmail             *int64                 `protobuf:"varint,8,req,name=usdVolumeEmail" json:"usdVolumeEmail,omitempty"`                         // Volume threshold for notification by email
	UtcLastUpdateTimestamp     *int64                 `protobuf:"varint,9,opt,name=utcLastUpdateTimestamp" json:"utcLastUpdateTimestamp,omitempty"`         // UNIX timestamp in milliseconds when the Profile was last updated
	Emails                     []string               `protobuf:"bytes,10,rep,name=emails" json:"emails,omitempty"`                                         // List of emails for email notification
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ProtoTradeNotificationProfile) Reset() {
	*x = ProtoTradeNotificationProfile{}
	mi := &file_CSModelMessages_External_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoTradeNotificationProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTradeNotificationProfile) ProtoMessage() {}

func (x *ProtoTradeNotificationProfile) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTradeNotificationProfile.ProtoReflect.Descriptor instead.
func (*ProtoTradeNotificationProfile) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{63}
}

func (x *ProtoTradeNotificationProfile) GetTradeNotificationProfileId() int64 {
	if x != nil && x.TradeNotificationProfileId != nil {
		return *x.TradeNotificationProfileId
	}
	return 0
}

func (x *ProtoTradeNotificationProfile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoTradeNotificationProfile) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProtoTradeNotificationProfile) GetBookType() ProtoBookRequestType {
	if x != nil && x.BookType != nil {
		return *x.BookType
	}
	return ProtoBookRequestType_ALL_BOOKS_REQUEST
}

func (x *ProtoTradeNotificationProfile) GetNotifyAtCbroker() bool {
	if x != nil && x.NotifyAtCbroker != nil {
		return *x.NotifyAtCbroker
	}
	return false
}

func (x *ProtoTradeNotificationProfile) GetNotifyAtEmail() bool {
	if x != nil && x.NotifyAtEmail != nil {
		return *x.NotifyAtEmail
	}
	return false
}

func (x *ProtoTradeNotificationProfile) GetUsdVolumeCbroker() int64 {
	if x != nil && x.UsdVolumeCbroker != nil {
		return *x.UsdVolumeCbroker
	}
	return 0
}

func (x *ProtoTradeNotificationProfile) GetUsdVolumeEmail() int64 {
	if x != nil && x.UsdVolumeEmail != nil {
		return *x.UsdVolumeEmail
	}
	return 0
}

func (x *ProtoTradeNotificationProfile) GetUtcLastUpdateTimestamp() int64 {
	if x != nil && x.UtcLastUpdateTimestamp != nil {
		return *x.UtcLastUpdateTimestamp
	}
	return 0
}

func (x *ProtoTradeNotificationProfile) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

// Trader entity (with limited number of fields)
type ProtoManagerLightTrader struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TraderId              *int64                 `protobuf:"varint,1,req,name=traderId" json:"traderId,omitempty"`                           // ID of the Trader
	Login                 *int64                 `protobuf:"varint,2,req,name=login" json:"login,omitempty"`                                 // Login of the Trader
	GroupId               *int64                 `protobuf:"varint,3,req,name=groupId" json:"groupId,omitempty"`                             // Group ID of the Trader
	DepositAssetId        *int64                 `protobuf:"varint,4,req,name=depositAssetId" json:"depositAssetId,omitempty"`               // ID of deposit Asset
	Name                  *string                `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`                                    // Trader name
	LastName              *string                `protobuf:"bytes,6,opt,name=lastName" json:"lastName,omitempty"`                            // Trader last name
	RegistrationTimestamp *int64                 `protobuf:"varint,7,req,name=registrationTimestamp" json:"registrationTimestamp,omitempty"` // UNIX timestamp in milliseconds of Trader registration
	SubAccountOf          *int64                 `protobuf:"varint,8,opt,name=subAccountOf" json:"subAccountOf,omitempty"`                   // Determines parent Account of Account, if it is Subaccount. Used for Copy service
	BrokerName            *string                `protobuf:"bytes,9,opt,name=brokerName" json:"brokerName,omitempty"`                        // Some whitelabel assigned to Trader by the Broker at the moment of Account creation
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ProtoManagerLightTrader) Reset() {
	*x = ProtoManagerLightTrader{}
	mi := &file_CSModelMessages_External_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtoManagerLightTrader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoManagerLightTrader) ProtoMessage() {}

func (x *ProtoManagerLightTrader) ProtoReflect() protoreflect.Message {
	mi := &file_CSModelMessages_External_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoManagerLightTrader.ProtoReflect.Descriptor instead.
func (*ProtoManagerLightTrader) Descriptor() ([]byte, []int) {
	return file_CSModelMessages_External_proto_rawDescGZIP(), []int{64}
}

func (x *ProtoManagerLightTrader) GetTraderId() int64 {
	if x != nil && x.TraderId != nil {
		return *x.TraderId
	}
	return 0
}

func (x *ProtoManagerLightTrader) GetLogin() int64 {
	if x != nil && x.Login != nil {
		return *x.Login
	}
	return 0
}

func (x *ProtoManagerLightTrader) GetGroupId() int64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *ProtoManagerLightTrader) GetDepositAssetId() int64 {
	if x != nil && x.DepositAssetId != nil {
		return *x.DepositAssetId
	}
	return 0
}

func (x *ProtoManagerLightTrader) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoManagerLightTrader) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *ProtoManagerLightTrader) GetRegistrationTimestamp() int64 {
	if x != nil && x.RegistrationTimestamp != nil {
		return *x.RegistrationTimestamp
	}
	return 0
}

func (x *ProtoManagerLightTrader) GetSubAccountOf() int64 {
	if x != nil && x.SubAccountOf != nil {
		return *x.SubAccountOf
	}
	return 0
}

func (x *ProtoManagerLightTrader) GetBrokerName() string {
	if x != nil && x.BrokerName != nil {
		return *x.BrokerName
	}
	return ""
}

var File_CSModelMessages_External_proto protoreflect.FileDescriptor

var file_CSModelMessages_External_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x43, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x62, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x62, 0x61, 0x72, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x3a, 0x02, 0x4d, 0x31, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x69, 0x67, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x69, 0x67, 0x68, 0x12, 0x34,
	0x0a, 0x15, 0x75, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x75,
	0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xfb, 0x03, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x56, 0x57, 0x41, 0x50, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x57, 0x41, 0x50, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x22, 0x9b, 0x07, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0e, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x77, 0x61,
	0x70, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x42, 0x4f, 0x4f, 0x4b, 0x5f,
	0x41, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1b, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x30, 0x0a,
	0x13, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x12, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x67, 0x75, 0x61,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4c,
	0x6f, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x73,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x3a, 0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x15, 0x73, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x6e, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x70, 0x6e, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xb5, 0x0d, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2d, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x33, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x42, 0x4f,
	0x4f, 0x4b, 0x5f, 0x41, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6c,
	0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x3a, 0x13, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f,
	0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61,
	0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e,
	0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x53, 0x74, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70,
	0x4c, 0x6f, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x49, 0x44, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x05, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x55, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c,
	0x6f, 0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x3a, 0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73,
	0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x6f, 0x63, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x63, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73,
	0x22, 0xd3, 0x09, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x01, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x6b,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74,
	0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x71, 0x75,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f,
	0x49, 0x62, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x16, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x49, 0x62,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x69, 0x6e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x69, 0x6e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x52, 0x6f, 0x69, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x71, 0x75,
	0x69, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x69, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61,
	0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x62, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6e,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6e, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12,
	0x55, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52,
	0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x44, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6e,
	0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6e, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x22, 0xc8, 0x06, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x2a, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x6b,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x05, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x55, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a,
	0x05, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x63, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x63, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xcd, 0x04, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x3d, 0x0a, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x10, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e,
	0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x45, 0x71,
	0x75, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x45,
	0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x45, 0x71, 0x75, 0x69,
	0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x45, 0x71, 0x75,
	0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x6e, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x73, 0x22, 0xde, 0x03, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12,
	0x3b, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x62, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x69, 0x62, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x62, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x07, 0x69, 0x62, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x14,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x22, 0x86, 0x18, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x06, 0x48, 0x45, 0x44, 0x47, 0x45, 0x44, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12,
	0x4f, 0x0a, 0x1f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x49, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x1f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69,
	0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x49, 0x73, 0x4e, 0x75, 0x6c, 0x6c,
	0x12, 0x3c, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x19, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48,
	0x0a, 0x1f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x26, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x40, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x18, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x62, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x11,
	0x69, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x69,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x62, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x62, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x29,
	0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x49, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x72, 0x61, 0x6e,
	0x6b, 0x49, 0x64, 0x49, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e,
	0x6b, 0x49, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x68, 0x61, 0x73, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x3a, 0x0b, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x65, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x77, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6e,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6e, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x6f, 0x49, 0x42, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x49, 0x42, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x60, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x18, 0x4b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f,
	0x66, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x4f, 0x50, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x4f, 0x50, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x69, 0x73, 0x6b, 0x12, 0x95, 0x01, 0x0a, 0x24, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x69, 0x73, 0x6b, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a, 0x15,
	0x41, 0x43, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x52, 0x41, 0x47, 0x45, 0x52, 0x24, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x69,
	0x73, 0x6b, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x18, 0x51,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x65, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x52, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x21, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x49, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x53,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x62, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x21, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x60, 0x0a, 0x1a, 0x69, 0x62, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x54, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x1a, 0x69, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xa9, 0x01, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x62, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x62, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x04,
	0x62, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x62, 0x69, 0x61,
	0x73, 0x22, 0x9e, 0x10, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x55, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62,
	0x69, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x55, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x4d,
	0x61, 0x72, 0x6b, 0x55, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x73, 0x6b,
	0x4d, 0x61, 0x72, 0x6b, 0x55, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x57, 0x0a, 0x17, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x77, 0x61, 0x70, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x33, 0x44, 0x61, 0x79, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x61,
	0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x3a, 0x06, 0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59, 0x52,
	0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x52, 0x6f, 0x6c, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x33, 0x44, 0x61, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x4c,
	0x6f, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77,
	0x61, 0x70, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x45, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x75,
	0x74, 0x6f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6c, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70,
	0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70,
	0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x53, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x47, 0x53, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x68, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x62, 0x73, 0x70, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x62, 0x73, 0x70, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x4d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x66, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x21,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x4f, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x77, 0x61, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x50, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x77, 0x61, 0x70, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74,
	0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xa4, 0x0b, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x3a, 0x0a, 0x18, 0x73, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x18, 0x73, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x6f,
	0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x09,
	0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x45, 0x0a, 0x11,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x17, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x17, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69,
	0x73, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x6b, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x6b, 0x12, 0x44, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x6d, 0x61, 0x78, 0x41, 0x75, 0x74,
	0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x75, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x72, 0x53, 0x74, 0x6f, 0x70,
	0x4f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x0c, 0x63, 0x6f, 0x70, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x63, 0x6f,
	0x70, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x0f, 0x73, 0x74,
	0x6f, 0x70, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x70,
	0x6f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x15, 0x63,
	0x6f, 0x70, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x15, 0x63, 0x6f, 0x70, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x73, 0x65,
	0x47, 0x53, 0x4c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x73, 0x65, 0x47, 0x53, 0x4c, 0x12, 0x30,
	0x0a, 0x13, 0x69, 0x73, 0x46, 0x61, 0x6b, 0x65, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x46,
	0x61, 0x6b, 0x65, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x3c, 0x0a, 0x19, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xba,
	0x03, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c,
	0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x73, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x67, 0x73, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72,
	0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x88, 0x05, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x77,
	0x61, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x68, 0x61, 0x73,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x44, 0x65, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x6b, 0x12, 0x44, 0x0a, 0x1d,
	0x6d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1d, 0x6d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x0c, 0x63, 0x6f, 0x70, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x70,
	0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x15, 0x63, 0x6f, 0x70,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x15, 0x63, 0x6f, 0x70, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x46, 0x61, 0x6b, 0x65,
	0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x46, 0x61, 0x6b, 0x65, 0x53, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x19, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x55, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd9, 0x03, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x61, 0x73, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x66, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x41, 0x32, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x32, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xfd, 0x01,
	0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x62, 0x75,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6c,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x56, 0x77,
	0x61, 0x70, 0x18, 0x06, 0x20, 0x02, 0x28, 0x01, 0x52, 0x07, 0x62, 0x75, 0x79, 0x56, 0x77, 0x61,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x56, 0x77, 0x61, 0x70, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x01, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x56, 0x77, 0x61, 0x70, 0x22, 0xbd, 0x02,
	0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x87, 0x02,
	0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x45, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x69, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x09, 0x62, 0x69, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x73, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x09, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x70, 0x49, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x49, 0x73, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x65,
	0x6e, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x22, 0x8c, 0x03, 0x0a,
	0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x15, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x4c,
	0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x4c, 0x6f, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x15, 0x64, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6e,
	0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x70, 0x4c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x70, 0x4c, 0x6f, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0xef, 0x0e, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06,
	0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e,
	0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x02, 0x28, 0x03, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36,
	0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x03, 0x52, 0x16,
	0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2d,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69,
	0x64, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x30, 0x0a,
	0x0a, 0x64, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x52,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x70, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x62, 0x61, 0x73, 0x65, 0x54,
	0x6f, 0x55, 0x73, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f,
	0x55, 0x73, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1b,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1b, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12, 0x32,
	0x0a, 0x14, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x79, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x75, 0x70, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x6e, 0x55, 0x73, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x55, 0x73, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x42, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x56, 0x57, 0x41, 0x50, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x57, 0x41, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x56, 0x57, 0x41, 0x50, 0x18, 0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x57, 0x41, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x75,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x75, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x47, 0x62, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x47,
	0x62, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69,
	0x74, 0x79, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x22, 0x8f, 0x08, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2e, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x12, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x69, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x64,
	0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x65, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x62, 0x61, 0x73,
	0x65, 0x54, 0x6f, 0x55, 0x73, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x62, 0x61, 0x73, 0x65,
	0x54, 0x6f, 0x55, 0x73, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x40, 0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6f, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x65, 0x61,
	0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x22, 0x87, 0x05, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x73, 0x77,
	0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x1c,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1b, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x13, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x13,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6e, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6e,
	0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x22, 0xc0,
	0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x22, 0x7d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x74, 0x73,
	0x22, 0xaf, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x23, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x70,
	0x4c, 0x6f, 0x73, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65,
	0x77, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x6e, 0x65, 0x77, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x53, 0x77, 0x61, 0x70, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64,
	0x53, 0x77, 0x61, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x77, 0x61, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x61, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x22,
	0xbf, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x07, 0x67, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x67, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xf7, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0d,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x08, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x44, 0x6f, 0x6d,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x44, 0x6f, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x71, 0x0a, 0x1f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61,
	0x78, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x41, 0x75, 0x74,
	0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xb0,
	0x01, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d,
	0x61, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x7a, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x22, 0x54, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x22, 0x9f, 0x07, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69,
	0x64, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x2a, 0x0a,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x6f,
	0x73, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x12, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c,
	0x6f, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x08, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x56, 0x57, 0x41, 0x50, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x56, 0x57, 0x41, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49,
	0x64, 0x18, 0x10, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x14, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x16, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x18, 0x19, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x49, 0x44, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x1c, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x86, 0x03, 0x0a, 0x10, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x01, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x49, 0x64, 0x22, 0x7e, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4c, 0x6f,
	0x67, 0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0a, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c,
	0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x65, 0x72, 0x52, 0x05, 0x74, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x4e, 0x0a, 0x18, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x22, 0x73, 0x0a, 0x10, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x47, 0x53, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x53, 0x4c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x65, 0x72, 0x52, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73, 0x22,
	0x54, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x53, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0x5a, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xf9, 0x02, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x22, 0x8a, 0x02,
	0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x85, 0x05, 0x0a, 0x16, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x13, 0x55, 0x53, 0x44,
	0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x44,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4f, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x52, 0x11,
	0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x14, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x65, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65,
	0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a,
	0x1b, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1b, 0x61, 0x76, 0x6f, 0x69, 0x64,
	0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x53,
	0x74, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32,
	0x0a, 0x14, 0x70, 0x6e, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x70, 0x6e,
	0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x22, 0x80, 0x03, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x65,
	0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x08,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x75,
	0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc6, 0x03, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x12, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x42, 0x6f, 0x6f, 0x6b,
	0x42, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x42, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x42, 0x6f, 0x6f, 0x6b, 0x42, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x6f, 0x6f, 0x6b, 0x42, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x3f, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x52, 0x0a, 0x12, 0x67, 0x73, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x53, 0x4c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x52, 0x12, 0x67, 0x73, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x55, 0x73, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x73, 0x64, 0x22, 0xf9,
	0x02, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x73, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x67, 0x73, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x67, 0x73, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x73, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x59, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x49, 0x6e, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x19, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x52, 0x0d, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x95, 0x03, 0x0a, 0x14, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x11,
	0x73, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x6f, 0x6c, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x12, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x52,
	0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x44,
	0x61, 0x79, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x14, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x51, 0x0a, 0x17, 0x72, 0x6f, 0x6c, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x33, 0x44, 0x61,
	0x79, 0x73, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x3a, 0x06, 0x4d, 0x4f, 0x4e, 0x44, 0x41,
	0x59, 0x52, 0x17, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x33, 0x44, 0x61, 0x79, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74,
	0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x92, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x68, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xba, 0x03, 0x0a, 0x1a,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x77, 0x61, 0x70, 0x52, 0x6f,
	0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x33, 0x44, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65,
	0x65, 0x6b, 0x3a, 0x06, 0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59, 0x52, 0x11, 0x73, 0x77, 0x61, 0x70,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x33, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x77, 0x61, 0x70, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x73, 0x77, 0x61, 0x70, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x77, 0x61,
	0x70, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x77,
	0x61, 0x70, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x13, 0x73, 0x77, 0x61, 0x70, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61, 0x70,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x04, 0x50, 0x49, 0x50, 0x53, 0x52, 0x13, 0x73, 0x77, 0x61, 0x70, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x6f, 0x6e, 0x67,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x77, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x77, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x77,
	0x61, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x77, 0x61, 0x70,
	0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x18, 0x73, 0x77, 0x61, 0x70,
	0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x74,
	0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x75, 0x74, 0x63, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6e,
	0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x94, 0x01, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x18,
	0x73, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x18,
	0x73, 0x77, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc2,
	0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x40, 0x0a,
	0x1b, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x42, 0x0a, 0x1c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x1c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x62, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x1f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69,
	0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x1f, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x14, 0x70, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x10, 0x70, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a,
	0x11, 0x69, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11,
	0x69, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xbc, 0x03, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x43, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x43,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x41, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0d, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x10,
	0x75, 0x73, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x75, 0x73, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0e, 0x75, 0x73, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x36, 0x0a, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x75, 0x74, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0xb7, 0x02, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0xa3, 0x44, 0x0a, 0x12, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x8a, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0xe2, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xe3,
	0x01, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe4, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0xe5, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xac,
	0x02, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xad, 0x02, 0x12, 0x1b,
	0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xae, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x10,
	0xaf, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xb0, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xb1,
	0x02, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xb2, 0x02, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xb3, 0x02, 0x12,
	0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0xb4, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xb5, 0x02, 0x12, 0x25, 0x0a, 0x20,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0xb6, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xb9, 0x02, 0x12,
	0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xba, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xc1, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53,
	0x5f, 0x52, 0x45, 0x53, 0x10, 0xc2, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xcf,
	0x02, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c,
	0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d,
	0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xd0, 0x02, 0x12, 0x29, 0x0a, 0x24,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x10, 0xd1, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xd2,
	0x02, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c,
	0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4d, 0x41,
	0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xd3, 0x02, 0x12, 0x2b, 0x0a, 0x26, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xdb, 0x02, 0x12, 0x2b, 0x0a, 0x26, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x59,
	0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0xdc, 0x02, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe3, 0x02, 0x12, 0x27,
	0x0a, 0x22, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x53, 0x10, 0xe4, 0x02, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe8, 0x02, 0x12, 0x24, 0x0a,
	0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0xe9, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xea, 0x02, 0x12, 0x24,
	0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x10, 0xeb, 0x02, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xec, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10,
	0xed, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xee, 0x02, 0x12, 0x2b, 0x0a, 0x26, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x10, 0xef, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xf0, 0x02, 0x12,
	0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x10, 0xf1, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xf7, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xf8, 0x02, 0x12,
	0x27, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xf9, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xfa, 0x02, 0x12, 0x22, 0x0a, 0x1d,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xfb, 0x02,
	0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0xfc, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xfd, 0x02, 0x12, 0x2a,
	0x0a, 0x25, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xfe, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xff,
	0x02, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x80, 0x03, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x81, 0x03,
	0x12, 0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x82, 0x03, 0x12, 0x2b, 0x0a, 0x26, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x83, 0x03, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x84, 0x03, 0x12, 0x26, 0x0a,
	0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0x85, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43,
	0x52, 0x55, 0x44, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x86, 0x03, 0x12, 0x25, 0x0a, 0x20,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f,
	0x46, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0x87, 0x03, 0x12, 0x2a, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x57, 0x41,
	0x50, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x88, 0x03, 0x12,
	0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0x89, 0x03, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x53, 0x57, 0x41, 0x50, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x8a, 0x03, 0x12, 0x1b, 0x0a,
	0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x48, 0x4f, 0x4c, 0x49,
	0x44, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x8b, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x10, 0x8c, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x8d, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0x8e, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0x8f, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55,
	0x44, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x90, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x91, 0x03, 0x12, 0x28, 0x0a,
	0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x10, 0x92, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0x93, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x94, 0x03, 0x12,
	0x1c, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x97, 0x03, 0x12, 0x1c, 0x0a,
	0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x98, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x99, 0x03, 0x12, 0x21,
	0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x9a,
	0x03, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x9b, 0x03, 0x12, 0x1b,
	0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x9c, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x48, 0x49, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xa1, 0x03,
	0x12, 0x23, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0xa2, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x45,
	0x58, 0x50, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xa3, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xa4, 0x03, 0x12,
	0x1e, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xa7, 0x03, 0x12,
	0x1e, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xa8, 0x03, 0x12,
	0x20, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xab,
	0x03, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0xac, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x51,
	0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0xad, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xae, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x41,
	0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xaf, 0x03, 0x12, 0x20, 0x0a,
	0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x44,
	0x45, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xb0, 0x03, 0x12,
	0x1b, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xb3, 0x03, 0x12, 0x1b, 0x0a, 0x16,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xb4, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xb5, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xb6, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xbb, 0x03, 0x12, 0x21,
	0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xbc,
	0x03, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44,
	0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0xbf, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xc0, 0x03, 0x12, 0x2f, 0x0a, 0x2a, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x41,
	0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xcb, 0x03, 0x12, 0x2f, 0x0a, 0x2a,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xcc, 0x03, 0x12, 0x31, 0x0a,
	0x2c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xcd, 0x03,
	0x12, 0x31, 0x0a, 0x2c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x52, 0x5f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x59,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0xce, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xcf, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xd0, 0x03, 0x12, 0x19, 0x0a,
	0x14, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xd1, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0xd2, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0xd3, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xd4, 0x03, 0x12, 0x24, 0x0a, 0x1f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xd5,
	0x03, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d,
	0x49, 0x43, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x10, 0xd6, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x47, 0x53, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xd7, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x47, 0x53, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xd8, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xd9, 0x03, 0x12, 0x1f, 0x0a, 0x1a,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xda, 0x03, 0x12, 0x1a, 0x0a,
	0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xdb, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0xdc, 0x03, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c,
	0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe9, 0x03,
	0x12, 0x29, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44,
	0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xea, 0x03, 0x12, 0x33, 0x0a, 0x2e, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xed, 0x03,
	0x12, 0x33, 0x0a, 0x2e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x53, 0x57, 0x41, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0xee, 0x03, 0x12, 0x2e, 0x0a, 0x29, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53,
	0x57, 0x41, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x51, 0x10, 0xef, 0x03, 0x12, 0x2e, 0x0a, 0x29, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53,
	0x57, 0x41, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0xf0, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43,
	0x52, 0x55, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xf5,
	0x03, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xf6, 0x03, 0x12, 0x1f, 0x0a,
	0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xf7, 0x03, 0x12, 0x19,
	0x0a, 0x14, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xf8, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45,
	0x53, 0x10, 0xf9, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x10, 0xfa, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52,
	0x55, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xfb, 0x03,
	0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xfc, 0x03, 0x12, 0x1b, 0x0a, 0x16,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xfe, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x10, 0xff, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x80, 0x04, 0x12, 0x2d, 0x0a, 0x28, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0x81, 0x04, 0x12, 0x2d, 0x0a, 0x28, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44,
	0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x10, 0x82, 0x04, 0x12, 0x32, 0x0a, 0x2d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x53, 0x57, 0x41, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x83, 0x04, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x84,
	0x04, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x85, 0x04, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10,
	0x86, 0x04, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x87,
	0x04, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x88, 0x04,
	0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x10, 0x8f, 0x04, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x90, 0x04, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x91, 0x04, 0x12, 0x22, 0x0a, 0x1d,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x92, 0x04,
	0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x10, 0x93, 0x04, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x94, 0x04, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x95, 0x04, 0x12,
	0x19, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x41, 0x53,
	0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x9a, 0x04, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0x9b, 0x04, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41,
	0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x9c, 0x04, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43,
	0x52, 0x55, 0x44, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45,
	0x45, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xa1, 0x04,
	0x12, 0x29, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x4c,
	0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xa2, 0x04, 0x12, 0x2e, 0x0a, 0x29, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x45, 0x45, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xa3, 0x04, 0x12, 0x27, 0x0a, 0x22, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x10, 0xae, 0x04, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52,
	0x55, 0x44, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xaf, 0x04, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xb0, 0x04,
	0x12, 0x29, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49,
	0x43, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xb1, 0x04, 0x12, 0x27, 0x0a, 0x22, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x10, 0xb2, 0x04, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52,
	0x55, 0x44, 0x5f, 0x47, 0x53, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0xb3, 0x04, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x43, 0x52, 0x55, 0x44, 0x5f, 0x47, 0x53, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xb4, 0x04, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x47, 0x53, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xb5, 0x04, 0x12,
	0x1c, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xbb, 0x04, 0x12, 0x1c, 0x0a,
	0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xbc, 0x04, 0x12, 0x20, 0x0a, 0x1b, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x41, 0x52, 0x43, 0x48,
	0x49, 0x56, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xbf, 0x04, 0x12, 0x20, 0x0a,
	0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xc4, 0x04, 0x12,
	0x2e, 0x0a, 0x29, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xc5, 0x04, 0x12,
	0x2e, 0x0a, 0x29, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xc6, 0x04, 0x12,
	0x38, 0x0a, 0x33, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xc7, 0x04, 0x12, 0x33, 0x0a, 0x2e, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xc8, 0x04, 0x12, 0x33,
	0x0a, 0x2e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0xc9, 0x04, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54,
	0x45, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xd9, 0x04, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x53, 0x50, 0x4f,
	0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xda, 0x04, 0x12,
	0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x42, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x53,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0xe0, 0x04, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x53, 0x50, 0x4f,
	0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xe1, 0x04, 0x12,
	0x1b, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f,
	0x42, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xbf, 0x05, 0x12, 0x1b, 0x0a, 0x16,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xc0, 0x05, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x44,
	0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xc5, 0x05, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xc7, 0x05, 0x12, 0x1f, 0x0a, 0x1a, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xcd, 0x05, 0x12, 0x1f, 0x0a, 0x1a,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xce, 0x05, 0x12, 0x2b, 0x0a,
	0x26, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xd0, 0x05, 0x12, 0x2b, 0x0a, 0x26, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x10, 0xd1, 0x05, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x10, 0xda, 0x05, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x10, 0xdb, 0x05, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe2, 0x05, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe3, 0x05, 0x12, 0x23, 0x0a, 0x1e,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe4,
	0x05, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe5, 0x05, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe6, 0x05, 0x12,
	0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x10, 0xf2, 0x05, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f,
	0x4c, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xf3, 0x05, 0x12, 0x23, 0x0a, 0x1e, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x8c, 0x06,
	0x12, 0x23, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0x8d, 0x06, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x42,
	0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x92, 0x06, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x93, 0x06, 0x12, 0x1f, 0x0a, 0x1a, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xb0, 0x06, 0x12, 0x1f, 0x0a, 0x1a,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xb1, 0x06, 0x12, 0x26, 0x0a,
	0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x52,
	0x45, 0x51, 0x10, 0xb2, 0x06, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xb3, 0x06, 0x12, 0x20, 0x0a,
	0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xb4, 0x06, 0x12,
	0x1f, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xb5, 0x06,
	0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xb6,
	0x06, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0xb7, 0x06, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0xb8, 0x06, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d,
	0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xb9, 0x06, 0x12, 0x22, 0x0a, 0x1d, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c,
	0x5f, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xba, 0x06, 0x12,
	0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0xbb, 0x06, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x49, 0x4d,
	0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xbc, 0x06, 0x12, 0x20, 0x0a, 0x1b, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xbd, 0x06, 0x12, 0x20, 0x0a,
	0x1b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xbe, 0x06, 0x12,
	0x21, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10,
	0xbf, 0x06, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0xc0, 0x06, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xc1, 0x06, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xc2, 0x06, 0x12, 0x26, 0x0a,
	0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0xc3, 0x06, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44,
	0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0xc4, 0x06, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xc5, 0x06, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xc6, 0x06, 0x12, 0x24, 0x0a,
	0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x4d,
	0x45, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0xc7, 0x06, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x41,
	0x4c, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xc8, 0x06, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x10, 0xcb, 0x06, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x53,
	0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xce, 0x06, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xcf, 0x06,
	0x12, 0x28, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xd0, 0x06, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x10, 0xd1, 0x06, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe0, 0x06, 0x12, 0x25, 0x0a, 0x20, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x53, 0x5f, 0x46, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x10,
	0xe1, 0x06, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0xe6, 0x06, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xe7, 0x06, 0x12, 0x33, 0x0a, 0x2e, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x5a,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xf3, 0x06,
	0x12, 0x33, 0x0a, 0x2e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0xf4, 0x06, 0x12, 0x3d, 0x0a, 0x38, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43,
	0x52, 0x55, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x10, 0xf5, 0x06, 0x12, 0x38, 0x0a, 0x33, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52,
	0x55, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0xf6, 0x06, 0x12, 0x38,
	0x0a, 0x33, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x55, 0x44, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x49, 0x5a, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0xf7, 0x06, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x5f, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0xde, 0x07,
	0x2a, 0xc2, 0x0e, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x53, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f,
	0x55, 0x47, 0x48, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x53,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x44,
	0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f,
	0x51, 0x55, 0x4f, 0x54, 0x45, 0x53, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x17,
	0x0a, 0x13, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x0a, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x0d, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4c, 0x4f, 0x47,
	0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x4f, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x10,
	0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x42, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x53, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x13, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52,
	0x41, 0x47, 0x45, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x42, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x16, 0x12, 0x1e,
	0x0a, 0x1a, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x17, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x19, 0x12, 0x1f,
	0x0a, 0x1b, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x1a, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x1b, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x4c, 0x49, 0x51, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x10, 0x1d, 0x12,
	0x1d, 0x0a, 0x19, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x1e, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x1f, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x53, 0x10, 0x20, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54,
	0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x10, 0x21, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x49, 0x45, 0x53, 0x10,
	0x23, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x41, 0x4c, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x25, 0x12, 0x1e, 0x0a, 0x1a, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x26, 0x12, 0x1a, 0x0a, 0x16, 0x4e,
	0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x42,
	0x52, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0x27, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x54, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x59,
	0x43, 0x4c, 0x45, 0x10, 0x28, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x54, 0x4f, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10,
	0x29, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x41,
	0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x2a, 0x12, 0x1c, 0x0a, 0x18,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x2b, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x2c, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x2d, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x44, 0x5f,
	0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x2e, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x2f, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x10, 0x30,
	0x12, 0x1a, 0x0a, 0x16, 0x47, 0x55, 0x49, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x31, 0x12, 0x25, 0x0a, 0x21,
	0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x10, 0x32, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x33, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x34, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x10, 0x35, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x58, 0x5f, 0x45, 0x58, 0x50, 0x4f,
	0x53, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x36, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x37, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x38, 0x12, 0x1b, 0x0a, 0x17, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x5f, 0x54, 0x4f,
	0x5f, 0x53, 0x50, 0x4f, 0x54, 0x53, 0x10, 0x39, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x49, 0x4c,
	0x59, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x3a, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x3b, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x3c, 0x12, 0x12, 0x0a, 0x0e, 0x48,
	0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x3d, 0x12,
	0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x3e, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x3f, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x42, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x53, 0x10, 0x40,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x51, 0x41, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x41, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x51, 0x41, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x42, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x43, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x4f, 0x52, 0x53, 0x45, 0x5f, 0x47, 0x53, 0x4c, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x44, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x48, 0x4f, 0x4c, 0x49,
	0x44, 0x41, 0x59, 0x10, 0x45, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x5f, 0x33, 0x10, 0x46, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x5f, 0x34, 0x10, 0x47, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x5f, 0x35, 0x10, 0x48, 0x2a, 0xe5, 0x09, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x54,
	0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x54, 0x5f, 0x4f, 0x4b, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x54, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x45, 0x54, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x54, 0x5f, 0x4f, 0x4c, 0x44, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x54, 0x5f, 0x4e, 0x4f,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x53, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x45, 0x54, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x4b, 0x45, 0x59, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x54, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0b,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x54, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x40, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x41, 0x12, 0x1a, 0x0a, 0x16, 0x52,
	0x45, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x42, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x45, 0x54, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x80, 0x01, 0x12,
	0x19, 0x0a, 0x14, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x44,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x53, 0x10, 0x81, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x52, 0x45,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x53, 0x10, 0x82, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x83, 0x01, 0x12,
	0x1c, 0x0a, 0x17, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x84, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x85, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x86, 0x01, 0x12, 0x1c,
	0x0a, 0x17, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x87, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52,
	0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x88, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x45, 0x54, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x10, 0x89, 0x01,
	0x12, 0x1b, 0x0a, 0x16, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x8a, 0x01, 0x12, 0x18, 0x0a,
	0x13, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x8b, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x52, 0x45, 0x54, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45,
	0x51, 0x10, 0x8c, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x8d, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x8e, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x8f,
	0x01, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x90, 0x01, 0x12,
	0x1b, 0x0a, 0x16, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x58, 0x54, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x91, 0x01, 0x12, 0x20, 0x0a, 0x1b,
	0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x92, 0x01, 0x12, 0x1e,
	0x0a, 0x19, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x10, 0x93, 0x01, 0x12, 0x1f,
	0x0a, 0x1a, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x44, 0x47,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x45, 0x44, 0x10, 0x94, 0x01, 0x12,
	0x23, 0x0a, 0x1e, 0x52, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45,
	0x44, 0x10, 0x95, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x96, 0x01,
	0x12, 0x29, 0x0a, 0x24, 0x52, 0x45, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x97, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x52,
	0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45,
	0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x53, 0x10, 0x98, 0x01, 0x12, 0x1f, 0x0a,
	0x1a, 0x52, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x54,
	0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x99, 0x01, 0x12, 0x1b,
	0x0a, 0x16, 0x52, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x9a, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x52,
	0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45,
	0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x53, 0x10, 0x9b, 0x01, 0x12, 0x13,
	0x0a, 0x0e, 0x52, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x31,
	0x10, 0x9c, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x52, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x44, 0x5f, 0x32, 0x10, 0x9d, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x52, 0x45, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x33, 0x10, 0x9e, 0x01, 0x2a, 0xc3, 0x02,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x54, 0x41, 0x4b,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54,
	0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x54, 0x41,
	0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x43, 0x4f,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x43, 0x4f, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x10, 0x09, 0x2a, 0x73, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x2a, 0xb5, 0x0c, 0x0a, 0x16, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44,
	0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x49, 0x42, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x29, 0x0a,
	0x25, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x5f, 0x49, 0x42, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x34, 0x0a, 0x30, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x49, 0x42, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45,
	0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x49, 0x42, 0x10, 0x07, 0x12, 0x34,
	0x0a, 0x30, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x5f, 0x49, 0x42, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x42, 0x52, 0x4f, 0x4b,
	0x45, 0x52, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x54, 0x45, 0x10, 0x09,
	0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x44, 0x52, 0x41, 0x57, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x2d, 0x0a,
	0x29, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x2e, 0x0a, 0x2a,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x27, 0x0a, 0x23,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57,
	0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x33, 0x0a, 0x2f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x49, 0x42, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x4f, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x44, 0x49,
	0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x44, 0x49,
	0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x47, 0x53,
	0x4c, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x52,
	0x4f, 0x4c, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x12, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x4e,
	0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x4f, 0x4e,
	0x55, 0x53, 0x10, 0x13, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x4e, 0x4f, 0x4e, 0x57, 0x49, 0x54, 0x48,
	0x44, 0x52, 0x41, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x14,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x53,
	0x57, 0x41, 0x50, 0x10, 0x16, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59,
	0x10, 0x17, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x10, 0x18, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x19, 0x12, 0x20,
	0x0a, 0x1c, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52,
	0x41, 0x57, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x10, 0x1a,
	0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46,
	0x45, 0x45, 0x10, 0x1b, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x1c, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x50, 0x45, 0x52,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x1d, 0x12, 0x23,
	0x0a, 0x1f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52,
	0x41, 0x57, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x1e, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44,
	0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x1f, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f,
	0x53, 0x55, 0x42, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x20, 0x12, 0x23, 0x0a, 0x1f,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f,
	0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x55, 0x42, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x21, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x22,
	0x12, 0x23, 0x0a, 0x1f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x44, 0x52, 0x41, 0x57, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x45, 0x45, 0x10, 0x23, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x10, 0x24, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x10, 0x25, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x45, 0x44, 0x5f,
	0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x26, 0x12, 0x2f, 0x0a, 0x2b, 0x42, 0x41, 0x4c, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x27, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x31, 0x10, 0x28,
	0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x5f, 0x32, 0x10, 0x29, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x33, 0x10, 0x2a,
	0x2a, 0x3d, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4f, 0x4e, 0x55,
	0x53, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x42,
	0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x01, 0x2a,
	0x83, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x23, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x6e, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x06, 0x2a, 0x7b, 0x0a, 0x10, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4d, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4c,
	0x4c, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x4f, 0x4e,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x05, 0x2a, 0xb2, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x59, 0x0a, 0x17,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x04, 0x2a, 0x3e, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x48,
	0x45, 0x44, 0x47, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x54, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x42, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x3c, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41,
	0x58, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x4e, 0x45, 0x54, 0x10, 0x02, 0x2a, 0x52, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x55,
	0x4c, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x4f, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x03, 0x2a, 0x86, 0x01, 0x0a, 0x17, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x47, 0x53, 0x4c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x44,
	0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x41, 0x5f, 0x42, 0x4f, 0x4f, 0x4b,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x46, 0x4f,
	0x52, 0x43, 0x45, 0x5f, 0x42, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x4b,
	0x10, 0x03, 0x2a, 0x4f, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f,
	0x4f, 0x4b, 0x5f, 0x41, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f,
	0x42, 0x10, 0x02, 0x2a, 0x6f, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53,
	0x44, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53,
	0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4c,
	0x4f, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41,
	0x47, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x43, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x4c,
	0x4f, 0x54, 0x10, 0x04, 0x2a, 0x83, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x2a, 0x34, 0x0a, 0x18, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x53, 0x77, 0x61, 0x70, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x49, 0x50, 0x53, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x01,
	0x2a, 0x76, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65,
	0x65, 0x6b, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x55, 0x45, 0x53,
	0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x44, 0x4e, 0x45, 0x53, 0x44,
	0x41, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44, 0x41, 0x59,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x49, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x41, 0x54, 0x55, 0x52, 0x44, 0x41, 0x59, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x55, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x07, 0x2a, 0x3a, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x02, 0x2a, 0x27, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x6f,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x42, 0x10, 0x02, 0x2a, 0x55, 0x0a,
	0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x4c, 0x5f, 0x42, 0x4f, 0x4f,
	0x4b, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x42, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x03, 0x2a, 0x5b, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10,
	0x02, 0x2a, 0x61, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x75, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49,
	0x46, 0x46, 0x10, 0x05, 0x2a, 0xc6, 0x04, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x42, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x45, 0x47, 0x59, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x54, 0x48,
	0x52, 0x4f, 0x54, 0x54, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x54, 0x48, 0x52,
	0x4f, 0x54, 0x54, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x49, 0x46, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0c, 0x12,
	0x22, 0x0a, 0x1e, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x4c, 0x49, 0x46,
	0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x56, 0x45, 0x52, 0x59, 0x4f, 0x4e, 0x45, 0x5f,
	0x49, 0x53, 0x5f, 0x49, 0x42, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x57, 0x41, 0x59,
	0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x50, 0x5f, 0x54, 0x4f,
	0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x58,
	0x5f, 0x47, 0x41, 0x50, 0x5f, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x11,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4f, 0x44,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x13, 0x12, 0x1d,
	0x0a, 0x19, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x43, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x15, 0x12, 0x23, 0x0a,
	0x1f, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x5f, 0x42, 0x4f,
	0x4f, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x10, 0x16, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x5f, 0x42, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x10, 0x17, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x42, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x42, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10,
	0x19, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x1a, 0x12, 0x1e, 0x0a,
	0x1a, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1b, 0x2a, 0xd2, 0x0f,
	0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x49, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1f, 0x0a,
	0x1b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x06, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x41, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x53, 0x48,
	0x49, 0x45, 0x52, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x16,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x17, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x49, 0x53, 0x4f,
	0x52, 0x10, 0x18, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x52, 0x53, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x10,
	0x19, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x20, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x45, 0x44, 0x49,
	0x54, 0x10, 0x29, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x32, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x45, 0x44, 0x49,
	0x54, 0x10, 0x33, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x10, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x66, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x48, 0x49, 0x53,
	0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x42, 0x41, 0x52, 0x10, 0x67, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x68, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x69, 0x12, 0x14,
	0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x10, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x6f, 0x12, 0x15, 0x0a, 0x11,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x78, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4a, 0x4f, 0x55, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x79, 0x12, 0x14, 0x0a, 0x0f,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10,
	0x82, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x83, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x10, 0x8c, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x8d, 0x01, 0x12, 0x1e,
	0x0a, 0x19, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x96, 0x01, 0x12, 0x20,
	0x0a, 0x1b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x97, 0x01,
	0x12, 0x18, 0x0a, 0x13, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49,
	0x54, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xa0, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x44, 0x49,
	0x54, 0x10, 0xa1, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x50,
	0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xaa, 0x01, 0x12, 0x1a, 0x0a,
	0x15, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xb4, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x44,
	0x49, 0x54, 0x10, 0xb5, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x42,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xbe, 0x01,
	0x12, 0x1a, 0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x42, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xbf, 0x01, 0x12, 0x1b, 0x0a, 0x16,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0xc2, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0xc3, 0x01, 0x12, 0x1d,
	0x0a, 0x18, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x50, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xc4, 0x01, 0x12, 0x1b, 0x0a,
	0x16, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0xc5, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xc6, 0x01, 0x12, 0x11, 0x0a, 0x0c,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0xc7, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x42,
	0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xc9, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10,
	0xca, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0xcb, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xcc, 0x01, 0x12, 0x13,
	0x0a, 0x0e, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x45, 0x44, 0x49, 0x54,
	0x10, 0xcd, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x10, 0xce, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0xcf, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x4b, 0x59, 0x43, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xd0, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4b, 0x59, 0x43, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0xd1,
	0x01, 0x12, 0x1e, 0x0a, 0x19, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xd2,
	0x01, 0x12, 0x1e, 0x0a, 0x19, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0xd3,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45,
	0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xd4, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xd5, 0x01, 0x12,
	0x17, 0x0a, 0x12, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xd6, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xd7, 0x01, 0x12, 0x12,
	0x0a, 0x0d, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x43, 0x48, 0x41, 0x54, 0x10,
	0xd8, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x54, 0x49, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xd9, 0x01,
	0x12, 0x17, 0x0a, 0x12, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x53, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0xda, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x4e, 0x44,
	0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xdb, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f,
	0x42, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0xdc, 0x01, 0x2a, 0xf9, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x57,
	0x41, 0x50, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x4c,
	0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x0c, 0x2a, 0x7e,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x58, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x4c,
	0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x44,
	0x49, 0x43, 0x45, 0x53, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x10, 0x06, 0x2a, 0x71,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x10,
	0x07, 0x2a, 0x30, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x41,
	0x4c, 0x10, 0x02, 0x2a, 0x22, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49, 0x44, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x2a, 0xa8, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x5f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x4f,
	0x4c, 0x55, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x47, 0x41, 0x50, 0x5f, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03,
	0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x44, 0x4f, 0x4d,
	0x10, 0x04, 0x2a, 0x48, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x7f, 0x0a, 0x29,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x52, 0x69, 0x73, 0x6b,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43,
	0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41,
	0x47, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x53, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43,
	0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x53, 0x4c, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x02, 0x2a, 0x3d, 0x0a,
	0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x26, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x49, 0x42, 0x10, 0x01, 0x2a, 0x46, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x4f, 0x4f, 0x4b, 0x41, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4f, 0x4f, 0x4b, 0x42,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4f, 0x4f, 0x4b, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x8a, 0x01, 0x0a,
	0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x62, 0x61, 0x72, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x31, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02,
	0x4d, 0x32, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x33, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02,
	0x4d, 0x34, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x35, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x31, 0x30, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x31, 0x35, 0x10, 0x07, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x33, 0x30, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x31, 0x10, 0x09, 0x12,
	0x06, 0x0a, 0x02, 0x48, 0x34, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x31, 0x32, 0x10, 0x0b,
	0x12, 0x06, 0x0a, 0x02, 0x44, 0x31, 0x10, 0x0c, 0x12, 0x06, 0x0a, 0x02, 0x57, 0x31, 0x10, 0x0d,
	0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4e, 0x31, 0x10, 0x0e, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6c, 0x2f, 0x63, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
})

var (
	file_CSModelMessages_External_proto_rawDescOnce sync.Once
	file_CSModelMessages_External_proto_rawDescData []byte
)

func file_CSModelMessages_External_proto_rawDescGZIP() []byte {
	file_CSModelMessages_External_proto_rawDescOnce.Do(func() {
		file_CSModelMessages_External_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_CSModelMessages_External_proto_rawDesc), len(file_CSModelMessages_External_proto_rawDesc)))
	})
	return file_CSModelMessages_External_proto_rawDescData
}

var file_CSModelMessages_External_proto_enumTypes = make([]protoimpl.EnumInfo, 41)
var file_CSModelMessages_External_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_CSModelMessages_External_proto_goTypes = []any{
	(ProtoCSPayloadType)(0),                        // 0: ProtoCSPayloadType
	(ProtoCSErrorCode)(0),                          // 1: ProtoCSErrorCode
	(ProtoResultCode)(0),                           // 2: ProtoResultCode
	(ProtoActionType)(0),                           // 3: ProtoActionType
	(ProtoActionStatus)(0),                         // 4: ProtoActionStatus
	(ProtoChangeBalanceType)(0),                    // 5: ProtoChangeBalanceType
	(ProtoChangeBonusType)(0),                      // 6: ProtoChangeBonusType
	(ProtoPositionStatus)(0),                       // 7: ProtoPositionStatus
	(ProtoTradeSide)(0),                            // 8: ProtoTradeSide
	(ProtoOrderType)(0),                            // 9: ProtoOrderType
	(ProtoTimeInForce)(0),                          // 10: ProtoTimeInForce
	(ProtoOrderStatus)(0),                          // 11: ProtoOrderStatus
	(ProtoOrderTriggerMethod)(0),                   // 12: ProtoOrderTriggerMethod
	(ProtoAccountType)(0),                          // 13: ProtoAccountType
	(ProtoTotalMarginCalculationType)(0),           // 14: ProtoTotalMarginCalculationType
	(ProtoAccessRights)(0),                         // 15: ProtoAccessRights
	(ProtoGSLExecutionPolicy)(0),                   // 16: ProtoGSLExecutionPolicy
	(ProtoSymbolBookType)(0),                       // 17: ProtoSymbolBookType
	(ProtoCommissionType)(0),                       // 18: ProtoCommissionType
	(ProtoTradingMode)(0),                          // 19: ProtoTradingMode
	(ProtoSwapCalculationType)(0),                  // 20: ProtoSwapCalculationType
	(ProtoDayOfWeek)(0),                            // 21: ProtoDayOfWeek
	(ProtoMinCommissionType)(0),                    // 22: ProtoMinCommissionType
	(ProtoBookType)(0),                             // 23: ProtoBookType
	(ProtoBookRequestType)(0),                      // 24: ProtoBookRequestType
	(ProtoSymbolDistanceType)(0),                   // 25: ProtoSymbolDistanceType
	(ProtoCrudOperation)(0),                        // 26: ProtoCrudOperation
	(ProtoServerSettingType)(0),                    // 27: ProtoServerSettingType
	(ProtoManagerPermission)(0),                    // 28: ProtoManagerPermission
	(ProtoExecutionType)(0),                        // 29: ProtoExecutionType
	(ProtoAssetType)(0),                            // 30: ProtoAssetType
	(ProtoDealStatus)(0),                           // 31: ProtoDealStatus
	(ProtoDealType)(0),                             // 32: ProtoDealType
	(ProtoQuoteType)(0),                            // 33: ProtoQuoteType
	(ProtoManualDealReason)(0),                     // 34: ProtoManualDealReason
	(ProtoRequestStatus)(0),                        // 35: ProtoRequestStatus
	(ProtoLimitedRiskMarginCalculationStrategy)(0), // 36: ProtoLimitedRiskMarginCalculationStrategy
	(ProtoManualDealTimeoutAction)(0),              // 37: ProtoManualDealTimeoutAction
	(ProtoBonusOwner)(0),                           // 38: ProtoBonusOwner
	(ProtoExecutionPolicy)(0),                      // 39: ProtoExecutionPolicy
	(ProtoTrendbarPeriod)(0),                       // 40: ProtoTrendbarPeriod
	(*ProtoTrendbar)(nil),                          // 41: ProtoTrendbar
	(*ProtoTradeData)(nil),                         // 42: ProtoTradeData
	(*ProtoPosition)(nil),                          // 43: ProtoPosition
	(*ProtoOrder)(nil),                             // 44: ProtoOrder
	(*ProtoClosePositionDetail)(nil),               // 45: ProtoClosePositionDetail
	(*ProtoOrderAction)(nil),                       // 46: ProtoOrderAction
	(*ProtoDepositWithdraw)(nil),                   // 47: ProtoDepositWithdraw
	(*ProtoBonusDepositWithdraw)(nil),              // 48: ProtoBonusDepositWithdraw
	(*ProtoTrader)(nil),                            // 49: ProtoTrader
	(*ProtoTraderRank)(nil),                        // 50: ProtoTraderRank
	(*ProtoMinimumSpreadConstraint)(nil),           // 51: ProtoMinimumSpreadConstraint
	(*ProtoManagerSymbol)(nil),                     // 52: ProtoManagerSymbol
	(*ProtoArchivedSymbol)(nil),                    // 53: ProtoArchivedSymbol
	(*ProtoLocalization)(nil),                      // 54: ProtoLocalization
	(*ProtoGroup)(nil),                             // 55: ProtoGroup
	(*ProtoGroupSymbol)(nil),                       // 56: ProtoGroupSymbol
	(*ProtoLightGroup)(nil),                        // 57: ProtoLightGroup
	(*ProtoDynamicCommission)(nil),                 // 58: ProtoDynamicCommission
	(*ProtoServerSetting)(nil),                     // 59: ProtoServerSetting
	(*ProtoManager)(nil),                           // 60: ProtoManager
	(*ProtoCountry)(nil),                           // 61: ProtoCountry
	(*ProtoExposureSymbolRecord)(nil),              // 62: ProtoExposureSymbolRecord
	(*ProtoAsset)(nil),                             // 63: ProtoAsset
	(*ProtoPriceStream)(nil),                       // 64: ProtoPriceStream
	(*ProtoPriceStreamSymbol)(nil),                 // 65: ProtoPriceStreamSymbol
	(*ProtoInterval)(nil),                          // 66: ProtoInterval
	(*ProtoLiquidityFeedSymbol)(nil),               // 67: ProtoLiquidityFeedSymbol
	(*ProtoLiquidityFeed)(nil),                     // 68: ProtoLiquidityFeed
	(*ProtoDeal)(nil),                              // 69: ProtoDeal
	(*ProtoLightClosingDeal)(nil),                  // 70: ProtoLightClosingDeal
	(*ProtoLightClosePositionDetail)(nil),          // 71: ProtoLightClosePositionDetail
	(*ProtoLightOffsetDeal)(nil),                   // 72: ProtoLightOffsetDeal
	(*ProtoAssetClass)(nil),                        // 73: ProtoAssetClass
	(*ProtoDealOffset)(nil),                        // 74: ProtoDealOffset
	(*ProtoStopLossTakeProfitChangeRecord)(nil),    // 75: ProtoStopLossTakeProfitChangeRecord
	(*ProtoSwapCalculationRecord)(nil),             // 76: ProtoSwapCalculationRecord
	(*ProtoTraderSessionInfo)(nil),                 // 77: ProtoTraderSessionInfo
	(*ProtoSymbolCategory)(nil),                    // 78: ProtoSymbolCategory
	(*ProtoMaxAutoExecutionSizeSymbol)(nil),        // 79: ProtoMaxAutoExecutionSizeSymbol
	(*ProtoMaxAutoExecutionSizeProfile)(nil),       // 80: ProtoMaxAutoExecutionSizeProfile
	(*ProtoDealingSymbol)(nil),                     // 81: ProtoDealingSymbol
	(*ProtoManualDeal)(nil),                        // 82: ProtoManualDeal
	(*ProtoLightSymbol)(nil),                       // 83: ProtoLightSymbol
	(*ProtoSymbolDescription)(nil),                 // 84: ProtoSymbolDescription
	(*ProtoDynamicLeverage)(nil),                   // 85: ProtoDynamicLeverage
	(*ProtoDynamicLeverageTier)(nil),               // 86: ProtoDynamicLeverageTier
	(*ProtoGSLSchedule)(nil),                       // 87: ProtoGSLSchedule
	(*ProtoGSLScheduleTier)(nil),                   // 88: ProtoGSLScheduleTier
	(*ProtoOrderActionIP)(nil),                     // 89: ProtoOrderActionIP
	(*ProtoWithdrawRequest)(nil),                   // 90: ProtoWithdrawRequest
	(*ProtoScheduleProfile)(nil),                   // 91: ProtoScheduleProfile
	(*ProtoCommissionProfile)(nil),                 // 92: ProtoCommissionProfile
	(*ProtoVolumeProfile)(nil),                     // 93: ProtoVolumeProfile
	(*ProtoExecutionProfile)(nil),                  // 94: ProtoExecutionProfile
	(*ProtoProtectionProfile)(nil),                 // 95: ProtoProtectionProfile
	(*ProtoSwapFreeProfile)(nil),                   // 96: ProtoSwapFreeProfile
	(*ProtoHoliday)(nil),                           // 97: ProtoHoliday
	(*ProtoHolidayProfile)(nil),                    // 98: ProtoHolidayProfile
	(*ProtoSwapAndDividendSymbol)(nil),             // 99: ProtoSwapAndDividendSymbol
	(*ProtoSwapAndDividendProfile)(nil),            // 100: ProtoSwapAndDividendProfile
	(*ProtoLightSwapAndDividendProfile)(nil),       // 101: ProtoLightSwapAndDividendProfile
	(*ProtoFuturesSettings)(nil),                   // 102: ProtoFuturesSettings
	(*ProtoIbCommissionSymbolCategory)(nil),        // 103: ProtoIbCommissionSymbolCategory
	(*ProtoTradeNotificationProfile)(nil),          // 104: ProtoTradeNotificationProfile
	(*ProtoManagerLightTrader)(nil),                // 105: ProtoManagerLightTrader
	(*ProtoGeoInfo)(nil),                           // 106: ProtoGeoInfo
}
var file_CSModelMessages_External_proto_depIdxs = []int32{
	40,  // 0: ProtoTrendbar.period:type_name -> ProtoTrendbarPeriod
	8,   // 1: ProtoTradeData.tradeSide:type_name -> ProtoTradeSide
	42,  // 2: ProtoPosition.tradeData:type_name -> ProtoTradeData
	7,   // 3: ProtoPosition.positionStatus:type_name -> ProtoPositionStatus
	23,  // 4: ProtoPosition.bookType:type_name -> ProtoBookType
	12,  // 5: ProtoPosition.stopLossTriggerMethod:type_name -> ProtoOrderTriggerMethod
	42,  // 6: ProtoOrder.tradeData:type_name -> ProtoTradeData
	9,   // 7: ProtoOrder.orderType:type_name -> ProtoOrderType
	11,  // 8: ProtoOrder.orderStatus:type_name -> ProtoOrderStatus
	23,  // 9: ProtoOrder.bookType:type_name -> ProtoBookType
	10,  // 10: ProtoOrder.timeInForce:type_name -> ProtoTimeInForce
	12,  // 11: ProtoOrder.stopTriggerMethod:type_name -> ProtoOrderTriggerMethod
	12,  // 12: ProtoOrder.stopLossTriggerMethod:type_name -> ProtoOrderTriggerMethod
	12,  // 13: ProtoClosePositionDetail.stopLossTriggerMethod:type_name -> ProtoOrderTriggerMethod
	3,   // 14: ProtoOrderAction.actionType:type_name -> ProtoActionType
	4,   // 15: ProtoOrderAction.actionStatus:type_name -> ProtoActionStatus
	12,  // 16: ProtoOrderAction.stopTriggerMethod:type_name -> ProtoOrderTriggerMethod
	12,  // 17: ProtoOrderAction.stopLossTriggerMethod:type_name -> ProtoOrderTriggerMethod
	5,   // 18: ProtoDepositWithdraw.operationType:type_name -> ProtoChangeBalanceType
	6,   // 19: ProtoBonusDepositWithdraw.operationType:type_name -> ProtoChangeBonusType
	13,  // 20: ProtoTrader.accountType:type_name -> ProtoAccountType
	18,  // 21: ProtoTrader.defaultIbCommissionsType:type_name -> ProtoCommissionType
	18,  // 22: ProtoTrader.ibCommissionsType:type_name -> ProtoCommissionType
	50,  // 23: ProtoTrader.rank:type_name -> ProtoTraderRank
	15,  // 24: ProtoTrader.accessRights:type_name -> ProtoAccessRights
	14,  // 25: ProtoTrader.totalMarginCalculationType:type_name -> ProtoTotalMarginCalculationType
	36,  // 26: ProtoTrader.limitedRiskMarginCalculationStrategy:type_name -> ProtoLimitedRiskMarginCalculationStrategy
	103, // 27: ProtoTrader.defaultIbCommissionSymbolCategory:type_name -> ProtoIbCommissionSymbolCategory
	103, // 28: ProtoTrader.ibCommissionSymbolCategory:type_name -> ProtoIbCommissionSymbolCategory
	33,  // 29: ProtoMinimumSpreadConstraint.bias:type_name -> ProtoQuoteType
	51,  // 30: ProtoManagerSymbol.minimumSpreadConstraint:type_name -> ProtoMinimumSpreadConstraint
	19,  // 31: ProtoManagerSymbol.tradingMode:type_name -> ProtoTradingMode
	21,  // 32: ProtoManagerSymbol.defaultSwapRollover3Days:type_name -> ProtoDayOfWeek
	54,  // 33: ProtoManagerSymbol.translation:type_name -> ProtoLocalization
	102, // 34: ProtoManagerSymbol.futuresSettings:type_name -> ProtoFuturesSettings
	56,  // 35: ProtoGroup.symbol:type_name -> ProtoGroupSymbol
	58,  // 36: ProtoGroup.dynamicCommission:type_name -> ProtoDynamicCommission
	27,  // 37: ProtoServerSetting.key:type_name -> ProtoServerSettingType
	28,  // 38: ProtoManager.permission:type_name -> ProtoManagerPermission
	23,  // 39: ProtoExposureSymbolRecord.bookType:type_name -> ProtoBookType
	30,  // 40: ProtoAsset.type:type_name -> ProtoAssetType
	65,  // 41: ProtoPriceStream.priceStreamSymbol:type_name -> ProtoPriceStreamSymbol
	8,   // 42: ProtoDeal.tradeSide:type_name -> ProtoTradeSide
	31,  // 43: ProtoDeal.dealStatus:type_name -> ProtoDealStatus
	32,  // 44: ProtoDeal.dealType:type_name -> ProtoDealType
	23,  // 45: ProtoDeal.bookType:type_name -> ProtoBookType
	45,  // 46: ProtoDeal.closePositionDetail:type_name -> ProtoClosePositionDetail
	8,   // 47: ProtoLightClosingDeal.tradeSide:type_name -> ProtoTradeSide
	31,  // 48: ProtoLightClosingDeal.dealStatus:type_name -> ProtoDealStatus
	32,  // 49: ProtoLightClosingDeal.dealType:type_name -> ProtoDealType
	71,  // 50: ProtoLightClosingDeal.closePositionDetail:type_name -> ProtoLightClosePositionDetail
	72,  // 51: ProtoLightClosingDeal.offsetDeals:type_name -> ProtoLightOffsetDeal
	106, // 52: ProtoTraderSessionInfo.geoInfo:type_name -> ProtoGeoInfo
	79,  // 53: ProtoMaxAutoExecutionSizeProfile.symbol:type_name -> ProtoMaxAutoExecutionSizeSymbol
	9,   // 54: ProtoManualDeal.orderType:type_name -> ProtoOrderType
	8,   // 55: ProtoManualDeal.tradeSide:type_name -> ProtoTradeSide
	23,  // 56: ProtoManualDeal.bookType:type_name -> ProtoBookType
	34,  // 57: ProtoManualDeal.reason:type_name -> ProtoManualDealReason
	86,  // 58: ProtoDynamicLeverage.tiers:type_name -> ProtoDynamicLeverageTier
	88,  // 59: ProtoGSLSchedule.tiers:type_name -> ProtoGSLScheduleTier
	35,  // 60: ProtoWithdrawRequest.requestStatus:type_name -> ProtoRequestStatus
	66,  // 61: ProtoScheduleProfile.interval:type_name -> ProtoInterval
	18,  // 62: ProtoCommissionProfile.commissionType:type_name -> ProtoCommissionType
	22,  // 63: ProtoCommissionProfile.minCommissionType:type_name -> ProtoMinCommissionType
	39,  // 64: ProtoExecutionProfile.executionPolicy:type_name -> ProtoExecutionPolicy
	16,  // 65: ProtoExecutionProfile.gslExecutionPolicy:type_name -> ProtoGSLExecutionPolicy
	25,  // 66: ProtoProtectionProfile.distanceSetIn:type_name -> ProtoSymbolDistanceType
	21,  // 67: ProtoSwapFreeProfile.rolloverCommission3Days:type_name -> ProtoDayOfWeek
	21,  // 68: ProtoSwapAndDividendSymbol.swapRollover3Days:type_name -> ProtoDayOfWeek
	20,  // 69: ProtoSwapAndDividendSymbol.swapCalculationType:type_name -> ProtoSwapCalculationType
	99,  // 70: ProtoSwapAndDividendProfile.symbol:type_name -> ProtoSwapAndDividendSymbol
	18,  // 71: ProtoIbCommissionSymbolCategory.ibCommissionsType:type_name -> ProtoCommissionType
	24,  // 72: ProtoTradeNotificationProfile.bookType:type_name -> ProtoBookRequestType
	73,  // [73:73] is the sub-list for method output_type
	73,  // [73:73] is the sub-list for method input_type
	73,  // [73:73] is the sub-list for extension type_name
	73,  // [73:73] is the sub-list for extension extendee
	0,   // [0:73] is the sub-list for field type_name
}

func init() { file_CSModelMessages_External_proto_init() }
func file_CSModelMessages_External_proto_init() {
	if File_CSModelMessages_External_proto != nil {
		return
	}
	file_CommonModelMessages_External_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_CSModelMessages_External_proto_rawDesc), len(file_CSModelMessages_External_proto_rawDesc)),
			NumEnums:      41,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_CSModelMessages_External_proto_goTypes,
		DependencyIndexes: file_CSModelMessages_External_proto_depIdxs,
		EnumInfos:         file_CSModelMessages_External_proto_enumTypes,
		MessageInfos:      file_CSModelMessages_External_proto_msgTypes,
	}.Build()
	File_CSModelMessages_External_proto = out.File
	file_CSModelMessages_External_proto_goTypes = nil
	file_CSModelMessages_External_proto_depIdxs = nil
}
